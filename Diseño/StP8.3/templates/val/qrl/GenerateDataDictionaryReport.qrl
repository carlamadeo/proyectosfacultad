
#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/CreateDir.inc"




void 
main ()
{

  format ("ValidatorDocuments.mif");
//   PrintTitle();
  PrintTypes();

}


void
PrintTypes()
{
  paragraph ("Sec1");
  print ("Data Type Declarations");

  PrintIntegerTypes();
  PrintRealTypes();
  PrintStringTypes();

}


void
PrintIntegerTypes()

{
  string q1="node[ttesttype&& node_refs&& items[tdatatypeclass " +
            " && value=='integer']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  message ("Printing Integer DataTypes");
  paragraph ("Sec2");
  print ("Integer Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);
      paragraph ("Sec3");
      print (nodevar.name);

      PrintMinimumValue(nodevar.id);
      PrintMaximumValue(nodevar.id);
      PrintResolutionValue(nodevar.id);
      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);
    }

}



void
PrintRealTypes()

{
  string q1="node[ttesttype&& node_refs&& items[tdatatypeclass " +
            " && value=='real']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  message ("Printing Real DataTypes");
  paragraph ("Sec2");
  print ("Real Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);

      paragraph ("Sec3");
      print (nodevar.name);

      PrintMinimumValue(nodevar.id);
      PrintMaximumValue(nodevar.id);
      PrintResolutionValue(nodevar.id);
      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);
    }

}




void
PrintStringTypes()

{
  string q1="node[ttesttype&& node_refs&& items[tdatatypeclass " +
            " && value=='string']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  message ("Printing String DataTypes");
  paragraph ("Sec2");
  print ("String Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);

      paragraph ("Sec3");
      print (nodevar.name);

      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);
    }

}


void
PrintMinimumValue(int id)
{
  string query = "item[tminimumvalue && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Values");
      print("Minimum Value:\t" + itemvar.value);
    }
}

void
PrintMaximumValue(int id)
{
  string query = "item[tmaximumvalue && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Values");
      print("Maximum Value:\t" + itemvar.value);
    }

}

void
PrintResolutionValue(int id)
{
  string query = "item[tresolution && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Values");
      print("Resolution Value:\t" + itemvar.value);
    }

}

void
PrintTestValues(int id)
{
  string query = "item[ttestvalue && obj_id==${id}]";
  item itemvar;
  list itemlist;
  int i,count,num;

  itemlist = list_select(query);

  count = list_count(itemlist);

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist,i);
      num=i+1;
      paragraph("Values");
      print ("Value " + num + ":\t" + itemvar.value);
    }

}

void
PrintInvalidSubdomain(int id)
{
  string query = "item[tinvalidsubdomain && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Values");
      paragraph("Values");
      print("Invalid Subdomain:\t" + itemvar.value);
    }

}
