external string use_case_name;


#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/val_string_globals.inc"
#include "val/qrl/include/CreateDir.inc"




  string OUTPUTPATH = current_projdir() + current_system() + "/test_files/";
  string OUTPUTDIR;

  set DataItemsDataTypes;


void 
main ()
{
  format ("ValidatorDocuments.mif");


  list ScenarioList;
  int count1, i;
  int count2, j;
  string test_unit_id, scenario_name;
  node scenario;
  int scenario_id;
  int scenarionumber=0;
  set DataTypes;
  string ActorIDs;

  DataItemsDataTypes = set_create ("string");

  set_clear(DataItemsDataTypes);


  test_unit_id = Get_T_test_unit_id(use_case_name, "");

  OUTPUTDIR = OUTPUTPATH + test_unit_id;
  message ("Generating Data for Use Case: " + use_case_name); 

  ActorIDs = GetActorIDList(use_case_name);

  ScenarioList = GetScenarioList(use_case_name);
  count2 = list_count (ScenarioList);

  if (count2 > 0)
    {
      PrintTitlePage(use_case_name);
      PrintUseCaseDiagram(use_case_name);
    }

  for (j=0;j<count2;j=j+1)
    {
      scenario = list_get(ScenarioList,j);
      scenario_name = scenario.name;
      scenario_id = scenario.id;
      message ("  Generating Data for Scenario: " + scenario_name );

      PrintScenarioDiagram(use_case_name, scenario_name, ++scenarionumber);

      paragraph ("Sec2");
      print ("Event Data Parameters");
      Build_Data_List(scenario_name, scenario_id, ActorIDs);


      paragraph ("Sec2");
      print ("Script Commands");

      paragraph ("Sec3");
      print ("Script Initialization Commands");

      PrintDiagScriptCommand("TInitScriptCommand", DiagID(use_case_name),  "OMTDiagram", "Diagram Initialization");
      PrintScriptCommand("TInitScriptCommand", use_case_name, 
         "node", "OMTUseCase", "Use Case Initialization");
      PrintScriptCommand("TInitScriptCommand", scenario_name, 
         "node", "OMTScenarioName", "Scenario Initialization");
      PrintScriptCommand("TScriptCommand", scenario_name, 
         "node", "OMTScenarioName", "Scenario Script");
 
      paragraph ("Sec3");
      print ("Event Trace Commands");


      AddConstraint(scenario_id, "OMTEventConstraintBefore", 
         "Initialization", "TInitScriptCommand", 
         "Event Trace Initialization");
      Build_Event_Section(scenario_name, scenario_id, ActorIDs);

      AddConstraint(scenario_id, "OMTEventConstraintAfter", 
         "Termination", "TTermScriptCommand", "Event Trace Termination");


      paragraph ("Sec3");
      print ("Script Termination Commands");

      PrintScriptCommand("TTermScriptCommand", scenario_name, 
         "node", "OMTScenarioName", "Scenario Termination");
      PrintScriptCommand("TTermScriptCommand", use_case_name, 
         "node", "OMTUseCase", "Use Case Termination");
      PrintDiagScriptCommand("TTermScriptCommand", DiagID(use_case_name), "OMTDiagram", "Diagram Termination");

    }

}


void
Build_Event_Section( string scenario_name, int scenario_id,
            string actorids)
{
  list Events;
  list EventList;
  int event_id, i,count;
  string eventname, fromclass, toclass, actionname;
  link_ref linkrefvar;
  int eventnumber = 0;
  string  caption;

  Events = list_create ("string", 0);

  list_clear(Events);

  Events = GetEvents( scenario_id, actorids);


  EventList = list_create("string",0);

  count = list_count(Events);

  for (i=0; i<count; i=i+1)
    {
       linkrefvar = list_get(Events, i);
       eventname = GetEventName(linkrefvar.link_id);
       event_id = linkrefvar.link_id;

       caption = "Event " + ++eventnumber + ": " + eventname;

       PrintScriptCommandLink("TScriptCommand", eventname, scenario_id,
         "link", "OMTEventInstance" , caption);
    }


}


string
GetEventName( int link_id)
{
  link linkvar;
  string query = "link [ id == ${link_id} ]";

  linkvar = find_by_query (query);

  if (linkvar == NULL)
    return ("NULL");
  else 
    return (linkvar.name);

}



list
GetEvents(int scenario_id, string actorids)
{
 
  string linkref_query, noderef_query;
  node_ref nr;

  if (actorids == "")
      actorids = "0";

  noderef_query = "node_ref [node_id == ${scenario_id} ] ";

  nr = find_by_query (noderef_query);

  linkref_query = "link_ref [ file_id == ${nr.file_id} && 
       link [ OMTEventInstance   ] ] sort by ycoord";

  return ( list_select (linkref_query) );

}


void
PrintScriptCommand(string ScriptCommand, string node_name, 
     string query_type, string node_type, string caption)
{

  string query = "note[${ScriptCommand} && " + 
            "${query_type}[${node_type} && name == '${node_name}']]";
  note notevar;
  string tmp = "";

  notevar = find_by_query(query);

  if (notevar != NULL)
    {
      if (notevar.desc != "")
        {
           PrintNoteDescription( notevar.desc, caption);
        }
      else
        {
           PrintNoteDescription( notevar.desc, "There is no ${caption} Script Command");
        }

    }


}




void
PrintDiagScriptCommand(string ScriptCommand, int diag_id, string file_type, string caption)
{

  string query = "note[${ScriptCommand} && file[${diag_id}]]";
  note notevar;
  string tmp = "";

  notevar = find_by_query(query);

  if (notevar != NULL)
    {
      if (notevar.desc != "")
        {
          PrintNoteDescription( notevar.desc, caption);
        }
      else
        {
           PrintNoteDescription( notevar.desc, "There is no ${caption} Script Command");
        }
    }


}



int
DiagID(string usecasename)
{
   string query = "file[OMTDiagram && node_refs[node[ OMTUseCase " +
               " && name=='${usecasename}']]]";

   file filevar;

   filevar = find_by_query(query);

   if (filevar != NULL)
      return (filevar.id);
   else
      return (0);
}



void
PrintScriptCommandLink(string ScriptCommand, string node_name, 
     int scopenode, string query_type, string node_type, string caption)
{

  string query = "note[${ScriptCommand} && " + 
            "${query_type}[${node_type} && name == '${node_name}'
             && scope_node_id == ${scopenode}]]";
  note notevar;
  string tmp = "";

  notevar = find_by_query(query);

  if (notevar != NULL)
    {
      if (notevar.desc != "")
        {
          PrintNoteDescription( notevar.desc, caption);
        }
    }


}




void
AddConstraint(int id, string notetype, string name, 
     string commandtype, string caption)
{

  string query = "node_ref[node_id == ${id} && file[OMTDiagram] ]";

  string query1 = "cntx [${notetype} && name == '${name}' " +
              " && cntx_refs[file_id == ${noderefvar.file_id} ] ]";

  string query2 = "note[${commandtype} && obj_id == ${cntxvar.id}]";


  node_ref noderefvar;
  cntx cntxvar;
  note notevar;

  noderefvar = find_by_query(query);
  cntxvar = find_by_query(query1);
  if (cntxvar == NULL)
    return;

  notevar = find_by_query(query2);

  if (notevar != NULL)
    {
      if (notevar.desc != "")
        PrintNoteDescription( notevar.desc, caption);
    }
}



void
PrintNoteDescription ( string desc, string caption)
{

  paragraph ("Sec4");
  print ( caption );
  
  paragraph ("script");
  print (desc);

}



void
PrintUseCaseDiagram(string use_case_name)
{

  string query= "file [ OMTDiagram && node_refs[ node[OMTUseCase && name =='${use_case_name}'] ] ]";
  file filevar;

  InitializeDiagrams();


  filevar = find_by_query(query);
  if (filevar != NULL)
    {
      file_print ( filevar, "Use Case Diagram: " + filevar.name);
    }
}


void
PrintScenarioDiagram(string use_case_name, string scenario_name, int scenario_number)
{
  string query= "file [ OMTDiagram &&  node_refs[ node[OMTScenarioName && name =='${scenario_name}' && scope_node [ OMTUseCaseParent && name == '${use_case_name}']] ]]";
  file filevar;

  string descquery = "note[GenericObject &&  node[OMTScenarioName && name =='${scenario_name}'&& scope_node [ OMTUseCaseParent && name == '${use_case_name}']] ]";

  int desclength = 0;
  note notevar;
  

  paragraph ("Sec1");
  print ("Scenario \"" + scenario_name + "\"" );

  filevar = find_by_query(query);
  if (filevar != NULL)
    {
      file_print ( filevar, "Event Trace Diagram: " + filevar.name);
    }


  notevar = find_by_query(descquery);

  if (notevar != NULL)
    desclength = string_length(notevar.desc);
  if (desclength > 0)
    {
       paragraph ("description");
       print (notevar.desc);
    }


}

void
InitializeDiagrams()
{

  set displaymarks;
  displaymarks = set_create("string");

  set_add (displaymarks, "UseCaseScenariosExist");
  diagram_orientation_scale_set(PortraitFit);
  diagram_frame_width_set(6.75);
  diagram_display_mark_no_print_set( displaymarks );

}



void
PrintTitlePage(string use_case_name)
{

  paragraph ("Title");
  print ("");
  paragraph ("BTitle");
  print ("Test Script Report");
  paragraph ("BSubTitle");
  print ("for");
  paragraph ("BSubTitle");
  print ( "Use Case / Requirement" );
  paragraph ("BSubTitle");
  print ( "");
  paragraph ("BSubTitle");
  print ( use_case_name);

}


void
Build_Data_List( string scenario_name, int scenario_id,
            string actorids)
{
  list Events;
  list EventList;
  int event_id, i,count;
  string eventname, fromclass, toclass, actionname;
  link_ref linkrefvar;
  int eventnumber = 0;


  Events = list_create ("string", 0);

  list_clear(Events);

  Events = GetEvents( scenario_id, actorids);


  EventList = list_create("string",0);

  count = list_count(Events);

  for (i=0; i<count; i=i+1)
    {
       linkrefvar = list_get(Events, i);
       eventname = GetEventName(linkrefvar.link_id);
       event_id = linkrefvar.link_id;


       GetData(event_id, eventname);
    }


}


void
GetData ( int event_id, string eventname)
{
  int i,count;
  note notevar;
  list TNote, notelist;
  item iv1, iv2, iv3, iv4, iv5;

  string query = "note [TestDataItem && obj_id == ${event_id}]";
  string q1 = "item [TDataItemName && note_id == ${notevar.id}]";
  string q2 = "item [TDataTypeName && note_id == ${notevar.id}]";
  string q3 = "item [TDataType && note_id == ${notevar.id}]";
  string q4 = "item [TFixedValue && note_id == ${notevar.id}]";
  string q5 = "item [TExhaustiveTest && note_id == ${notevar.id}]";

  notelist = list_select(query);
  TNote = SortBySequenceNumber(notelist, event_id);

  count = list_count(TNote);
  if (count == 0)
    return;


  paragraph ("description");
  print ("Event:\t" + eventname );


  for (i=0; i<count; i=i+1)
    {
      notevar = list_get(TNote, i);

      iv1 = find_by_query(q1);
      iv2 = find_by_query(q2);
      iv3 = find_by_query(q3);
      iv4 = find_by_query(q4);
      iv5 = find_by_query(q5);

      if (iv1 != NULL)
        {
      paragraph ("description");
      print ("\tData Item:\t\t" + iv1.value );
        }

      if (iv2 != NULL)
        {
      paragraph ("description");
      print ("\t\tHas Data Type:\t\t" + iv2.value );
        }

      if (iv3 != NULL)
        {
      paragraph ("description");
      print ("\t\tHas Predefined Data Type:\t\t" + iv3.value );
        }

      if (iv4 != NULL)
        {
      paragraph ("description");
      print ("\t\tHas Fixed Value:\t\t" + iv4.value );
        }

      if (iv5 != NULL)
        {
      paragraph ("description");
      print ("\t\tIs Tested Exhaustively:\t\t" + iv5.value );
        }

    }

}

