external string e_USECASES;

#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/Progress.inc"
#include "val/qrl/include/FormatTestCaseData.inc"
#include "val/qrl/include/ValidatorFormats.inc"
#include "val/qrl/include/CreateDir.inc"

void  
formatTestCases(string sOutputPath, list lstTestUnitIds, int nProgressLevel)
{

  int i, count = list_count(lstTestUnitIds);
  if (count > 1)
    for (i=0;i<count;i++)
        tdriverPrepare (list_to_string(lstTestUnitIds, " -U "), sOutputPath + " -sf .cdf -pl " + nProgressLevel, "UseCaseTestScripts");
  else
  {
     string sTestUnitId = list_get(lstTestUnitIds, 0);
     tdriverPrepare (sTestUnitId, sOutputPath + sTestUnitId + "/" + sTestUnitId + ".cdf -pl " + nProgressLevel, "UseCaseTestScripts");
  }
}

string getFormatFileExtention(string sReportType)
{

    if (sReportType == "html") // HTML
        return  ".css";

    return ("." + sReportType);

}


void 
main ()
{

  initProgress(1);
  initValidatorMessaging("Test Specification");

  list lstTestUnitIds = list_create("string", 0);
  string OUTPUTPATH = current_projdir() + current_system() + "/test_files/";
  string MIFFILE;

  list UseCaseList;
  int count, i;
  string use_case_name, test_unit_id;

  UseCaseList = string_to_list (e_USECASES, " ");
  count = list_count (UseCaseList);
  updateProgress("Formatting Test Case Data...");       
  setProgressStep(calcProgressStep(2, 20, count));
  validatorUserMessage("Phase 1: Formatting Test Cases data");
  validatorUserMessage("Use Cases processed:");
  //validatorUserMessage(" ");
  for (i=0;i<count;i++)
    {
      use_case_name = list_get(UseCaseList,i);
      if (!CheckExistance (use_case_name) )
        {
          validatorErrorMessage("Use Case: " + use_case_name + " is not in the selected model");
          list_delete(UseCaseList,i);
          continue;
        }

      updateProgress("Formatting Test Case Data for usecase " + use_case_name + "...");
      test_unit_id = Get_T_test_unit_id(use_case_name, "");
      
         
      if (!CheckForSDF(OUTPUTPATH + test_unit_id + "/", "TDDB"))
        {
            validatorErrorMessage("TDDB file for " + test_unit_id + " does not exist.");
	        list_delete(UseCaseList,i);
	        continue;
        }

      list_append(lstTestUnitIds, test_unit_id);
      formatTestCaseData(test_unit_id, use_case_name);
    }

  if( list_count(lstTestUnitIds) == 0)
  {
    validatorErrorMessage("No sutable use cases to generate test specification.");
    doneProgress();
    return;
  }
  // == UI control:
  progress("Formatting test cases...", 22);
  //validatorUserMessage(" ");
  validatorUserMessage("Phase 2: Force TDriver to prepare Test Cases.");
  
  //validatorUserMessage(".._TDriver___..................................................................");
  formatTestCases(OUTPUTPATH, lstTestUnitIds, 1);
  e_DEFAULT_FORMAT = e_DEFAULT_FORMAT + getFormatFileExtention(e_REPORT_TYPE);
  //validatorUserMessage(".._End_TDriver___..............................................................");

  // == UI control:
  updateProgress("Generating Test Specifications...");
  setProgressStep(calcProgressStep(22, 100, count));
  validatorUserMessage(" ");
  validatorUserMessage("Phase 3: Generating Test Specification Document");
  validatorUserMessage("Use Cases processed:");
  
  for (i=0;i<count;i++)
    {
      use_case_name = list_get(UseCaseList,i);
      test_unit_id = list_get(lstTestUnitIds, i);
      MIFFILE = OUTPUTPATH + test_unit_id + "/" + e_REPORT_FILE + "." + e_REPORT_TYPE;
      
      updateProgress("Generating Test Spcification for usecase " + use_case_name + "...");
      validatorUserMessage("  ");
      validatorUserMessage("  " + use_case_name);
      
      if (VALIDATOR_BASE_PRODUCT == "UML")
          system ("qrp -p ${projdir} -s ${system} -x e_FORMAT_TESTCASE_DATA False -x e_USECASE '${use_case_name}' -x e_DOCAUTHOR '${e_DOCAUTHOR}' -x e_COMPANY '${e_COMPANY}' -x e_DIVISION '${e_DIVISION}' -x e_DOC_VERSION '${e_DOC_VERSION}' -x e_DOC_STATUS '${e_DOC_STATUS}' -f ${e_DEFAULT_FORMAT}  -t ${e_REPORT_TYPE} -o ${MIFFILE} val/qrl/GenerateOneTestSpecificationForUML.qrl");
      else
          system ("qrp -p ${projdir} -s ${system} -x e_FORMAT_TESTCASE_DATA False -x e_USECASE '${use_case_name}' -x e_DOCAUTHOR '${e_DOCAUTHOR}' -x e_COMPANY '${e_COMPANY}' -x e_DIVISION '${e_DIVISION}' -x e_DOC_VERSION '${e_DOC_VERSION}' -x e_DOC_STATUS '${e_DOC_STATUS}' -f ${e_DEFAULT_FORMAT}  -t ${e_REPORT_TYPE} -o ${MIFFILE} val/qrl/GenerateOneTestSpecificationForOMT.qrl");
      
      validatorUserMessage("  produced report: " + MIFFILE);
      updateProgress("Writing data for Use Case: " + use_case_name);
    }
  validatorUserMessage(" ");

  doneProgress();
  finalizeValidatorMessaging(NULL);

}


