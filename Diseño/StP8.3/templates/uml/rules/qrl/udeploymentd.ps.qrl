
//      StP/UML
//      Confidential property of Aonix
//      Copyright (c) 1997
//      All rights reserved

#include "rules/qrl/ps.inc"
#include "rules/qrl/uclassd.ps.inc" // ECR 5184

//////////////////////////////////////////////
// 
//  Deployment Nodes
//
//////////////////////////////////////////////

void
UmlDeployment_ps_show()

{
    gde_builtin("PropertySheetShow UmlDeployment_ps");

    // reset

    UmlDeployment_ps_init();
}


// double click hook
void
UmlDeployment_ps_double_click(gde_mapsymbol ms)
{
    ps_reset_last_fill();
    UmlDeployment_ps_show();
}



boolean UmlDeployment_ps_initted = False;

void
UmlDeployment_ps_init()

{
    if (UmlDeployment_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlDeployment_ps");
        return;
    }
    UmlDeployment_ps_initted = True;
//    gde_builtin("EditorActionDone 0214951139  UmlDeployment_ps_ActionDone();"); // ECR 6880
    ps_init("UmlDeployment_ps", "ObjectName", ps_Node, string_to_list("binaryComponent executableComponent objectComponent interfaceComponent deploymentComponent", " "), ps_Node);

    // ECR 3789 begin
    ps_append_field("UmlDeployment_ps", "ObjectDescription",
    "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    // ECR 3789 end
    ps_append_field("UmlDeployment_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlDeployment_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlDeployment_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);

    ps_fill("UmlDeployment_ps");

    //ps_dump();

    return;
}


// change focus of property sheet

void
UmlDeployment_ps_ActionDone()
{
    // reset propsheet
    if( ui_owner_visible(to_ui_prop("UmlDeployment_ps","OK")) ) // ECR 4037
        ps_fill("UmlDeployment_ps");
}

//////////////////////////////////////////////
// 
//  Deployment Links
//
//////////////////////////////////////////////

void
UmlDeploymentLink_ps_show()
{
    gde_builtin("PropertySheetShow UmlDeploymentLink_ps");

    // reset

    UmlDeploymentLink_ps_init();
}


// double click hook
void
UmlDeploymentLink_ps_double_click(gde_mapsymbol ms)
{
    ps_reset_last_fill();
    UmlDeploymentLink_ps_show();
}

boolean UmlDeploymentLink_ps_initted = False;

void
UmlDeploymentLink_ps_init()
{
    if (UmlDeploymentLink_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlDeploymentLink_ps");
        return;
    }
    UmlDeploymentLink_ps_initted = True;
//    gde_builtin("EditorActionDone 0214951140  UmlDeploymentLink_ps_ActionDone();"); // ECR 6880
    // added Communicates for ECR 4514

// ECR 6926 begin
    //ps_init("UmlDeploymentLink_ps", "", ps_Link, string_to_list("Dependency Interface isComponentOf deploys Communicates", " "), ps_Link);
    ps_init("UmlDeploymentLink_ps", "ObjectName", ps_Link, string_to_list("Dependency Interface isComponentOf deploys Communicates", " "), ps_Link);
// ECR 6926 end

    // ECR 3789 begin
    ps_append_field("UmlDeploymentLink_ps", "ObjectDescription",
    "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    // ECR 3789 end
    ps_append_field("UmlDeploymentLink_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlDeploymentLink_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlDeploymentLink_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);

    ps_fill("UmlDeploymentLink_ps");

    //ps_dump();

    return;
}


// change focus of property sheet

void
UmlDeploymentLink_ps_ActionDone()

{
    // reset propsheet

    if( ui_owner_visible(to_ui_prop("UmlDeploymentLink_ps","OK")) ) // ECR 4037
        ps_fill("UmlDeploymentLink_ps");
}

// Active Function
int
UmlDeploymentObjectPropsActive()
{
    list symbols;

    symbols = gde_selected_symbols();
    if (list_count(symbols) != 1)
        return ACTIVE_FUNC_IS_INACTIVE;

    // added Communicates for ECR 4514
    // ECR 5184 added Class symbol
    if (list_count(gde_symbols_find_with_types(symbols, string_to_list("binaryComponent executableComponent objectComponent interfaceComponent deploymentComponent Dependency Interface isComponentOf deploys Communicates Class", " "))) == 1)
        return ACTIVE_FUNC_IS_ACTIVE;

    return ACTIVE_FUNC_IS_INACTIVE;
}



