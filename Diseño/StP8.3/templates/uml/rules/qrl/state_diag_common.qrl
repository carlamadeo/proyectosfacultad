// ECR 6596 new file for property callbacks common to activity and state diagrams
int _oldChoiceType = NULL;
string _oldSelectedClassName = NULL;
string _oldFilter = NULL;
string _filter = "";
gde_node _lastStateMachine = NULL;

void StateMachineSelection_Reset()
{
    // message("In StateMachineSelection_Reset()");
    int choiceType = ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice"));
    ui_prop StateMachineMainList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineMainList");
    ui_prop StateMachineOperationList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineOperationList");
    if(choiceType == 3)
        ui_activate(StateMachineOperationList, True);
    else
        ui_activate(StateMachineOperationList, False);
    list stateMachines = gde_nodes_find_by_type(gde_selected_symbols(), UML_STATE_MACHINE_SYMBOL_TYPE);
    _filter = gde_node_label(list_get(stateMachines, 0));
    _lastStateMachine = list_get(stateMachines, 0);
    ui_text_set_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection"), _filter);
    ui_activate(ui_apply_button("StateMachineChooseNames_ps"), False);
    ui_activate(ui_ok_button("StateMachineChooseNames_ps"), False);
    if(_oldChoiceType == NULL)
        gde_builtin("EditorActionDone 0214951139  StateMachineSelection_Deactivate();");
    StateMachineFillList(choiceType, StateMachineOperationList, StateMachineMainList);
    ui_button_set_as_default(ui_ok_button("StateMachineChooseNames_ps"), False);
    ui_button_set_as_default(to_ui_prop("StateMachineChooseNames_ps",  "Reset"), True);
}

void
StateMachineSelection_Deactivate()
{
    // message("In StateMachineSelection_Deactivate()");
    list stateMachines = gde_nodes_find_by_type(gde_selected_symbols(), UML_STATE_MACHINE_SYMBOL_TYPE);
    boolean activate;
    if(list_count(stateMachines) == 0)
        activate = False;
    else
        activate = True;

    ui_activate(to_ui_prop("StateMachineChooseNames_ps", "StateMachineMainList"), activate);
    ui_activate(to_ui_prop("StateMachineChooseNames_ps", "StateMachineTypeChoice"), activate);
    ui_activate(to_ui_prop("StateMachineChooseNames_ps", "StateMachineSelection"), activate);
    ui_activate(to_ui_prop("StateMachineChooseNames_ps", "Reset"), activate);

    if(activate == False || ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice")) == 3)
        ui_activate(to_ui_prop("StateMachineChooseNames_ps", "StateMachineOperationList"), activate);

    if(activate == False) {
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), activate);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), activate);
    }
    else {
        if(_lastStateMachine != list_get(stateMachines, 0))
            StateMachineSelection_Reset();
        else if(list_count(ui_list_selected_items(to_ui_prop("StateMachineChooseNames_ps", "StateMachineMainList"))) != 0 &&
            (ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice")) != 3 ||
                list_count(ui_list_selected_items(to_ui_prop("StateMachineChooseNames_ps", "StateMachineOperationList"))) != 0)) {
            ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
            ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
        }
    }
}

int xxx = 0;

void StateMachineFillList(int choiceType, ui_prop StateMachineOperationList, ui_prop StateMachineMainList)
{
    if(++ xxx > 50)
        return;
    // message("In StateMachineFillList(" + choiceType + ", " + ui_prop_name(StateMachineOperationList) + ", " + ui_prop_name(StateMachineMainList) + ")");
    // message("_oldChoiceType: " + to_string(_oldChoiceType));
    // message("_filter: " + to_string(_filter));
    // message("_oldFilter: " + to_string(_oldFilter));
    // message("_oldSelectedClassName: " + to_string(_oldSelectedClassName));

    if(choiceType != 3 && _oldChoiceType == choiceType && _oldFilter == _filter)
        return;

    string l_oldFilter = _oldFilter;
    int l_oldChoiceType = _oldChoiceType;
    _oldChoiceType = choiceType;
    _oldFilter = _filter;

    node N;
    string my_filter = "";
    if(string_find(_filter, 0, "::") != string_length(_filter)) {
        my_filter = string_extract(_filter, 0, string_find(_filter, 0, "::"));
    }
    else
        my_filter = _filter;
    // message("my_filter: " + to_string(my_filter));

    if(choiceType == 0) {
        ui_list_clear(StateMachineMainList);
        for_each_in_select("node[UmlStateMachine & name $ '${my_filter}*' & node_refs]", N) {
            ui_list_append(StateMachineMainList, N.name);
        }
        if(ui_list_num_items(StateMachineMainList) > 0)
            ui_list_set_selected(StateMachineMainList, 0);
    }
    else if(choiceType == 1) {
        ui_list_clear(StateMachineMainList);
        for_each_in_select("node[UmlUseCase & name $ '${my_filter}*' & node_refs]", N) {
            ui_list_append(StateMachineMainList, N.name);
        }
        if(ui_list_num_items(StateMachineMainList) > 0)
            ui_list_set_selected(StateMachineMainList, 0);
    }
    else if(choiceType == 2) {
        if(l_oldChoiceType != 3) {
            ui_list_clear(StateMachineMainList);
            for_each_in_select("node[UmlClass & name $ '${my_filter}*' & node_refs]", N) {
                ui_list_append(StateMachineMainList, N.name);
            }
            if(ui_list_num_items(StateMachineMainList) > 0)
                ui_list_set_selected(StateMachineMainList, 0);
        }
    }
    else if(choiceType == 3) {
        if(string_find(_filter, 0, "::") != string_find(l_oldFilter, 0, "::")) {
            ui_list_clear(StateMachineMainList);
            for_each_in_select("node[UmlClass & name $ '${my_filter}*' & node_refs]", N) {
                ui_list_append(StateMachineMainList, N.name);
            }
            if(ui_list_num_items(StateMachineMainList) > 0)
                ui_list_set_selected(StateMachineMainList, 0);
        }
        list selectedItems = ui_list_selected_items(StateMachineMainList);
        if(list_count(selectedItems) == 0) {
            ui_list_clear(StateMachineOperationList);
            _oldSelectedClassName = NULL;
        }
        else {
            string selectedClassName = list_get(selectedItems, 0);
            if(_oldSelectedClassName != selectedClassName || l_oldFilter != _filter) {
                _oldSelectedClassName = selectedClassName;
                ui_list_clear(StateMachineOperationList);
                my_filter = "";
                if(string_find(_filter, 0, "::") != string_length(_filter)) {
                    my_filter = string_extract(_filter, string_find(_filter, 0, "::") + 2, string_length(_filter) - string_find(_filter, 0, "::") - 2);
                }
                string my_sig_filter = "";
                if(string_find(my_filter, 0, "(") != string_length(my_filter)) {
                    my_sig_filter = string_extract(my_filter, string_find(my_filter, 0, "(") + 1, string_length(my_filter) - string_find(my_filter, 0, "(") - 1);
                    my_filter = string_extract(my_filter, 0, string_find(my_filter, 0, "("));
                    if(string_length(my_sig_filter) > 0 && string_extract(my_sig_filter, string_length(my_sig_filter) - 1, 1) == ")") {
                        my_sig_filter = string_extract(my_sig_filter, 0, string_length(my_sig_filter) - 1);
                    }
                }

    // message("my_filter(op): " + to_string(my_filter));
    // message("my_sig_filter(op): " + to_string(my_sig_filter));
                if(my_sig_filter != "")
                    my_sig_filter = "sig $ '" + my_sig_filter + "*' &";
                for_each_in_select("node[UmlOperation & name $ '${my_filter}*' & ${my_sig_filter} scope_node[UmlClass && name = '${selectedClassName}'] & node_refs]", N) {
                    ui_list_append(StateMachineOperationList, selectedClassName + "::" + N.name + "(" + N.sig + ")");
                }
                if(ui_list_num_items(StateMachineOperationList) > 0)
                    ui_list_set_selected(StateMachineOperationList, 0);
            }
            else if(ui_list_num_items(StateMachineOperationList) > 0) {
                StateMachineSelection_OperationListSelect_cb(EventSelectRow, StateMachineOperationList, 0, "");
            }
        }
    }
}

int StateMachineSelection_MainListSelect_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_MainListSelect_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    int choiceType = ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice"));
    ui_prop StateMachineSelection = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection");
    string selection = list_get(ui_list_selected_items(theprop), 0);
    if(choiceType == 3) {
        if(string_find(_filter, 0, "::") != string_length(_filter)) {
            selection += string_extract(_filter, string_find(_filter, 0, "::"), string_length(_filter) - string_find(_filter, 0, "::"));
        }
        else {
            selection += "::";
        }
        ui_text_set_value(StateMachineSelection, selection);
        ui_prop StateMachineMainList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineMainList");
        ui_prop StateMachineOperationList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineOperationList");
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), False);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), False);
        StateMachineFillList(choiceType, StateMachineOperationList, StateMachineMainList);
    }
    else {
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
        ui_text_set_value(StateMachineSelection, selection);
    }
    return 0;
}

int StateMachineSelection_MainListDoubleClick_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_MainListDoubleClick_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    int choiceType = ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice"));
    ui_prop StateMachineSelection = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection");
    string selection = list_get(ui_list_selected_items(theprop), 0);
    if(choiceType == 3) {
        if(string_find(_filter, 0, "::") != string_length(_filter)) {
            selection += string_extract(_filter, string_find(_filter, 0, "::"), string_length(_filter) - string_find(_filter, 0, "::"));
        }
        else {
            selection += "::";
        }
        ui_text_set_value(StateMachineSelection, selection);
        ui_prop StateMachineMainList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineMainList");
        ui_prop StateMachineOperationList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineOperationList");
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), False);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), False);
        StateMachineFillList(choiceType, StateMachineOperationList, StateMachineMainList);
    }
    else {
        ui_text_set_value(StateMachineSelection, selection);
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
        StateMachineSelection_OK_cb(event, theprop, id, v);
        ui_owner_dismiss(to_ui_owner("StateMachineChooseNames_ps"));
    }
    return 0;
}

int 
StateMachineSelection_OperationListSelect_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_OperationListSelect_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    ui_prop StateMachineSelection = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection");
    string selection = list_get(ui_list_selected_items(theprop), 0);
    ui_text_set_value(StateMachineSelection, selection);
    ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
    ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
    return 0;
}

int 
StateMachineSelection_OperationListDoubleClick_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_OperationListDoubleClick_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    ui_prop StateMachineSelection = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection");
    string selection = list_get(ui_list_selected_items(theprop), 0);
    ui_text_set_value(StateMachineSelection, selection);
    ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
    ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
    StateMachineSelection_OK_cb(event, theprop, id, v);
    ui_owner_dismiss(to_ui_owner("StateMachineChooseNames_ps"));
    return 0;
}

int 
StateMachineSelection_TypeChanged_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_TypeChanged_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    int choiceType = to_int(v);
    ui_prop StateMachineSelection = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection");
    ui_prop StateMachineMainList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineMainList");
    ui_prop StateMachineOperationList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineOperationList");
    string selection = ui_text_value(StateMachineSelection);
    if(choiceType == 3) {
        if(_oldChoiceType != 2 && _oldChoiceType != 3)
            StateMachineFillList(2, StateMachineOperationList, StateMachineMainList);
        if(string_find(selection, 0, "::") == string_length(selection)) {
//            selection += string_extract(selection, string_find(selection, 0, "::"), string_length(selection) - string_find(selection, 0, "::"));
//        }
//        else {
            selection += "::";
        }
        ui_activate(StateMachineOperationList, True);
    }
    else {
        if(string_find(selection, 0, "::") != string_length(selection)) {
            selection = string_extract(selection, 0, string_find(selection, 0, "::"));
        }
        ui_activate(StateMachineOperationList, False);
    }

    ui_text_set_value(StateMachineSelection, selection);
    StateMachineFillList(choiceType, StateMachineOperationList, StateMachineMainList);
    if(list_count(ui_list_selected_items(StateMachineMainList)) == 0 ||
       choiceType == 3 && list_count(ui_list_selected_items(StateMachineOperationList)) == 0) {
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), False);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), False);
    }
    else {
        ui_activate(ui_apply_button("StateMachineChooseNames_ps"), True);
        ui_activate(ui_ok_button("StateMachineChooseNames_ps"), True);
    }

    return 0;
}

int 
StateMachineSelection_OK_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_OK_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    string selection = ui_text_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection"));
    list stateMachines = gde_nodes_find_by_type(gde_selected_symbols(), UML_STATE_MACHINE_SYMBOL_TYPE);
    if(list_count(stateMachines) == 0)
        return 1;
    // message("new label: " + selection);
    gde_node_set_label(list_get(stateMachines, 0), selection);
    return 0;
}

int 
StateMachineSelection_Apply_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_Apply_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    string selection = ui_text_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection"));
    list stateMachines = gde_nodes_find_by_type(gde_selected_symbols(), UML_STATE_MACHINE_SYMBOL_TYPE);
    if(list_count(stateMachines) == 0)
        return 1;
    // message("new label: " + selection);
    gde_node_set_label(list_get(stateMachines, 0), selection);
    return 0;
}

int 
StateMachineSelection_Cancel_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_Cancel_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    return 0;
}

int 
StateMachineSelection_Filter_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    // message("In StateMachineSelection_Filter_cb(" + to_string(event) + ", " + ui_prop_name(theprop) + ", " + to_string(id) + ", " + v + ")");
    _filter = ui_text_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineSelection"));
    int choiceType = ui_get_value(to_ui_prop("StateMachineChooseNames_ps",  "StateMachineTypeChoice"));
    ui_prop StateMachineMainList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineMainList");
    ui_prop StateMachineOperationList = to_ui_prop("StateMachineChooseNames_ps",  "StateMachineOperationList");
    ui_activate(ui_apply_button("StateMachineChooseNames_ps"), False);
    ui_activate(ui_ok_button("StateMachineChooseNames_ps"), False);
    StateMachineFillList(choiceType, StateMachineOperationList, StateMachineMainList);
    return 0;
}
