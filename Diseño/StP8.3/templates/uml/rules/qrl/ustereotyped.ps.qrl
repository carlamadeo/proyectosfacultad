
//      StP/UML
//      Confidential property of Aonix
//      Copyright (c) 1997
//      All rights reserved

// To create a new property sheet, copy this file, and do a global
// substitute with UmlStereotype_ps with whatever the name of the 
// property sheet is.  Then,
//    ** put in the double click function for the objects, or a menu to 
//       bring it forward.
//    ** build the .prop file, and include it in <editor>.rules 
//    ** include .ps.qrl file in <editor>.qrl
//     

#include "rules/qrl/ps.inc"

// Initialize new property sheet.  Can be called be double click rule, qrl for 
// menu entry, etc.

void
UmlStereotype_ps_show()

{
    gde_builtin("PropertySheetShow UmlStereotype_ps");

    // reset

    UmlStereotype_ps_init();
}


// double click hook
void
UmlStereotype_ps_double_click(gde_mapsymbol ms)
{
    ps_reset_last_fill();
    UmlStereotype_ps_show();
}



boolean UmlStereotype_ps_initted = False;

void
UmlStereotype_ps_init()

{
    if (UmlStereotype_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlStereotype_ps");
        return;
    }
    UmlStereotype_ps_initted = True;

    // This sets the callback to reset the dialog when one object is choosen
//    gde_builtin("EditorActionDone 0214951138  UmlStereotype_ps_ActionDone();"); // ECR 6880

    // for ps_init():
    // first param is the name of the prop sheet in rules file
    // second parameter is name of first field, which must be readonly place
    // that display's object.
    // Third field: gde_object type: ps_Node, ps_Link, ps_Cntx
    // Fourth field: gde_objects that this guy operates on
    // Fifth field: oms object this maps to: ps_Node, ps_Link, ps_Cntx
    ps_init("UmlStereotype_ps", "ObjectName", ps_Node, string_to_list("Stereotype", " "), ps_Node);

    // for ps_append_field():
    // first param: prop sheet name
    // second param: prop sheet entry name
    // third param: note name
    // fourth param: item name
    // fifth param: field type
    // sixth param: list of choices, in order, if this is a ps_Choice.  First one should always mean unset
    // ECR 3789 begin
    ps_append_field("UmlStereotype_ps", "ObjectDescription",
    "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    // ECR 3789 end
    ps_append_field("UmlStereotype_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlStereotype_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlStereotype_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);
    //ps_append_field("UmlStereotype_ps", "Test1", "UmlExtensibilityDefinition", "StorageClass", ps_Choice, string_to_list("not specified@const@register@register const@static@static const", "@"));
    //ps_append_field("UmlStereotype_ps", "Test2", "UmlExtensibilityDefinition", "IsMessage", ps_TrueFalse, NULL);

    ps_fill("UmlStereotype_ps");
    //ps_dump();

    return;
}


// change focus of property sheet

void
UmlStereotype_ps_ActionDone()

{
    // reset propsheet

    if( ui_owner_visible(to_ui_prop("UmlStereotype_ps","OK")) ) // ECR 4037
        ps_fill("UmlStereotype_ps");
}


// Active Function
// The active function needs to list all the possible values that can be active for the 
// menu entry that brings up the prop sheet. The popup function is defined in uml.inc.

int
UmlStereotypeObjectPropsActive()
{
    list symbols;

    symbols = gde_selected_symbols();
    if (list_count(symbols) != 1)
        return ACTIVE_FUNC_IS_INACTIVE;

    if (list_count(gde_symbols_find_with_types(symbols, string_to_list("Stereotype", " "))) ==
 1)
        return ACTIVE_FUNC_IS_ACTIVE;

    return ACTIVE_FUNC_IS_INACTIVE;
}

