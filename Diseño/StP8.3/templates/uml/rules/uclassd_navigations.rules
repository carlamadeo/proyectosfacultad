
//      StP/UML
//      Confidential property of Aonix
//      Copyright (c) 1997
//      All rights reserved
//


NodeSymbol AllPackageTypes
{
	{ Navigation
		{ Name AllAssociations }
		{ UseMappings ( ClassMapping )}
		{ Label "All Associations View" }
		{ Query "node_ref[viewpoints[UmlAllAssociation && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllDependencies }
		{ UseMappings ( ClassMapping )}
		{ Label "All Dependencies View" }
		{ Query "node_ref[viewpoints[UmlAllDependency && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllMembers }
		{ UseMappings ( ClassMapping )}
		{ Label "All Members View" }
		{ Query "node_ref[viewpoints[UmlAllMembers && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ ParseCondition "is_valid_programming_env();" }
		{ UseMappings ( ClassMapping ) }
		{ Name ProgrammingEnvironment }
		{ Label "Programming Environment" }
		// { TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
		{ FailureCmd UMLGotoProgrammingEnvironment }
	}
	{ Navigation
		{ ParseCondition "!is_valid_programming_env() && !is_sniff_ok();" } // ECR 5277
		{ UseMappings ( ClassMapping ) }
		{ Name ProgrammingEnvironment }
		{ Label "Source Code" }
		{ TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
		// { FailureCmd UMLGotoProgrammingEnvironment }
	}
}

NodeSymbol AllClassTypes
{
	{ Navigation
		{ Name ClassDefinition }
		{ UseMappings ( ClassMapping )}
		{ Label "Class Table" }
		{ Query "node_ref[node_id == ${node.id} && file[UmlClassTable] ]" }
		{ FailureCmd DecomposeUmlClassTable }
    }
	{ Navigation
		{ Name StereotypeDefinition }
		{ UseMappings ( ClassMapping )}
		{ Label "Stereotype Definition" }
		{ TargetFunc "uml_stereotype_nav_targets(\"${annot.UmlExtensibilityDefinition.UmlStereotype}\");" }
		// { FailureCmd ???? }
    }
	{ Navigation
		{ Name AllAggregations }
		{ UseMappings ( ClassMapping )}
		{ Label "All Aggregations View" }
		{ Query "node_ref[viewpoints[UmlAllAggregation && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllGeneralizations }
		{ UseMappings ( ClassMapping )}
		{ Label "All Generalizations View" }
		{ Query "node_ref[viewpoints[UmlAllGeneralization && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllAssociations }
		{ UseMappings ( ClassMapping )}
		{ Label "All Associations View" }
		{ Query "node_ref[viewpoints[UmlAllAssociation && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllDependencies }
		{ UseMappings ( ClassMapping )}
		{ Label "All Dependencies View" }
		{ Query "node_ref[viewpoints[UmlAllDependency && node_id == ${node.id}]]" }
    }
	{ Navigation
		{ Name AllMembers }
		{ UseMappings ( ClassMapping )}
		{ Label "All Members View" }
		{ Query "node_ref[viewpoints[UmlAllMembers && node_id == ${node.id}]]" }
    }
}

NodeSymbol AllClassTypes
{
	{ Navigation 
		{ Name StateDiagram }
		{ Label "State Diagram for Class" }
		{ UseMappings ( ClassMapping )}
		{ TargetFunc "uml_state_or_act_nav_targets(${node.id},\"UmlStateDiagram\");" }
		{ FailureCmd CreateStateDiagramFromClass }
	}
	{ Navigation 
		{ Name ActivityDiagram }
		{ Label "Activity Diagram for Class" }
		{ UseMappings ( ClassMapping )}
		{ TargetFunc "uml_state_or_act_nav_targets(${node.id},\"UmlActivityDiagram\");" }
		{ FailureCmd CreateActivityDiagramFromClass }
	}
	{ Navigation
		{ ParseCondition "is_valid_programming_env();" }
		{ UseMappings ( ClassMapping ) }
		{ Name ProgrammingEnvironment }
		{ Label "Programming Environment" }
		// { TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
		{ FailureCmd UMLGotoProgrammingEnvironment }
	}
	{ Navigation
		{ ParseCondition "!is_valid_programming_env() && !is_sniff_ok();" } // ECR 5277
		{ UseMappings ( ClassMapping ) }
		{ Name ProgrammingEnvironment }
		{ Label "Source Code" }
		{ TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
		// { FailureCmd UMLGotoProgrammingEnvironment }
	}
    // Begin Add ECR 4179
    { Navigation 
        { ParseCondition "is_sniff_ok();" }
        { Name SNiFFProgrammingEnvironmentSourceEditor }
        { Label "SNiFF Source Editor" }
        { UseMappings ( ClassMapping ) }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"edit_symbol\", \"CLASS\");" }
    }
    { Navigation 
        { ParseCondition "is_sniff_ok();" }
        { Name SNiFFProgrammingEnvironmentClassBrowser }
        { Label "SNiFF Class Browser" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"browse_class\", \"\");" }
        { UseMappings ( ClassMapping ) }
    }
    { Navigation 
        { ParseCondition "is_sniff_ok();" }
        { Name SNiFFProgrammingEnvironmentHierarchyBrowserFull }
        { Label "SNiFF Class Hierarchy Browser" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"hierarchy\", \"FULL\");" }
        { UseMappings ( ClassMapping ) }
    }
    { Navigation 
        { ParseCondition "is_sniff_ok();" }
        { Name SNiFFProgrammingEnvironmentHierarchyBrowserRestricted }
        { Label "SNiFF Class Hierarchy Browser (only relatives)" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"hierarchy\", \"RESTRICTED\");" }
        { UseMappings ( ClassMapping ) }
    }
    { Navigation 
        { ParseCondition "is_sniff3_ok();" } // ECR 7361
        { Name SNiFFProgrammingEnvironmentRetriever }
        { Label "SNiFF Retriever" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"retrieve\", \"\");" }
        { UseMappings ( ClassMapping ) }
    }
    // End Add ECR 4179
}

// ECR2653
NodeSymbol Ellipsis
{
	{ Navigation
		{ Name SuppressedClasses }
		{ UseMappings ( ClassMapping )}
		{ Label "Suppressed Classes" }
		{ Query "node_ref[node[type != UmlEllipsis && out_links[UmlGeneralization && to_node_id = ${node.scope_node_id}]] && file_id != ${file.id}]" }
    }
}
// ECR2653

NodeSymbol Operation
{
	{ Navigation 
		{ Name StateDiagram }
		{ Label "State Diagram for Operation" }
		{ UseMappings ( ClassMapping )}
		{ TargetFunc "uml_state_or_act_nav_targets(${node.id},\"UmlStateDiagram\");" }
		{ FailureCmd CreateStateDiagramFromOperation }
	}
	{ Navigation 
		{ Name ActivityDiagram }
		{ Label "Activity Diagram for Operation" }
		{ UseMappings ( ClassMapping )}
		{ TargetFunc "uml_state_or_act_nav_targets(${node.id},\"UmlActivityDiagram\");" }
		{ FailureCmd CreateActivityDiagramFromOperation }
	}
	{ Navigation
        { ParseCondition "!is_sniff_ok();" } // ECR 5277
		{ Name ProgrammingEnvironmentDecl }
		{ Label "Source Code Declaration" }
		{ TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
	}
	{ Navigation
		// fix 0002518
		// { ParseCondition "is_smdb_available();" }
		{ Name ProgrammingEnvironmentDefn }
        { ParseCondition "!is_sniff_ok();" } // ECR 5277
		{ Label "Source Code Definition" }
		// fix 0002518
		// { TargetFunc "BrowseViaSMDB(${node.id}, 1);" }
        //< ECR 81 >
//		{ TargetFunc "if (is_smdb_available()) BrowseViaSMDB(${node.id}, 1); else print_error(\"The semantic model must exist to navigate to source code definition.\");" }
		{ TargetFunc "BrowseViaSMDB(${node.id}, 1);" } // ECR 7656
	}
    // Begin Add ECR 4179
    { Navigation
        { ParseCondition "is_sniff3_ok();" } // ECR 7361
        { Name SNiFFProgrammingEnvironmentSourceEditorDef }
        { Label "SNiFF Operation Definition" }
        { TargetFunc "SNiFFNavToClassPart(${node.id}, \"edit_symbol\", \"METHOD_DEF\");" }
    }
    { Navigation
        { ParseCondition "is_sniff3_ok();" } // ECR 7361
        { Name SNiFFProgrammingEnvironmentSourceEditorImpl }
        { Label "SNiFF Operation Implementation" }
        { TargetFunc "SNiFFNavToClassPart(${node.id}, \"edit_symbol\", \"METHOD_IMPL\");" }
    }
    // ECR 7361
    { Navigation
        { ParseCondition "is_sniff_ok() && !is_sniff3_ok();" }
        { Name SNiFFProgrammingEnvironmentSourceEditorDef }
        { Label "SNiFF Operation" }
        { TargetFunc "SNiFFNavToClassPart(${node.id}, \"edit_symbol\", \"\");" }
    }
    { Navigation 
        { ParseCondition "is_sniff3_ok();" } // ECR 7361
        { Name SNiFFProgrammingEnvironmentRetriever }
        { Label "SNiFF Retriever" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"retrieve\", \"\");" }
    }
    // End Add ECR 4179
}

NodeSymbol Attribute
{
	{ Navigation
        { ParseCondition "!is_sniff_ok();" } // ECR 5277
		{ Name ProgrammingEnvironment }
		{ Label "Source Code" }
		{ TargetFunc "BrowseViaSMDB(${node.id}, 0);" }
	}
    // Begin Add ECR 4179
    { Navigation
        { ParseCondition "is_sniff_ok();" }
        { Name SNiFFProgrammingEnvironmentSourceEditor }
        { Label "SNiFF Attribute Definition" }
        { TargetFunc "SNiFFNavToClassPart(${node.id}, \"edit_symbol\", \"INSTVAR\");" }
    }
    { Navigation 
        { ParseCondition "is_sniff3_ok();" } // ECR 7361
        { Name SNiFFProgrammingEnvironmentRetriever }
        { Label "SNiFF Retriever" }
        { TargetFunc "SNiFFNavToClass(${node.id}, \"retrieve\", \"\");" }
    }
    // End Add ECR 4179
}

TypeSet uclassdClassMappingRequirementNodes
{
	Package
	PackageName
	AllClassTypes
	Operation
	Attribute
}

TypeSet RequirementToNodeNodeSymbols
{
	uclassdClassMappingRequirementNodes
	NaryAssociationHub
	InstantiatedClass
    Object          //ECR 4887
}

// all the link symbols that map only one OMS object (a link)
TypeSet RequirementToLinkLinkSymbols
{
	Generalization
	Implements
	Refines
	NaryAssociationRole
	Dependency
}

// ECR 5184 start
// I will move this to uclassd.rules since it conflicts with same TypeSet in component/deployment diagrams.
// I know this is not a good rules distribution but ... the release is fast approaching ;-((
// TypeSet DOORS
// {
//	Package
//	PackageName
//	AllClassTypes
//	Operation
//	Attribute
//	NaryAssociationHub
//	InstantiatedClass
//	Generalization
//	Implements
//	Refines
//	NaryAssociationRole
//	Dependency
// }
// ECR 5184 end


// JED - include the common requirements table stuff here
// after the typeset declarations
Include "rules/syms_to_rqtbl.rules.common"


NodeSymbol uclassdClassMappingRequirementNodes
{
   { Navigation
     { Name RequirementTableFromNode }
	 { UseMappings ( ClassMapping ) }
   }
}

NodeSymbol NaryAssociationHub
{
   { Navigation
     { Name RequirementTableFromNode }
     { UseMappings ( AssociationNodeMapping ) }
   }
}

// JED - This is empty because there is a bug in GDE that forces us to write
// the following commands as a workaround
TypeSet RequirementToNodeLinkSymbols
{
	None
}

// ECR 5758 start
TypeSet AllClassesWithObjects
{
        Class
        ClassName
        ParameterizedClass
        InstantiatedClass
        Interface
}

NodeSymbol AllClassesWithObjects
{
    // Navigation from any Class Symbol to Object Instance
    { Navigation
        { Name FindRefOfObject }
        { Label "Objects of the Selected Class" }
        { Query "node_ref[node[UmlObjectInstance && scope_node[UmlObjectClassScope && name = '${node.name}']]]"  }
        { UseMappings (ClassMapping) }
        { FailureCmd GenericCmdTargetNotFound }
    }
}

NodeSymbol Object
{
    // Navigation from Object to Class
    { ParseCondition "!is_validator_available(\"standalone\");" }
    { Navigation
        { Name ClassDiagramWithCorrespondingClass }
        { Label "Class Diagram Where Class Is Referenced" }
        { UseMappings (ObjectScope) }
        { Query "node_ref[file[UmlClassDiagram] && node[UmlClass && name = '${node.name}']]"  }
        //{ TargetFunc "FindClassDiagramWithCorrespondingClass(${node.id}); }
        //{ FailureCmd GenericCmdTargetNotFound }
    }
    { Navigation
        { Name ClassTableWithCorrespondingClass }
        { Label "Class Table Where Class Is Referenced" }
        { UseMappings (ObjectScope) }
        { Query "node_ref[file[UmlClassTable] && node[UmlClass && name = '${node.name}']]"  }
        //{ TargetFunc "FindClassDiagramWithCorrespondingClass(${node.id});" }
        //{ FailureCmd GenericCmdTargetNotFound }
    }
    { Navigation
        { Name StateDiagramWithCorrespondingClass }
        { Label "State Diagram Where Class Is Referenced" }
        { UseMappings (ObjectScope) }
        //{ Query "node_ref[file[UmlStateDiagram] && node[UmlClass && name = '${node.name}']]"  }
        { TargetFunc "FindStateDiagramWithCorrespondingClass(0${node.id});" }
        //{ FailureCmd GenericCmdTargetNotFound }
    }
    { Navigation
        { Name ActivityDiagramWithCorrespondingClass }
        { Label "Activity Diagram Where Class Is Referenced" }
        { UseMappings (ObjectScope) }
        //{ Query "node_ref[file[UmlActivityDiagram] && node[UmlClass && name = '${node.name}']]" }
        { TargetFunc "FindActivityDiagramWithCorrespondingClass(0${node.id});" }
    }
}
// ECR 5758 end

// Begin Add ECR3785
// TypeSet for all kind of uml node symbols
TypeSet NavigationNodeTypes
{
    AllClassTypes
    AllPackageTypes
    Interface
    ClassContainsToTypeset
    // ECR 5758 start
    Object
    InstanceAttribute
    // ECR 5758 ends
}

// Included navigation targets for all kind of uml node symbols
Include "uml/rules/uml_navigation.rules"

TypeSet NavigationLinkTypes
{
	Generalization
	Dependency
	Refines
	Implements
}

LinkSymbol NavigationLinkTypes
{
    { Navigation
    	{ Name AnyViewOfSelectedLinkSymbol }
    	{ Label "Any Reference Of The Selected Link" }
    	{ Query "link_ref[link_id = ${link.id} && file[id != ${file.id}]]" }
    }
}

LinkSymbol Association
{
    // We need to specifically use the node mapping here since we don't want
    // the roles to show up ...
    { Navigation
    	{ Label "Any Reference Of The Selected Link" }
        { UseMappings ( AssociationNodeMapping )}
    	{ Name AnyViewOfSelectedAssocSymbol }
    	{ Query "node_ref[node_id = ${node.id} && file[id != ${file.id}]]" }
    }
}
// End Add ECR3785

Command UMLGotoProgrammingEnvironment
{
    { PrintName "Show in Programming Environment" }
    { ObjectRequired True }
    { StartMessage "Show object in Programming Environment..." }
// You can never get the failure message, and the success message appears
// before the navigation message reaches the PE, so how does it know that
// it succeeded?
//    { FailureMessage "Failed to show object in Programming Environment" }
//    { SuccessMessage "Show object in Programming Environment completed" }
   { Builtin "EditorQrlEvalNoSave NavigateToPE(${node.id});" }
}
 

Command AssociationGoToRequirementsTable
{
    // ECR 7464
    // { Builtin "EditorQrlEval to_requirements_table_from_link_for_node(\"UmlAssociation\");" }
    { Builtin "EditorQrlEvalNoSave to_requirements_table_from_link_for_node(\"UmlAssociation\");" }
}

Command GoToDOORSFromAssociation
{
    // ECR 7464
    // { Builtin "EditorQrlEval node_navigate_to_doors_from_link(\"UmlAssociation\");" }
    { Builtin "EditorQrlEvalNoSave node_navigate_to_doors_from_link(\"UmlAssociation\");" }
}


LinkSymbol Association
{
   { Navigation
     { UseMappings ( AssociationNodeMapping )}
     { Name RequirementTable }
     { Label "Allocate Requirements"}
     { FailureCmd AssociationGoToRequirementsTable }
   }
    { Navigation
        // ECR 5118 begin
        { ParseCondition "use_doors_integration();" }
        //{ ParseCondition "is_doors_available();" }
        // ECR 5118 end
        { Name DOORS }
        { Label "DOORS" }
        { UseMappings ( AssociationNodeMapping )}
        { FailureCmd GoToDOORSFromAssociation }
    }

}

Command DecomposeUmlClassTable
{
    { PrintName "Class table doesn't exist. Do you want to create it?" }
    { ObjectRequired True }
    { StartMessage "Executing Create Class Table..." }
    { FailureMessage "Create Class Table failed." }
    { SuccessMessage "Create Class Table completed." }
    // { OS
	// { UseOutputWindow False }
	// { CommandLine "stpem gte -ed uclasst -first -p ${projdir} -s ${system} -C 'EditorQrlEval \"UmlClassTableInitialize(${node.id});\"'" }
    // }
	{ Builtin "EditorQrlEvalNoSave NavigateSendQrl(\"uclasst\",\"UmlClassTableInitialize(${node.id});\");" }
}

Command CreateActivityDiagramFromClass
{
    { PrintName "Create Activity Diagram?" }
    { ObjectRequired True }
    { StartMessage "Executing Create Activity Diagram..." }
    { FailureMessage "Create Activity Diagram failed." }
    { SuccessMessage "Create Activity Diagram completed." }
	{ Builtin "EditorQrlEvalNoSave NavigateSendQrl(\"uactivityd\",\"UmlStateDiagramInitFromClass(${node.id});\");" }
}

Command CreateStateDiagramFromClass
{
    { PrintName "Create State Diagram?" }
    { ObjectRequired True }
    { StartMessage "Executing Create State Diagram..." }
    { FailureMessage "Create State Diagram failed." }
    { SuccessMessage "Create State Diagram completed." }
	{ Builtin "EditorQrlEvalNoSave NavigateSendQrl(\"ustated\",\"UmlStateDiagramInitFromClass(${node.id});\");" }
}

Command CreateActivityDiagramFromOperation
{
    { PrintName "Create Activity Diagram?" }
    { ObjectRequired True }
    { StartMessage "Executing Create Activity Diagram..." }
    { FailureMessage "Create Activity Diagram failed." }
    { SuccessMessage "Create Activity Diagram completed." }
	{ Builtin "EditorQrlEvalNoSave NavigateSendQrl(\"uactivityd\",\"UmlStateDiagramInitFromOperation(${node.id});\");" }
}

Command CreateStateDiagramFromOperation
{
    { PrintName "Create State Diagram?" }
    { ObjectRequired True }
    { StartMessage "Executing Create State Diagram..." }
    { FailureMessage "Create State Diagram failed." }
    { SuccessMessage "Create State Diagram completed." }
	{ Builtin "EditorQrlEvalNoSave NavigateSendQrl(\"ustated\",\"UmlStateDiagramInitFromOperation(${node.id});\");" }
}

