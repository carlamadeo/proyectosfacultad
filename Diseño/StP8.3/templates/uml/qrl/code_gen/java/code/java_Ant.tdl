/************************************************** 
 * java_ant.tdl
 * ------------
 *
 * Prepares build file for the ANT make tool.
 * See http://www.jakarta.apache.org/ant for
 * an overview of this tool.
 * 
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    17.12.2001
 *
 * History:
 * -------------------------------------------------
 * Date        Who      What
 * -------------------------------------------------
 * 2001/12/31  Lippert  Two new tasks: "doc" and 
 *                      "doc-clean"
 *
 * Copyright 2001, Aonix, San Diego
 **************************************************/


// Creates ant file, sets its file name
proc create_antfile()
  local filename = [srcdir] "/" [ANT_FILE_NAME];
  output([filename]);
  out = gen_antfile();
end proc


// The template for the build file. At the moment
// this is completely verbose code.
template gen_antfile()
<project name="MyProject" default="dist" basedir=".">
  <property name="src" value="."/>
  <property name="build" value="build"/>
  <property name="dist" value="dist"/>
  <property name="docs" value="docs"/>
  
  <target name="init">
    <!-- create the time stamp -->
    <tstamp/>
    <!-- create the build directory -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="compile" depends="init">
    <!-- compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}"/>
  </target>
  
  <target name="dist" depends="compile">
    <!-- create the distribution directory -->
    <mkdir dir="${dist}/lib"/>
    <!-- put everything in ${build} into the MyProject-${tstamp}.jar file-->
    <jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}"/>
  </target>
  
  <target name="clean">
    <!-- delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
  
  <target name="doc">
    <!-- create the documentation directory -->
    <mkdir dir="${docs}/api"/>
    <!-- create documentation via the "javadoc" document generator. -->
    <javadoc sourcepath="."
           packagenames="[createPackageNames()]"
           sourcefiles="[createSourceFiles()]"
           defaultexcludes="yes"
           destdir="${docs}/api"
           private="true"
           author="true"
           version="true"
           use="true"
           windowtitle="API documentation">
      <doctitle><!\[CDATA\[<h1>API Documentation</h1>]]></doctitle>
    </javadoc>
  </target>
  
  <target name="doc-clean">
    <!-- delete the ${docs} directory -->
    <delete dir="${docs}/api"/>
  </target>
  
</project>
end template


// Enlists all packages which are leaf packages (have not subpackages itself)
// AND have classes which are not marked as "external".
proc createPackageNames()
  local names = "";
  loop(Instances->MPackage Where ! hasLoop(MPackage->SubPackage) && ! [MPackage:isExternal]; setDelim(""); setDelim(", "))
    if (hasLoop(MPackage->MClass Where ! classIsExternal([MClass]) && [MClass.stereotype] != "DataType"))
      [names] = [names] delim() [MPackage:package_name];
    end if
  end loop
  return [names];
end proc

// Enlists all toplevel classes that are not external
proc createSourceFiles()
  local names = "";
  loop(Instances->MClass Where ! hasLoop(MClass->MPackage) && 
                               ! [MClass:isExternal] && 
                               [MClass.stereotype] != "DataType" && 
                               ! hasLoop(MClass->MTemplateClass) &&
                               ! hasLoop(MClass->MInstantiatedClass); setDelim(""); setDelim(","))
    [names] = [names] delim() [srcdir] "\\" [MClass.name][JAVA_EXTENSION];
  end loop
  if (is_windows_platform())
    [names] = replace([names], "/", "\\");
  else
    [names] = replace([names], "(\\\)", "/");
  end if
  return [names];
end proc

// Determines, whether the computer, which runs ACD is 
// a Windows or a UNIX host.
proc is_windows_platform()
  local os = eval_tcl("return $tcl_platform(os)"); 
  if (searchstr([os], "Windows", "0") != "-1")
    return TRUE;
  else
    return FALSE;
  end if
end proc