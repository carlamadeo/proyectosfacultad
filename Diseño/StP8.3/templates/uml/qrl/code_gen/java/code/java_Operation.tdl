/************************************************** 
 * java_main.tdl
 * ----------------
 *
 * Code for the generation of operations. This in-
 * cludes operation parameters, exception statements
 * return types, and merge sections, specific for
 * operations.
 * 
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    20.10.2001
 *
 * Copyright 2001, Aonix, San Diego
 **************************************************/
 
// Returns the formal parameters of an operation
proc getOpParas(MOperation)
  local ops;
  loop(MOperation->OpPara; setDelim(""); setDelim(", "))
    importType([OpPara.type]);
    [ops] = [ops] delim() [OpPara.type] " " [OpPara.name];
  end loop
  return [ops];
end proc


// Returns the types of the formal parameter of an operation,
// the parameter names are left out here.
proc getOpParasTypes(MOperation)
  local ops;
  loop(MOperation->OpPara; setDelim(""); setDelim(", "))
    importType([OpPara.type]);
    [ops] = [ops] delim() [OpPara.type];
  end loop
  return [ops];
end proc


// Returns the throws statements for an operation, d.e.
// all Exceptions, an operation can throw.
proc getExceptions(MOperation)
  local ret = "";
  if ([MOperation:throws] != "")
    importExceptions([MOperation:throws]);
    [ret] = " throws " [MOperation:throws];
  end if
  return [ret];
end proc


/* Generates a marked section in the output. The content of this section can
   be changed by the user in the generated file. These changes will not be
   overwritten in subsequent cycles of code generation.
   
   The user-defined section is preset with the contents of the note
   "UmlOperationJavaCode", a annotation for method source code.
   In the absence of this annotation, a default return value is generated.
*/
template mergeOutOperation(preamble, MOperation, desc)
  [if (needsDefaultValue([MOperation]))]
[MOperation.returnType] retVal = [genDefaultReturn([MOperation])];
  [end if]
//#ACD# M([preamble][MOperation.guid]) [desc]
//user defined code to be added here ...
  
//#end ACD#
  [if (hasLoop(MOperation->Note Where [Note.type] == "UmlOperationJavaCode" && [Note.description] != ""))]
    [loop(MOperation->Note Where [Note.type] == "UmlOperationJavaCode")]
      [loop(Instances->TokenSet([Note.description]))]
[TokenSet.line]
      [end loop]
    [end loop]
  [else]
    [if ([CREATE_DEF_RETURN] && [MOperation.returnType] != "void")]
return retVal;
    [end if]
  [end if]
end template


/* Generates a marked section in the output. The content of this section can
   be changed by the user in the generated file. These changes will not be
   overwritten in subsequent cycles of code generation.
   
   Outside the marked section, initialization code is written for initializing
   this constructor. This code outside cannot be influenced by the marked
   section, and will be always regenerated. 
*/
template mergeOutConstructor(preamble, MOperation, desc)
//#ACD# M([preamble][MOperation.guid]) [desc]
//user defined code to be added here ...

//#end ACD#
[if (hasLoop(MOperation->Note Where [Note.type] == "UmlOperationJavaCode" && [Note.description] != ""))]
  [loop(MOperation->Note Where [Note.type] == "UmlOperationJavaCode")]
    [loop(Instances->TokenSet([Note.description]))]
[TokenSet.line]
    [end loop]
  [end loop]
[end if]
end template


// Generates a default return statement
// for an operation, depending on its
// return type. Normally the approbiate
// value for "Zero" or "False" is chosen.
proc genDefaultReturn(MOperation)
  local retval = "";
  switch ([MOperation.returnType])
    case "int" :
    case "byte" :
    case "short" :
      [retval] = "0";
     break;
    case "long" :
      [retval] = "0L";
     break;
    case "float" :
      [retval] = "0.0F";
     break;
    case "double" :
      [retval] = "0.0D";
     break;
    case "boolean" :
      [retval] = "false";
     break;
    case "char" :
      [retval] = "'\u0000'";
     break;
    case "String" :
    case "java.lang.String" :
      [retval] = "\"\"";
     break;
    case "Object" :
    case "Collection" :
    case "List" :
    case "HashMap" :
    case "ArrayList" :
      [retval] = "null";
     break;
    default :
      [retval] = "null";
  end switch
  return [retval];
end proc

// Determines, whether or not, the Operation needs a 
// default return value. Besides other factors, this
// depends on the setting of the global TDL variable
// [CREATE_DEF_RETURN]!
proc needsDefaultValue(MOperation)
  local needed = FALSE;
  
  if ([CREATE_DEF_RETURN])
    if ([MOperation.returnType] != "void" && ! hasLoop(MOperation->Note Where [Note.type] == "UmlOperationJavaCode" && [Note.description] != ""))
      [needed] = TRUE;
    end if
  end if
  
  return [needed];
end proc