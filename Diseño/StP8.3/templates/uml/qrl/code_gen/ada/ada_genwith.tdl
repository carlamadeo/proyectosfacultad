//*****************************************************************************
// $RCSfile: ada_genwith.tdl,v $
// $Revision: 1.1 $
// $Date: 2001/06/15 02:10:03 $
// Author: Peter Kleiner
//*****************************************************************************


/*
Support templates and procedures dealing with with list handling and package
renamings. Called by genSpec (defined in ada_genspec.tdl), genBody (defined in ada_genbody.tdl),
and State Machine generation (defined in ada_gensm.tdl.

40. importClass
40.1. importClassOp
41.1. MPackage.include_proc
41.2. MClass.include_proc
41.3. TokenSet.include_proc
42. MClass.rename_proc		
*/


/* 40. import a class: add package of class to "include"; and generate a qualified
   name for the class */
proc importClass(MClass)

   testInfo("Imports", "importClass " [MClass.name] " -> ");

   /* is this the currently generated class (no package import then) ? */

   if([MClass.id] == [currentClass])
      testInfo("Imports", "import currentClass " [currentClass] "\n");
      return [MClass.name];
   end if

   /* is this part of the currently generated group (no package import then) ? */

   if([MClass:group] == [currentGroup])
      testInfo("Imports", "import class " [MClass.name] " from currentGroup " [currentGroup] "\n");
      return [MClass.name];
   end if

   testInfo("Imports", "Add import for class " [MClass.name] " -> " [MClass:referenceName] "\n");

   /* a foreign class; qualify by package name and import the package */

   insert("include",[MClass.id]);
   if([MClass:referenceNickName] != "")
      insert("renames",[MClass.id]);
      return [MClass:referenceNickName];
   else
      return [MClass:referenceName];
   end if
end proc

proc importClassOp(MClass,Op)

   /* is this the currently generated class (no package import then) ? */

   testInfo("Imports", "importClassOp " [MClass.name] "::" [Op] " -> ");

   if([MClass.id] == [currentClass])
      testInfo("Imports", "import currentClass " [currentClass] "\n");
      return [Op];
   end if

   /* is this part of the currently generated group (no package import then) ? */

   if([MClass:group] == [currentGroup])
      testInfo("Imports", "import class " [MClass.name] " from currentGroup " [currentGroup] "\n");
      return [Op];
   end if

   testInfo("Imports", "Add import for class " [MClass.name] " -> " [MClass:cuName] "\n");

   /* a foreign class; qualify by package name and import the package */

   insert("include",[MClass.id]);
   if([MClass:cuNickName] != "")
      insert("renames",[MClass.id]);
      return [MClass:cuNickName] "." [Op];
   else
      return [MClass:cuName] "." [Op];
   end if
end proc

/* 41.1. MPackage.include_proc is called for each insertion of a package id
   at the place marked as insertion point "include" and puts the final with clause */
proc MPackage.include_proc()

	testInfo("Imports", "include package " [MPackage.id]"="[MPackage.name]"\n");

	[packageName] = [MPackage:cuName];
	[lPackageName] = toLower([packageName]);

	if([Imported_[lPackageName]] == getOutput()) 
		return "";
	else	
		[Imported_[lPackageName]] = getOutput();
//select the following line to get only with clauses:
		return "with " [packageName] ";\n";

//select the following lines to get with and use clauses:
//		if([MPackage].isGeneric() )
//			return "with " [packageName] ";\n";
//		else
//			return "with " [packageName] "; use " [packageName] ";\n";
//		end if
	end if
end proc

/* 41.2. MClass.include_proc is called for each insertion of a class id at
   the place marked as insertion point "include" and puts the final with clause */
proc MClass.include_proc()

	testInfo("Imports", "include class " [MClass.id]"="[MClass.name]":"[MClass:cuName]"\n");

	/* is this the currently generated class (no package import then) ? */

	if([MClass.id] == [currentClass])
		return "";
	end if

	/* is this part of the currently generated group (no package import then) ? */

	if([MClass:group] == [currentGroup])
		return "";
	end if

	[packageName] = [MClass:cuName];
	[lPackageName] = toLower([packageName]);

	if([Imported_[lPackageName]] == getOutput()) 
		return "";
	else	
		[Imported_[lPackageName]] = getOutput();
//	
//select the following line to get only with clauses:
		return "with " [packageName] ";\n";

//select the following lines to get with and use clauses:
//		if([MClass].isGeneric() )
//			return "with " [packageName] ";\n";
//		else
//			return "with "[packageName]"; use " [packageName] ";\n";
//		end if
	end if
end proc

/* 41.3. TokenSet.include_proc is called for each insertion of a package name at
   the place marked as insertion point "include" and puts the final with clause */
proc TokenSet.include_proc()

	[packageName] = [TokenSet.line];
	[lPackageName] = toLower([packageName]);

	testInfo("Imports", "include name " [packageName]"\n");

//select the following line to get only with clauses:

	if([Imported_[lPackageName]] == getOutput()) 
		return "";
	else	
		[Imported_[lPackageName]] = getOutput();
		return "with " [packageName] ";\n";

//select the following lines to get with and use clauses:
//		return "with "[packageName]"; use " [packageName] ";\n";
	end if

end proc

/* 42. MClass.rename_proc is <<TBD>> */
proc MClass.rename_proc()

//T	info = "rename class " [MClass.id]"="[MClass.name]":"[MClass:cuName]"\n";

	return "package " [MClass:cuNickName] " renames " [MClass:cuName] ";\n";

end proc