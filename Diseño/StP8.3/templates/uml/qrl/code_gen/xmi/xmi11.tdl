///////////////////////////////////////////////////////////////////////////////
// M A I N
///////////////////////////////////////////////////////////////////////////////
proc main()
    local package_list;

    // there MUST be specified output file name
    if([outfile] == "")
        info = "There is no output file specified!\nAdd \"-var outfile=<filename>\" on the acd command line.\n";
        return;
    end if

    setOutput([outfile]);
    [MODELNAME] = simpleName([outfile]);

    if (toLower([export_extensions]) == "false")
        [export_extensions] = FALSE;
    else
        [export_extensions] = TRUE;
    end if

    if ([selected_packages] != "")
        // generate package list with the topmost packages that include all selected packages
        loop(Instances->MPackage where isSelectedPackage([MPackage])
                    && !isSubPackageOfSelectedPackage([MPackage]))
            [package_list] = [package_list] " " [MPackage.name];
        end loop
        if ([package_list] != "")
            [selected_packages] = [package_list];
        end if
    end if

    // init global variables
    [I_TRUE] = "false";
    [I_FALSE] = "true";

    // info = "Generating xmi...";
    out = genXMI([MODELNAME]);
    // info = "done!\n";
end proc

template genXMI(modelName)
<?xml version="1.0" encoding="[XMI_gen_charset]"?>
<!DOCTYPE XMI SYSTEM "uml11k.dtd" \[
    [/*Rose extensions*/]
    <!ELEMENT ixts (ixttv)+>
    <!ATTLIST ixts s CDATA #REQUIRED>

    <!ELEMENT ixttv EMPTY>
    <!ATTLIST ixttv t CDATA #REQUIRED
                    v CDATA #REQUIRED>
    [/*End of rose extensions*/]
]>
<XMI xmi.version="1.0">
    <XMI.header>
        <XMI.metamodel xmi.name="UML" xmi.version="1.1" />
    </XMI.header>
    <XMI.content>
        <Model_Management.Model xmi.id="i000000000001">
            <Foundation.Core.ModelElement.name>[xmlFixup([modelName])]</Foundation.Core.ModelElement.name>
            <Foundation.Core.ModelElement.visibility xmi.value="public" />
            <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
            <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
            <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
            [/*tags needed by the export to eom*/]
            <Foundation.Core.ModelElement.taggedValue>
                <Foundation.Extension_Mechanisms.TaggedValue>
                    <Foundation.Extension_Mechanisms.TaggedValue.tag>is_unit</Foundation.Extension_Mechanisms.TaggedValue.tag>
                    <Foundation.Extension_Mechanisms.TaggedValue.value>true</Foundation.Extension_Mechanisms.TaggedValue.value>
                </Foundation.Extension_Mechanisms.TaggedValue>
                <Foundation.Extension_Mechanisms.TaggedValue>
                    <Foundation.Extension_Mechanisms.TaggedValue.tag>xmiFile</Foundation.Extension_Mechanisms.TaggedValue.tag>
                    <Foundation.Extension_Mechanisms.TaggedValue.value>[xmlFixup([baseName([outfile])])]</Foundation.Extension_Mechanisms.TaggedValue.value>
                </Foundation.Extension_Mechanisms.TaggedValue>
            </Foundation.Core.ModelElement.taggedValue>
            [/*end*/]
            <Foundation.Core.Namespace.ownedElement>
                [loop(Instances->MPackage where isSelectedPackage([MPackage]))]
                [genPackageXMI([MPackage])]
                [end loop]
            </Foundation.Core.Namespace.ownedElement>
            <Foundation.Core.Namespace.ownedElement>
                [if ([selected_packages] == "")]
                [loop(Instances->MClass Where !hasLoop(MClass->MPackage))]
                [genClassXMI([MClass])]
                [end loop]
                [end if]
            </Foundation.Core.Namespace.ownedElement>
            [genAssociationsXMI()]
        </Model_Management.Model>
    </XMI.content>
</XMI>
end template

template genPackageXMI(MPackage)
[/* ECR 6927 begin */]
[/*package inheritances*/]
[loop(MPackage->ParentPackage->MPackageInheritance)]
[if (isExportedPackage([ParentPackage]))]
<Foundation.Core.Generalization xmi.id="[[MPackageInheritance].getXmiId()]">
    <Foundation.Core.ModelElement.name />
    <Foundation.Core.ModelElement.visibility xmi.value="public" />
    <Foundation.Core.Generalization.discriminator>[xmlFixup([MPackageInheritance.name])]</Foundation.Core.Generalization.discriminator>
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MPackageInheritance.stereotype])]
    [end if]
    [genConstraintsXMI([MPackageInheritance])]
    [if ([MPackageInheritance.stereotype] != "")]
    [genStereotypeXMI([MPackageInheritance.stereotype])]
    [end if]
    [genNamespaceXMI([MPackage])]
    <Foundation.Core.Generalization.subtype>
        <[[MPackage].getXmiTag()] xmi.idref="[[MPackage].getXmiId()]" />
    </Foundation.Core.Generalization.subtype>
    <Foundation.Core.Generalization.supertype>
        <[[ParentPackage].getXmiTag()] xmi.idref="[[ParentPackage].getXmiId()]" />
    </Foundation.Core.Generalization.supertype>
    [genDescriptionXMI([MPackageInheritance.description])]
    [genTaggedValuesXMI([MPackageInheritance])]
</Foundation.Core.Generalization>
[end if]
[end loop]
[/* ECR 6927 end */]
<Model_Management.Package xmi.id="[[MPackage].getXmiId()]">
    <Foundation.Core.ModelElement.name>[xmlFixup([MPackage.name])]</Foundation.Core.ModelElement.name>
    <Foundation.Core.ModelElement.visibility xmi.value = "public" />
    <Foundation.Core.GeneralizableElement.isRoot xmi.value = "[["I_" hasLoop(MPackage->Domain)]]" />
    <Foundation.Core.GeneralizableElement.isLeaf xmi.value = "[["I_" hasLoop(MPackage->SubPackage)]]" />
    <Foundation.Core.GeneralizableElement.isAbstract xmi.value = "false" />
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MPackage.stereotype])]
    [end if]
    [genConstraintsXMI([MPackage])]
    [genDependencyRefsXMI([MPackage])]
    [if ([MPackage.stereotype] != "")]
    [genStereotypeXMI([MPackage.stereotype])]
    [end if]
    [genNamespaceXMI([MPackage])]
    [/* ECR 6927 begin */]
    [/*generalization references*/]
    [loop(MPackage->ParentPackage->MPackageInheritance)]
    [if (isExportedPackage([ParentPackage]))]
    <Foundation.Core.GeneralizableElement.generalization>
        <Foundation.Core.Generalization xmi.idref="[[MPackageInheritance].getXmiId()]" />
    </Foundation.Core.GeneralizableElement.generalization>
    [end if]
    [end loop]
    [loop(MPackage->ChildPackage->MPackageInheritance)]
    [if (isExportedPackage([ChildPackage]))]
    <Foundation.Core.GeneralizableElement.specialization>
        <Foundation.Core.Generalization xmi.idref="[[MPackageInheritance].getXmiId()]" />
    </Foundation.Core.GeneralizableElement.specialization>
    [end if]
    [end loop]
    [/* ECR 6927 end */]
    [genDescriptionXMI([MPackage.description])]
    [genTaggedValuesXMI([MPackage])]
    [/*subpackages*/]
    <Foundation.Core.Namespace.ownedElement>
        [loop(MPackage->SubPackage)]
        [genPackageXMI([SubPackage])]
        [end loop]
    </Foundation.Core.Namespace.ownedElement>
    [/*package classes*/]
    <Foundation.Core.Namespace.ownedElement>
        [loop(MPackage->MClass)]
        [genClassXMI([MClass])]
        [end loop]
    </Foundation.Core.Namespace.ownedElement>
</Model_Management.Package>
[genDependenciesXMI([MPackage])] \
end template

template genAssociationsXMI()
<Foundation.Core.Namespace.ownedElement>
    [loop(Instances->MAssociation Where !hasLoop(MAssociation->AssociationClass) && isExportedAssociation([MAssociation]))]
    <Foundation.Core.Association xmi.id="[[MAssociation].getXmiId()]">
        <Foundation.Core.ModelElement.name>[xmlFixup([MAssociation.name])]</Foundation.Core.ModelElement.name>
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
        [if ([export_extensions])]
        [genRoseExtStereotypeXMI([MAssociation.stereotype])]
        [loop(MAssociation->AssociationClass)]
        [genRoseExtAssocClassXMI([AssociationClass])]
        [end loop]
        [end if]
        [genConstraintsXMI([MAssociation])]
        [if ([MAssociation.stereotype] != "")]
        [genStereotypeXMI([MAssociation.stereotype])]
        [end if]
        <Foundation.Core.ModelElement.namespace>
            <Model_Management.Model xmi.idref="i000000000001" />
        </Foundation.Core.ModelElement.namespace>
        [genDescriptionXMI([MAssociation.description])]
        [genTaggedValuesXMI([MAssociation])]
        [genAssociationEndsXMI([MAssociation])]
    </Foundation.Core.Association>
    [end loop]
</Foundation.Core.Namespace.ownedElement>\
end template

template genClassXMI(MClass)
<[[MClass].getXmiTag()] xmi.id="[[MClass].getXmiId()]">
    <Foundation.Core.ModelElement.name>[xmlFixup([MClass.name])]</Foundation.Core.ModelElement.name>
    <Foundation.Core.ModelElement.visibility xmi.value="[xmlFixup(getClassVisibility([MClass]))]" />
    <Foundation.Core.GeneralizableElement.isRoot xmi.value="[["I_" hasLoop(MClass->SuperClass)]]" />
    <Foundation.Core.GeneralizableElement.isLeaf xmi.value="[["I_" hasLoop(MClass->SubClass)]]" />
    <Foundation.Core.GeneralizableElement.isAbstract xmi.value="[toLower(boolValue([MClass.isAbstract]))]" />
    [if (!hasLoop(MClass->MInterface))]
    <Foundation.Core.Class.isActive xmi.value="false" />
    [end if]
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MClass.stereotype])]
    [genClassExtensionsXMI([MClass])]
    [end if]
    [genConstraintsXMI([MClass])]
    [genDependencyRefsXMI([MClass])]
    [if ([MClass.stereotype] != "")]
    [genStereotypeXMI([MClass.stereotype])]
    [end if]
    [loop(MClass->MInstantiatedClass->MTemplateClass)]
    <Foundation.Core.ModelElement.template>
        <Foundation.Core.Class xmi.idref="[[MTemplateClass].getXmiId()]" />
    </Foundation.Core.ModelElement.template>
    [end loop]
    [if (hasLoop(MClass->MTemplateClass->TemplatePara))]
    <Foundation.Core.ModelElement.templateParameter>
        [loop(MClass->MTemplateClass->TemplatePara)]
        <Foundation.Core.Parameter xmi.id="[[TemplatePara].getXmiId()]">
            <Foundation.Core.ModelElement.name>[xmlFixup([TemplatePara.name])]</Foundation.Core.ModelElement.name>
            <Foundation.Core.ModelElement.visibility xmi.value="public" />
            <Foundation.Core.Parameter.defaultValue>
                <Foundation.Data_Types.Expression>
                    <Foundation.Data_Types.Expression.language />
                    <Foundation.Data_Types.Expression.body>[xmlFixup([TemplatePara.defaultValue])]</Foundation.Data_Types.Expression.body>
                </Foundation.Data_Types.Expression>
            </Foundation.Core.Parameter.defaultValue>
            <Foundation.Core.Parameter.kind xmi.value="in" />
            <Foundation.Core.Parameter.type>
                [if ([TemplatePara.type] != "")]
                <Foundation.Data_Types.Primitive>
                    <Foundation.Core.ModelElement.name>[xmlFixup([TemplatePara.type])]</Foundation.Core.ModelElement.name>
                    <Foundation.Core.ModelElement.visibility xmi.value="public" />
                    <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                    <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                    <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                </Foundation.Data_Types.Primitive>
                [else]
                <Foundation.Core.Classifier />
                [end if]
            </Foundation.Core.Parameter.type>
        </Foundation.Core.Parameter>
        [end loop]
    </Foundation.Core.ModelElement.templateParameter>
    [end if]
    [genNamespaceXMI([MClass])]
    [/*generalization references*/]
    [loop(MClass->SuperClass->MInheritance)]
    [if (isExportedClass([SuperClass]))]
    <Foundation.Core.GeneralizableElement.generalization>
        <Foundation.Core.Generalization xmi.idref="[[MInheritance].getXmiId()]" />
    </Foundation.Core.GeneralizableElement.generalization>
    [end if]
    [end loop]
    [loop(MClass->SubClass->MInheritance)]
    [if (isExportedClass([SubClass]))]
    <Foundation.Core.GeneralizableElement.specialization>
        <Foundation.Core.Generalization xmi.idref="[[MInheritance].getXmiId()]" />
    </Foundation.Core.GeneralizableElement.specialization>
    [end if]
    [end loop]
    [/*implements interface references*/]    
    [loop(MClass->Implement)]
    <Foundation.Core.Classifier.specification>
        <Foundation.Core.Interface xmi.idref="[[Implement].getXmiId()]" />
    </Foundation.Core.Classifier.specification>
    [end loop]
    [/*association role references*/]
    [loop(MClass->Role->MAssociation Where isExportedAssociation([MAssociation]))]
    <Foundation.Core.Classifier.associationEnd>
        <Foundation.Core.AssociationEnd xmi.idref="[[Role].getXmiId()]" />
    </Foundation.Core.Classifier.associationEnd>
    [end loop]
    [/*implements class references*/]
    [loop(MClass->MInterface->Implementation)]
    <Foundation.Core.Classifier.realization>
        <[[Implementation].getXmiTag()] xmi.idref="[[Implementation].getXmiId()]" />
    </Foundation.Core.Classifier.realization>
    [end loop]
    [genDescriptionXMI([MClass.description])]
    [genTaggedValuesXMI([MClass])]
    [if (hasLoop(MClass->MAttribute->Supplier) || hasLoop(MClass->MOperation->Supplier))]
    <Foundation.Core.Namespace.ownedElement>
        [loop(MClass->MAttribute)]
        [genDependenciesXMI([MAttribute])]
        [end loop]
        [loop(MClass->MOperation)]
        [genDependenciesXMI([MOperation])]
        [end loop]
    </Foundation.Core.Namespace.ownedElement>
    [end if]
    [genClassAttributesXMI([MClass])]
    [genClassOperationsXMI([MClass])]
    [loop(MClass->MAssociation Where isExportedAssociation([MAssociation]))]
    [genAssociationEndsXMI([MAssociation])]
    [end loop]
</[[MClass].getXmiTag()]>
[genDependenciesXMI([MClass])]
[/*class inheritances*/]
[loop(MClass->SuperClass->MInheritance)]
[if (isExportedClass([SuperClass]))]
<Foundation.Core.Generalization xmi.id="[[MInheritance].getXmiId()]">
    <Foundation.Core.ModelElement.name />
    <Foundation.Core.ModelElement.visibility xmi.value="public" />
    <Foundation.Core.Generalization.discriminator>[xmlFixup([MInheritance.name])]</Foundation.Core.Generalization.discriminator>
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MInheritance.stereotype])]
    [end if]
    [genConstraintsXMI([MInheritance])]
    [if ([MInheritance.stereotype] != "")]
    [genStereotypeXMI([MInheritance.stereotype])]
    [end if]
    [genNamespaceXMI([MClass])]
    <Foundation.Core.Generalization.subtype>
        <[[MClass].getXmiTag()] xmi.idref="[[MClass].getXmiId()]" />
    </Foundation.Core.Generalization.subtype>
    <Foundation.Core.Generalization.supertype>
        <[[SuperClass].getXmiTag()] xmi.idref="[[SuperClass].getXmiId()]" />
    </Foundation.Core.Generalization.supertype>
    [genDescriptionXMI([MInheritance.description])]
    [genTaggedValuesXMI([MInheritance])]
</Foundation.Core.Generalization>
[end if]
[end loop]\
end template

template genClassAttributesXMI(MClass)
<Foundation.Core.Classifier.feature>
    [loop(MClass->MAttribute)]
    [genAttributeXMI([MAttribute], [MClass])]
    [end loop]
</Foundation.Core.Classifier.feature>\
end template

template genAttributeXMI(MAttribute, MSemElement As Parent)
<Foundation.Core.Attribute xmi.id="[[MAttribute].getXmiId()]">
    [if ([MAttribute.derived])]
    <Foundation.Core.ModelElement.name>/[xmlFixup([MAttribute.name])]</Foundation.Core.ModelElement.name>
    [else]
    <Foundation.Core.ModelElement.name>[xmlFixup([MAttribute.name])]</Foundation.Core.ModelElement.name>
    [end if]
    [if (processVisibility([MAttribute.access]) != "")]
    <Foundation.Core.ModelElement.visibility xmi.value="[xmlFixup(processVisibility([MAttribute.access]))]" />
    [else]
    <Foundation.Core.ModelElement.visibility xmi.value="private" />
    [end if]
    [if(toLower([MAttribute.binding]) == "static")]
    <Foundation.Core.Feature.ownerScope xmi.value="classifier" />
    [else]
    <Foundation.Core.Feature.ownerScope xmi.value="instance" />
    [end if]
    <Foundation.Core.StructuralFeature.multiplicity>[multiplicityFixup([MAttribute.multiplicity])]</Foundation.Core.StructuralFeature.multiplicity>
    <Foundation.Core.StructuralFeature.changeable xmi.value="none" />
    <Foundation.Core.StructuralFeature.targetScope xmi.value="instance" />
    <Foundation.Core.Attribute.initialValue>
        <Foundation.Data_Types.Expression>
            <Foundation.Data_Types.Expression.language />
            <Foundation.Data_Types.Expression.body>[xmlFixup([MAttribute.defaultValue])]</Foundation.Data_Types.Expression.body>
        </Foundation.Data_Types.Expression>
    </Foundation.Core.Attribute.initialValue>
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MAttribute.stereotype])]
    [genAttributeExtensionsXMI([MAttribute])]
    [end if]
    [genConstraintsXMI([MAttribute])]
    [genDependencyRefsXMI([MAttribute])]
    [if ([MAttribute.stereotype] != "")]
    [genStereotypeXMI([MAttribute.stereotype])]
    [end if]
    [if(hasLoop(MAttribute->MClass where [MClass.id] == [Parent.id]))]
    <Foundation.Core.Feature.owner>
        <[[Parent].getXmiTag()] xmi.idref="[[Parent].getXmiId()]" />
    </Foundation.Core.Feature.owner>
    [end if]
    <Foundation.Core.StructuralFeature.type>
        <Foundation.Data_Types.Primitive>
            <Foundation.Core.ModelElement.name>[xmlFixup([MAttribute.type])]</Foundation.Core.ModelElement.name>
            <Foundation.Core.ModelElement.visibility xmi.value="public" />
            <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
            <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
            <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
        </Foundation.Data_Types.Primitive>
    </Foundation.Core.StructuralFeature.type>
    [if(hasLoop(MAttribute->MAssociationEnd where [MAssociationEnd.id] == [Parent.id]))]
    <Foundation.Core.Attribute.associationEnd>
        <Foundation.Core.AssociationEnd xmi.idref="[[Parent].getXmiId()]" />
    </Foundation.Core.Attribute.associationEnd>
    [end if]
    [genDescriptionXMI([MAttribute.description])]
    [genTaggedValuesXMI([MAttribute])]
</Foundation.Core.Attribute>\
end template

template genClassOperationsXMI(MClass)
<Foundation.Core.Classifier.feature>
    [loop(MClass->MOperation)]
    <Foundation.Core.Method xmi.id="M_[[MOperation].getXmiId()]">
        <Foundation.Core.ModelElement.name>[xmlFixup([MOperation.name])]</Foundation.Core.ModelElement.name>
        [if (processVisibility([MOperation.access]) != "")]
        <Foundation.Core.ModelElement.visibility xmi.value="[xmlFixup(processVisibility([MOperation.access]))]" />
        [else]
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        [end if]
        [if(toLower([MOperation.binding]) == "static")]
        <Foundation.Core.Feature.ownerScope xmi.value="classifier" />
        [else]
        <Foundation.Core.Feature.ownerScope xmi.value="instance" />
        [end if]
        <Foundation.Core.BehavioralFeature.isQuery xmi.value="false" />
        <Foundation.Core.Method.body>
            <Foundation.Data_Types.ProcedureExpression>
                <Foundation.Data_Types.Expression.language>[xmlFixup(getOperationLanguage([MOperation]))]</Foundation.Data_Types.Expression.language>
                <Foundation.Data_Types.Expression.body>[xmlFixup(getOperationBody([MOperation]))]</Foundation.Data_Types.Expression.body>
            </Foundation.Data_Types.ProcedureExpression>
        </Foundation.Core.Method.body>
        [if ([export_extensions])]
        [genRoseExtStereotypeXMI([MOperation.stereotype])]
        [genOperationExtensionsXMI([MOperation])]
        [end if]
        [genConstraintsXMI([MOperation])]
        [if ([MOperation.stereotype] != "")]
        [genStereotypeXMI([MOperation.stereotype])]
        [end if]
        <Foundation.Core.Feature.owner>
            <[[MClass].getXmiTag()] xmi.idref="[[MClass].getXmiId()]" />
        </Foundation.Core.Feature.owner>
        <Foundation.Core.Method.specification>
            <Foundation.Core.Operation xmi.idref="[[MOperation].getXmiId()]" />
        </Foundation.Core.Method.specification>
        [if (getExceptions([MOperation]) != "")]
        <Foundation.Core.ModelElement.taggedValue>
            <Foundation.Extension_Mechanisms.TaggedValue>
                <Foundation.Extension_Mechanisms.TaggedValue.tag>exceptions</Foundation.Extension_Mechanisms.TaggedValue.tag>
                <Foundation.Extension_Mechanisms.TaggedValue.value>[xmlFixup(getExceptions([MOperation]))]</Foundation.Extension_Mechanisms.TaggedValue.value>
            </Foundation.Extension_Mechanisms.TaggedValue>
        </Foundation.Core.ModelElement.taggedValue>
        [end if]
        [genDescriptionXMI([MOperation.description])]
        [genTaggedValuesXMI([MOperation])]
        <Foundation.Core.BehavioralFeature.parameter>
            [/*return type is represented as a parameter*/]
            <Foundation.Core.Parameter xmi.id="M_RV_[[MOperation].getXmiId()]">
                <Foundation.Core.ModelElement.name>ReturnValue</Foundation.Core.ModelElement.name>
                <Foundation.Core.ModelElement.visibility xmi.value="public" />
                <Foundation.Core.Parameter.defaultValue>
                    <Foundation.Data_Types.Expression />
                </Foundation.Core.Parameter.defaultValue>
                <Foundation.Core.Parameter.kind xmi.value="return" />
                <Foundation.Core.Parameter.type>
                    <Foundation.Data_Types.Primitive>
                        <Foundation.Core.ModelElement.name>[xmlFixup([MOperation.returnType])]</Foundation.Core.ModelElement.name>
                        <Foundation.Core.ModelElement.visibility xmi.value="public" />
                        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                    </Foundation.Data_Types.Primitive>
                </Foundation.Core.Parameter.type>
                <Foundation.Core.Parameter.behavioralFeature>
                    <Foundation.Core.Method xmi.idref="M_[[MOperation].getXmiId()]" />
                </Foundation.Core.Parameter.behavioralFeature>
            </Foundation.Core.Parameter>
            [/*now dump real parameters*/]
            [loop(MOperation->OpPara)]
            <Foundation.Core.Parameter xmi.id="M_[[OpPara].getXmiId()]">
                <Foundation.Core.ModelElement.name>[xmlFixup([OpPara.name])]</Foundation.Core.ModelElement.name>
                <Foundation.Core.ModelElement.visibility xmi.value="public" />
                <Foundation.Core.Parameter.defaultValue>
                    <Foundation.Data_Types.Expression>
                        <Foundation.Data_Types.Expression.language />
                        <Foundation.Data_Types.Expression.body>[xmlFixup([OpPara.defaultValue])]</Foundation.Data_Types.Expression.body>
                    </Foundation.Data_Types.Expression>
                </Foundation.Core.Parameter.defaultValue>
                [if ([OpPara.mechanism] != "")]
                <Foundation.Core.Parameter.kind xmi.value="[toLower(xmlFixup([OpPara.mechanism]))]" />
                [else]
                <Foundation.Core.Parameter.kind xmi.value="in" />
                [end if]
                [if ([export_extensions])]
                [genRoseExtStereotypeXMI([OpPara.stereotype])]
                [end if]
                [if ([OpPara.stereotype] != "")]
                [genStereotypeXMI([OpPara.stereotype])]
                [end if]
                <Foundation.Core.Parameter.type>
                    <Foundation.Data_Types.Primitive>
                        <Foundation.Core.ModelElement.name>[xmlFixup([OpPara.type])]</Foundation.Core.ModelElement.name>
                        <Foundation.Core.ModelElement.visibility xmi.value="public" />
                        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                    </Foundation.Data_Types.Primitive>
                </Foundation.Core.Parameter.type>
                <Foundation.Core.Parameter.behavioralFeature>
                    <Foundation.Core.Method xmi.idref="M_[[MOperation].getXmiId()]" />
                </Foundation.Core.Parameter.behavioralFeature>
            </Foundation.Core.Parameter>
            [end loop]
        </Foundation.Core.BehavioralFeature.parameter>
    </Foundation.Core.Method>
    <Foundation.Core.Operation xmi.id="[[MOperation].getXmiId()]">
        <Foundation.Core.ModelElement.name>[xmlFixup([MOperation.name])]</Foundation.Core.ModelElement.name>
        [if (processVisibility([MOperation.access]) != "")]
        <Foundation.Core.ModelElement.visibility xmi.value="[xmlFixup(processVisibility([MOperation.access]))]" />
        [else]
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        [end if]
        [if(toLower([MOperation.binding]) == "static")]
        <Foundation.Core.Feature.ownerScope xmi.value="classifier" />
        [else]
        <Foundation.Core.Feature.ownerScope xmi.value="instance" />
        [end if]
        <Foundation.Core.BehavioralFeature.isQuery xmi.value="false" />
        <Foundation.Core.Operation.specification />
        [if(toLower([MOperation.binding]) == "virtual")]
        <Foundation.Core.Operation.isPolymorphic xmi.value="true" />
        [else]
        <Foundation.Core.Operation.isPolymorphic xmi.value="false" />
        [end if]
        <Foundation.Core.Operation.concurrency xmi.value="sequential" />
        [if ([export_extensions])]
        [genRoseExtStereotypeXMI([MOperation.stereotype])]
        [genOperationExtensionsXMI([MOperation])]
        [end if]
        [genConstraintsXMI([MOperation])]
        [genDependencyRefsXMI([MOperation])]
        [if ([MOperation.stereotype] != "")]
        [genStereotypeXMI([MOperation.stereotype])]
        [end if]
        <Foundation.Core.Feature.owner>
            <[[MClass].getXmiTag()] xmi.idref="[[MClass].getXmiId()]" />
        </Foundation.Core.Feature.owner>
        <Foundation.Core.Operation.method>
            <Foundation.Core.Method xmi.idref="M_[[MOperation].getXmiId()]" />
        </Foundation.Core.Operation.method>
        [if (getExceptions([MOperation]) != "")]
        <Foundation.Core.ModelElement.taggedValue>
            <Foundation.Extension_Mechanisms.TaggedValue>
                <Foundation.Extension_Mechanisms.TaggedValue.tag>exceptions</Foundation.Extension_Mechanisms.TaggedValue.tag>
                <Foundation.Extension_Mechanisms.TaggedValue.value>[xmlFixup(getExceptions([MOperation]))]</Foundation.Extension_Mechanisms.TaggedValue.value>
            </Foundation.Extension_Mechanisms.TaggedValue>
        </Foundation.Core.ModelElement.taggedValue>
        [end if]
        [genDescriptionXMI([MOperation.description])]
        [genTaggedValuesXMI([MOperation])]
        <Foundation.Core.BehavioralFeature.parameter>
            [/*return type is represented as a parameter*/]
            <Foundation.Core.Parameter xmi.id="RV_[[MOperation].getXmiId()]">
                <Foundation.Core.ModelElement.name>ReturnValue</Foundation.Core.ModelElement.name>
                <Foundation.Core.ModelElement.visibility xmi.value="public" />
                <Foundation.Core.Parameter.defaultValue>
                    <Foundation.Data_Types.Expression />
                </Foundation.Core.Parameter.defaultValue>
                <Foundation.Core.Parameter.kind xmi.value="return" />
                <Foundation.Core.Parameter.type>
                    <Foundation.Data_Types.Primitive>
                        <Foundation.Core.ModelElement.name>[xmlFixup([MOperation.returnType])]</Foundation.Core.ModelElement.name>
                        <Foundation.Core.ModelElement.visibility xmi.value="public" />
                        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                    </Foundation.Data_Types.Primitive>
                </Foundation.Core.Parameter.type>
                <Foundation.Core.Parameter.behavioralFeature>
                    <Foundation.Core.Operation xmi.idref="[[MOperation].getXmiId()]" />
                </Foundation.Core.Parameter.behavioralFeature>
            </Foundation.Core.Parameter>
            [/*now dump real parameters*/]
            [loop(MOperation->OpPara)]
            <Foundation.Core.Parameter xmi.id="[[OpPara].getXmiId()]">
                <Foundation.Core.ModelElement.name>[xmlFixup([OpPara.name])]</Foundation.Core.ModelElement.name>
                <Foundation.Core.ModelElement.visibility xmi.value="public" />
                <Foundation.Core.Parameter.defaultValue>
                    <Foundation.Data_Types.Expression>
                        <Foundation.Data_Types.Expression.language />
                        <Foundation.Data_Types.Expression.body>[xmlFixup([OpPara.defaultValue])]</Foundation.Data_Types.Expression.body>
                    </Foundation.Data_Types.Expression>
                </Foundation.Core.Parameter.defaultValue>
                [if ([OpPara.mechanism] != "")]
                <Foundation.Core.Parameter.kind xmi.value="[toLower(xmlFixup([OpPara.mechanism]))]" />
                [else]
                <Foundation.Core.Parameter.kind xmi.value="in" />
                [end if]
                [if ([export_extensions])]
                [genRoseExtStereotypeXMI([OpPara.stereotype])]
                [end if]
                [if ([OpPara.stereotype] != "")]
                [genStereotypeXMI([OpPara.stereotype])]
                [end if]
                <Foundation.Core.Parameter.type>
                    <Foundation.Data_Types.Primitive>
                        <Foundation.Core.ModelElement.name>[xmlFixup([OpPara.type])]</Foundation.Core.ModelElement.name>
                        <Foundation.Core.ModelElement.visibility xmi.value="public" />
                        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                    </Foundation.Data_Types.Primitive>
                </Foundation.Core.Parameter.type>
                <Foundation.Core.Parameter.behavioralFeature>
                    <Foundation.Core.Operation xmi.idref="[[MOperation].getXmiId()]" />
                </Foundation.Core.Parameter.behavioralFeature>
            </Foundation.Core.Parameter>
            [end loop]
        </Foundation.Core.BehavioralFeature.parameter>
    </Foundation.Core.Operation>
    [end loop]
</Foundation.Core.Classifier.feature>\
end template

template genDependenciesXMI(MDependentElement)
[loop(MDependentElement->Supplier->MDependency)]
[if (isExportedDependentElement([Supplier]))]
[genDependencyXMI([MDependency])]
[end if]
[end loop]
[loop(MDependentElement->MClass->MInstantiatedClass->MTemplateClass->MTemplateBinding)]
[if (isExportedDependentElement([MTemplateClass]))]
[genBindingXMI([MTemplateBinding])]
[end if]
[end loop]\
end template

template genDependencyXMI(MDependency)
<Foundation.Core.Dependency xmi.id="[[MDependency].getXmiId()]">
    <Foundation.Core.ModelElement.name>[xmlFixup([MDependency.name])]</Foundation.Core.ModelElement.name>
    <Foundation.Core.ModelElement.visibility xmi.value="public" />
    <Foundation.Core.Dependency.description>[xmlFixup([MDependency.description])]</Foundation.Core.Dependency.description>
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MDependency.stereotype])]
    [end if]
    [genConstraintsXMI([MDependency])]
    [if ([MDependency.stereotype] != "")]
    [genStereotypeXMI([MDependency.stereotype])]
    [end if]
    [loop(MDependency->Client)]
    [genNamespaceXMI([Client])]
    <Foundation.Core.Dependency.client>
        <[[Client].getXmiTag()] xmi.idref="[[Client].getXmiId()]" />
    </Foundation.Core.Dependency.client>
    [end loop]
    <Foundation.Core.Dependency.supplier>
        [loop(MDependency->Supplier)]
        <[[Supplier].getXmiTag()] xmi.idref="[[Supplier].getXmiId()]" />
        [end loop]
    </Foundation.Core.Dependency.supplier>
    [genDescriptionXMI([MDependency.description])]
    [genTaggedValuesXMI([MDependency])]
</Foundation.Core.Dependency>\
end template

template genBindingXMI(MTemplateBinding)
<Foundation.Auxiliary_Elements.Binding xmi.id="[[MTemplateBinding].getXmiId()]">
    <Foundation.Core.ModelElement.name>[xmlFixup([MTemplateBinding.name])]</Foundation.Core.ModelElement.name>
    <Foundation.Core.ModelElement.visibility xmi.value="public" />
    <Foundation.Core.Dependency.description />
    [if ([export_extensions])]
    [genRoseExtStereotypeXMI([MTemplateBinding.stereotype])]
    [end if]
    [genConstraintsXMI([MTemplateBinding])]
    [if ([MTemplateBinding.stereotype] != "")]
    [genStereotypeXMI([MTemplateBinding.stereotype])]
    [end if]
    [loop(MTemplateBinding->MInstantiatedClass)]
    [genNamespaceXMI([MInstantiatedClass])]
    <Foundation.Core.Dependency.client>
        <Foundation.Core.Class xmi.idref="[[MInstantiatedClass].getXmiId()]" />
    </Foundation.Core.Dependency.client>
    [end loop]
    <Foundation.Core.Dependency.supplier>
        [loop(MTemplateBinding->MTemplateClass)]
        <Foundation.Core.Class xmi.idref="[[MTemplateClass].getXmiId()]" />
        [end loop]
    </Foundation.Core.Dependency.supplier>
    [genTaggedValuesXMI([MTemplateBinding])]
    <Foundation.Auxiliary_Elements.Binding.argument>
        [loop(MTemplateBinding->MInstantiatedClass->InstPara)]
        <Foundation.Core.Parameter xmi.id="[[InstPara].getXmiId()]">
            <Foundation.Core.ModelElement.name>[xmlFixup([InstPara.name])]</Foundation.Core.ModelElement.name>
            <Foundation.Core.ModelElement.visibility xmi.value="public" />
            <Foundation.Core.Parameter.defaultValue>
                <Foundation.Data_Types.Expression>
                    <Foundation.Data_Types.Expression.language />
                    <Foundation.Data_Types.Expression.body>[xmlFixup([InstPara.defaultValue])]</Foundation.Data_Types.Expression.body>
                </Foundation.Data_Types.Expression>
            </Foundation.Core.Parameter.defaultValue>
            <Foundation.Core.Parameter.kind xmi.value="in" />
            <Foundation.Core.Parameter.type>
                <Foundation.Data_Types.Primitive>
                    <Foundation.Core.ModelElement.name>[xmlFixup([InstPara.type])]</Foundation.Core.ModelElement.name>
                    <Foundation.Core.ModelElement.visibility xmi.value="public" />
                    <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
                    <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
                    <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
                </Foundation.Data_Types.Primitive>
            </Foundation.Core.Parameter.type>
        </Foundation.Core.Parameter>
        [end loop]
    </Foundation.Auxiliary_Elements.Binding.argument>
</Foundation.Auxiliary_Elements.Binding>\
end template

template genDependencyRefsXMI(MDependentElement)
[loop(MDependentElement->Supplier->MDependency Where isExportedDependentElement([Supplier]))]
<Foundation.Core.ModelElement.requirement>
    <Foundation.Core.Dependency xmi.idref="[[MDependency].getXmiId()]" />
</Foundation.Core.ModelElement.requirement>
[end loop]
[loop(MDependentElement->MClass->MInstantiatedClass->MTemplateClass->MTemplateBinding Where isExportedClass([MTemplateClass]))]
<Foundation.Core.ModelElement.requirement>
    <Foundation.Auxiliary_Elements.Binding xmi.idref="[[MTemplateBinding].getXmiId()]" />
</Foundation.Core.ModelElement.requirement>
[end loop]
[loop(MDependentElement->Client->MDependency Where isExportedDependentElement([Client]))]
<Foundation.Core.ModelElement.provision>
    <Foundation.Core.Dependency xmi.idref="[[MDependency].getXmiId()]" />
</Foundation.Core.ModelElement.provision>
[end loop]
[loop(MDependentElement->MClass->MTemplateClass->MInstantiatedClass->MTemplateBinding Where isExportedClass([MInstantiatedClass]))]
<Foundation.Core.ModelElement.provision>
    <Foundation.Auxiliary_Elements.Binding xmi.idref="[[MTemplateBinding].getXmiId()]" />
</Foundation.Core.ModelElement.provision>
[end loop]\
end template

template genAssociationEndsXMI(MAssociation)
<Foundation.Core.Association.connection>
    [loop(MAssociation->MAssociationEnd->MClass Where isExportedClass([MClass]))]
    <Foundation.Core.AssociationEnd xmi.id="[[MAssociationEnd].getXmiId()]">
        <Foundation.Core.ModelElement.name>[xmlFixup([MAssociationEnd.name])]</Foundation.Core.ModelElement.name>
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        <Foundation.Core.AssociationEnd.isNavigable xmi.value="[boolFixup([MAssociationEnd.isNavigable])]" />
        <Foundation.Core.AssociationEnd.isOrdered xmi.value="[boolFixup([MAssociationEnd.ordering])]" />
        [/*role containment (aggregation/composition)*/]
        [switch(toLower([MAssociationEnd.aggregation]))]
        [case "aggregation":]
        <Foundation.Core.AssociationEnd.aggregation xmi.value="shared" />
        [break]
        [case "composition":]
        <Foundation.Core.AssociationEnd.aggregation xmi.value="composite" />
        [break]
        [default:]
        <Foundation.Core.AssociationEnd.aggregation xmi.value="none" />
        [end switch]
        [/*end of role containment*/]
        <Foundation.Core.AssociationEnd.multiplicity>[multiplicityFixup([MAssociationEnd.multiplicity])]</Foundation.Core.AssociationEnd.multiplicity>
        <Foundation.Core.AssociationEnd.changeable xmi.value="none" />
        <Foundation.Core.AssociationEnd.targetScope xmi.value="instance" />
        [if ([export_extensions])]
        [genRoseExtStereotypeXMI([MAssociationEnd.stereotype])]
        [genAssociationEndExtensionsXMI([MAssociationEnd])]
        [end if]
        [genConstraintsXMI([MAssociationEnd])]
        [if ([MAssociationEnd.stereotype] != "")]
        [genStereotypeXMI([MAssociationEnd.stereotype])]
        [end if]
        <Foundation.Core.AssociationEnd.type>
            <[[MClass].getXmiTag()] xmi.idref="[[MClass].getXmiId()]" />
        </Foundation.Core.AssociationEnd.type>
        <Foundation.Core.AssociationEnd.association>
            <Foundation.Core.Association xmi.idref="[[MAssociation].getXmiId()]" />
        </Foundation.Core.AssociationEnd.association>
        [genDescriptionXMI([MAssociationEnd.description])]
        [genTaggedValuesXMI([MAssociationEnd])]
        <Foundation.Core.AssociationEnd.qualifier>
            [loop(MAssociationEnd->Qualifier)]
            [genAttributeXMI([Qualifier], [MAssociationEnd])]
            [end loop]
        </Foundation.Core.AssociationEnd.qualifier>
    </Foundation.Core.AssociationEnd>
    [end loop]
</Foundation.Core.Association.connection>
end template

///////////////////////////////////////////////////////////////////////////////
// Common Templates
///////////////////////////////////////////////////////////////////////////////
template genStereotypeXMI(stereotype)
<Foundation.Core.ModelElement.stereotype>
    <Foundation.Extension_Mechanisms.Stereotype>
        <Foundation.Core.ModelElement.name>[xmlFixup([stereotype])]</Foundation.Core.ModelElement.name>
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        <Foundation.Core.GeneralizableElement.isRoot xmi.value="false" />
        <Foundation.Core.GeneralizableElement.isLeaf xmi.value="false" />
        <Foundation.Core.GeneralizableElement.isAbstract xmi.value="false" />
        <Foundation.Extension_Mechanisms.Stereotype.icon>
            <Foundation.Data_Types.Geometry />
        </Foundation.Extension_Mechanisms.Stereotype.icon>
        <Foundation.Extension_Mechanisms.Stereotype.baseClass />
    </Foundation.Extension_Mechanisms.Stereotype>
</Foundation.Core.ModelElement.stereotype>\
end template

template genDescriptionXMI(description)
<Foundation.Core.ModelElement.taggedValue>
    <Foundation.Extension_Mechanisms.TaggedValue>
        <Foundation.Extension_Mechanisms.TaggedValue.tag>documentation</Foundation.Extension_Mechanisms.TaggedValue.tag>
        <Foundation.Extension_Mechanisms.TaggedValue.value>[xmlFixup([description])]</Foundation.Extension_Mechanisms.TaggedValue.value>
    </Foundation.Extension_Mechanisms.TaggedValue>
</Foundation.Core.ModelElement.taggedValue>\
end template

template genNamespaceXMI(MDependentElement)
<Foundation.Core.ModelElement.namespace>
    [getDependentElementNamespace([MDependentElement])]
</Foundation.Core.ModelElement.namespace>\
end template

template genConstraintsXMI(MSemElement)
<Foundation.Core.ModelElement.constraint>
[loop(MSemElement->Note->Item Where ([Note.type] == "UmlExtensibilityDefinition" && [Item.type] == "UmlConstraintItem"))]
    <Foundation.Core.Constraint>
        <Foundation.Core.ModelElement.name />
        <Foundation.Core.ModelElement.visibility xmi.value="public" />
        <Foundation.Core.Constraint.body>
            <Foundation.Data_Types.BooleanExpression>
                <Foundation.Data_Types.Expression.language />
                <Foundation.Data_Types.Expression.body>[xmlFixup([Item.value])]</Foundation.Data_Types.Expression.body>
            </Foundation.Data_Types.BooleanExpression>
        </Foundation.Core.Constraint.body>
        <Foundation.Core.Constraint.constrainedElement>
            <Foundation.Core.ModelElement xmi.idref="[[MSemElement].getXmiId()]" />
        </Foundation.Core.Constraint.constrainedElement>
    </Foundation.Core.Constraint>
[end loop]
</Foundation.Core.ModelElement.constraint>\
end template

template genTaggedValuesXMI(MSemElement)
<Foundation.Core.ModelElement.taggedValue>
[loop(MSemElement->TaggedValue)]
    <Foundation.Extension_Mechanisms.TaggedValue>
        <Foundation.Extension_Mechanisms.TaggedValue.tag>[xmlFixup([TaggedValue.tag])]</Foundation.Extension_Mechanisms.TaggedValue.tag>
        <Foundation.Extension_Mechanisms.TaggedValue.value>[xmlFixup([TaggedValue.value])]</Foundation.Extension_Mechanisms.TaggedValue.value>
    </Foundation.Extension_Mechanisms.TaggedValue>
[end loop]
</Foundation.Core.ModelElement.taggedValue>\
end template

///////////////////////////////////////////////////////////////////////////////
// Some Rose extentions
///////////////////////////////////////////////////////////////////////////////
template genRoseExtAssocClassXMI(MClass)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    <ixts s="Rose">
        [if(hasLoop(MClass->MPackage))]
        [loop(MClass->MPackage)]
        <ixttv t="AssociationClass" v="&quot;Logical View::[xmlFixup(getQualifiedName([MPackage]))][xmlFixup([MClass.name])]&quot;" />
        [end loop]
        [else]
        <ixttv t="AssociationClass" v="&quot;Logical View::[xmlFixup([MClass.name])]&quot;" />
        [end if]
    </ixts>
</XMI.extension>\
end template

template genRoseExtStereotypeXMI(stereotype)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    [if ([stereotype] != "")]
    <ixts s="Rose">
        <ixttv t="stereotype" v="&quot;[xmlFixup([stereotype])]&quot;" />
    </ixts>
    [end if]
</XMI.extension>\
end template

template genClassExtensionsXMI(MClass)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    <ixts s="IDL">
        <ixttv t="IDLSpecificationType" v="(&quot;IDLSpecSet&quot; [xmlFixup(getClassIDLSpecSetId([MClass]))])" />
        <ixttv t="IsQueryable" v="[xmlFixup(isQueryable([MClass]))]" />
        <ixttv t="CreateImplementation" v="[xmlFixup(getCreateImplementation([MClass]))]" />
        [if (hasPrimaryKey([MClass]) && getCreateKey([MClass]))]
        <ixttv t="CreateKey" v="TRUE" />
        [else]
        <ixttv t="CreateKey" v="FALSE" />
        [end if]
        <ixttv t="CreateCopyHelper" v="[xmlFixup(getCreateCopyHelper([MClass]))]" />
        <ixttv t="BridgeToOB" v="[xmlFixup(getBridgeToOB([MClass]))]" />
        [if ((toLower(getClassIDLSpecificationType([MClass])) == "typedef" ||
              toLower(getClassIDLSpecificationType([MClass])) == "union"   ||
              toLower(getClassIDLSpecificationType([MClass])) == "const")  &&
            getImplementationType([MClass]) != "")]
        <ixttv t="ImplementationType" v="[xmlFixup(getImplementationType([MClass]))]"/>
        [end if]
        [if (toLower(getClassIDLSpecificationType([MClass])) == "const")]
        <ixttv t="ConstValue" v="[xmlFixup(getConstValue([MClass]))]"/>
        [end if]
    </ixts>
</XMI.extension>\
end template

template genAttributeExtensionsXMI(MAttribute)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    <ixts s="DDL">
        [if (getAttributeLength([MAttribute]) != "")]
        <ixttv t="Length" v="[xmlFixup(getAttributeLength([MAttribute]))]" />
        [end if]
        <ixttv t="PrimaryKey" v="[xmlFixup(isPrimaryKey([MAttribute]))]" />
        <ixttv t="IsIncludedInCopyHelper" v="[xmlFixup(isIncludedInCopyHelper([MAttribute]))]" />
        <ixttv t="IsIncludedInDataObject" v="[xmlFixup(isIncludedInDataObject([MAttribute]))]" />
    </ixts>
    <ixts s="IDL">
        [if (isReadOnlyAttribute([MAttribute]) || isPrimaryKey([MAttribute]))]
        <ixttv t="IsReadOnly" v="TRUE" />
        [else]
        <ixttv t="IsReadOnly" v="FALSE" />
        [end if]
    </ixts>
</XMI.extension>\
end template

template genOperationExtensionsXMI(MOperation)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    <ixts s="IDL">
        <ixttv t="OperationIsOneWay" v="[xmlFixup(isOneWay([MOperation]))]" />
    </ixts>
</XMI.extension>\
end template

template genAssociationEndExtensionsXMI(MAssociationEnd)
<XMI.extension xmi.extender="IXT" xmi.extenderID="">
    <ixts s="IDL">
        <ixttv t="MapAsObjectRelationship" v="[xmlFixup(getMapAsObjectRelationship([MAssociationEnd]))]" />
        <ixttv t="RelationshipImplementation" v="(&quot;RISet&quot; [xmlFixup(getRelationshipImplementationId([MAssociationEnd]))])" />
        <ixttv t="IsReadOnly" v="[xmlFixup(isReadOnlyAssociationEnd([MAssociationEnd]))]" />
    </ixts>
</XMI.extension>\
end template

///////////////////////////////////////////////////////////////////////////////
// XMI extension helpers
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Class extensions
///////////////////////////////////////////////////////////////////////////////

// XMI toolkit uses magic numbers to recognize
// specification types. These numbers are hardcoded here (no other choice)
// extracting source code for operation

// ECR 6927 begin
proc getClassVisibility(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassDefinition", "UmlClassVisibility", "strVal"))
        return toLower([strVal]);
    end if
    return "public";
end proc
// ECR 6927 end

proc getClassIDLSpecSetId(MClass)
    switch (toLower(getClassIDLSpecificationType([MClass])))
        case "interface":
            return "0";
        case "typedef":
            return "54";
        case "enum":
            return "8";
        case "const":
            return "71";
        case "exception":
            return "61";
        case "struct":
            return "51";
        case "union":
            return "81";
        default:
            return "0";
    end switch
end proc

// Get the specification type of a class from its annotation
proc getClassIDLSpecificationType(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassDefinition", "UmlClassType", "strVal"))
        return [strVal];
    end if

    return "Interface";
end proc

proc isQueryable(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassIDLDeclarations", "UmlClassIsQueryable", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc getCreateImplementation(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassIDLDeclarations", "UmlClassCreateImplementation", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc getCreateKey(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassIDLDeclarations", "UmlClassCreateKey", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc getCreateCopyHelper(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassIDLDeclarations", "UmlClassCreateCopyHelper", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc getBridgeToOB(MClass)
    if (getAnnotItemValue([MClass],
            "UmlClassIDLDeclarations", "UmlClassBridgeToOB", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc hasPrimaryKey(MClass)
    loop(MClass->MAttribute)
        if (isPrimaryKey([MAttribute]))
            return TRUE;
        end if
    end loop
    return FALSE;
end proc

proc getImplementationType(MClass)
    getAnnotItemValue([MClass], "UmlClassIDLDeclarations", "UmlClassImplementationType", "strVal");
    return [strVal];
end proc

proc getConstValue(MClass)
    getAnnotItemValue([MClass], "UmlClassIDLDeclarations", "UmlClassConstValue", "strVal");
    return [strVal];
end proc

///////////////////////////////////////////////////////////////////////////////
// Attribute extensions
///////////////////////////////////////////////////////////////////////////////
proc getAttributeLength(MAttribute)
    if (getAnnotItemValue([MAttribute],
                "UmlAttributeDDLDeclarations", "UmlAttributeLength", "strVal"))
        return [strVal];
    end if

    return "";
end proc

proc isPrimaryKey(MAttribute)
    if (getAnnotItemValue([MAttribute],
                "UmlAttributeDDLDeclarations", "UmlAttributeIsPrimaryKey", "strVal"))
        return boolValue([strVal]);
    end if

    return FALSE;
end proc

proc isIncludedInCopyHelper(MAttribute)
    if (getAnnotItemValue([MAttribute],
                "UmlAttributeDDLDeclarations", "UmlAttributeCopyHelper", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc isIncludedInDataObject(MAttribute)
    if (getAnnotItemValue([MAttribute],
                "UmlAttributeDDLDeclarations", "UmlAttributeIsIncludedInDataObject", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc isReadOnlyAttribute(MAttribute)
    if (getTaggedValue([MAttribute],
                "UmlAttributeIDLDefinition:UmlAttributeIDLIsReadOnly", "strVal"))
        return boolValue([strVal]);
    end if

    return FALSE;
end proc

///////////////////////////////////////////////////////////////////////////////
// Operation extensions
///////////////////////////////////////////////////////////////////////////////
proc isOneWay(MOperation)
    if (getAnnotItemValue([MOperation],
                "UmlOperationIDLDefinitionExtensions", "UmlOperationIsOneWay", "strVal"))
        return boolValue([strVal]);
    end if

    return FALSE;
end proc

proc getExceptions(MOperation)
    getTaggedValue([MOperation], "UmlOperationDefinition:UmlOperationThrows", "strVal");
    return [strVal];
end proc

// ECR 7253 begin
proc getOperationLanguage(MOperation)
    if(getAnnotNoteDescription([MOperation], "UmlOperationCxxCode", "strVal"))
        return "Cxx";
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationJavaCode", "strVal"))
        return "Java";
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationAda95Code", "strVal"))
        return "Ada";
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationTOOLCode", "strVal"))
        return "Tool";
    end if
    return "";
end proc

proc getOperationBody(MOperation)
    if(getAnnotNoteDescription([MOperation], "UmlOperationCxxCode", "strVal"))
        return [strVal];
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationJavaCode", "strVal"))
        return [strVal];
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationAda95Code", "strVal"))
        return [strVal];
    end if
    if(getAnnotNoteDescription([MOperation], "UmlOperationTOOLCode", "strVal"))
        return [strVal];
    end if
    return "";
end proc
// ECR 7253 end

///////////////////////////////////////////////////////////////////////////////
// AssociationEnd extensions
///////////////////////////////////////////////////////////////////////////////
proc getMapAsObjectRelationship(MAssociationEnd)
    if (getAnnotItemValue([MAssociationEnd],
                "UmlRoleIDLDefinition", "UmlRoleMapAsObjectRelationship", "strVal"))
        return boolValue([strVal]);
    end if

    return TRUE;
end proc

proc getRelationshipImplementationType(MAssociationEnd)
    if (getAnnotItemValue([MAssociationEnd],
                "UmlRoleIDLDefinition", "UmlRoleRelationshipImplementation", "strVal"))
        return [strVal];
    end if

    return "Local Persistent Reference";
end proc

proc isReadOnlyAssociationEnd(MAssociationEnd)
    if (getAnnotItemValue([MAssociationEnd],
                "UmlRoleIDLDefinition", "UmlRoleIDLReadOnly", "strVal"))
        return boolValue([strVal]);
    end if

    return FALSE;
end proc

proc getRelationshipImplementationId(MAssociationEnd)
    switch (toLower(getRelationshipImplementationType([MAssociationEnd])))
        case "local persistent reference":
            return "22";
        case "user-defined oo_sol query":
            return "54";
        case "reference resolved by foreign key":
            return "8";
        default:
            return "22";
    end switch
end proc

///////////////////////////////////////////////////////////////////////////////
// Some utilities
///////////////////////////////////////////////////////////////////////////////
tcl_proc baseName(dir)
	return [file tail $dir]
end proc

tcl_proc simpleName(dir)
    set tmp [file rootname $dir]
	return [file tail $tmp]
end proc

tcl_proc toLower(str)
	return [string tolower $str]
end proc

tcl_proc isElementOf(strBig, strSmall)
    set lst [split $strBig " "]
	set res [lsearch -exact $lst $strSmall]
    if { [expr $res != -1] } {
        return TRUE
    } else {
        return FALSE
    }
end proc

// Fix strings so they are XML compliant
tcl_proc strReplace(str, strWhat, strWith)
    regsub -all $strWhat $str $strWith res
    return $res
end proc

tcl_proc xmlFixup(str)
    regsub -all "\&" $str "\\&amp;" res;
    regsub -all "\"" $res "\\&quot;" res;
    regsub -all "\>" $res "\\&gt;" res;
    regsub -all "\<" $res "\\&lt;" res;
    regsub -all "\1" $res "\n" res;
    return $res;
end proc

tcl_proc processVisibility(str)
    set res ""

    set lstItems [split $str ","]
    foreach i $lstItems {
        set l [split $i ":"]
        if {[llength $l] == 1} {
            return [string tolower [lindex $l 0]]
        }

        switch -exact [string tolower [lindex $l 0]] {
            "cpp:" {
                set res [string tolower [lindex $l 1]]
            }

            "java:" {
                if {"$res" == ""} {
                    set res [string tolower [lindex $l 1]]
                }
            }
        }
    }

    return $res;
end proc

proc boolFixup(str)
    if (toLower([str]) == "true")
        return "true";
    else
        return "false";
    end if
end proc

proc boolValue(str)
    if (toLower([str]) == "true")
        return TRUE;
    else
        return FALSE;
    end if
end proc

// Fix some multiplicities that XMIToolkit won't accept
proc multiplicityFixup(multiplicity)
    [multiplicity] = strReplace([multiplicity], ":", "..");
    [multiplicity] = strReplace([multiplicity], "\\*", "n");
    if([multiplicity] == "1")
        return "1..1";
    end if
    return [multiplicity];
end proc

proc getAnnotItemValue(MElement, strNote, strItem, strVal)
    [[strVal]] = "";
    loop(MElement->Note)
        if ([Note.type] == [strNote])
            loop(Note->Item)
                if ([Item.type] == [strItem])
                    [[strVal]] = [Item.value];
                    return TRUE;
                end if
            end loop
        end if
    end loop
    return FALSE;
end proc

// ECR 7253 begin
proc getAnnotNoteDescription(MElement, strNote, strVal)
    [[strVal]] = "";
    loop(MElement->Note)
        if ([Note.type] == [strNote])
            [[strVal]] = [Note.description];
            return TRUE;
        end if
    end loop
    return FALSE;
end proc
// ECR 7253 end

proc getTaggedValue(MElement, strTag, strVal)
    [[strVal]] = "";
    loop(MElement->TaggedValue)
        if ([TaggedValue.tag] == [strTag])
            [[strVal]] = [TaggedValue.value];
            return TRUE;
        end if
    end loop
    return FALSE;
end proc

proc getQualifiedName(MPackage)
    loop(MPackage->Domain)
        return getQualifiedName([Domain]) xmlFixup([MPackage.name]) "::";
    end loop
    return xmlFixup([MPackage.name]) "::";
end proc

proc isSubPackageOf(MPackage as BigPackage, MPackage as SubPackage)
    loop(SubPackage->Domain)
        if ([Domain.id] == [BigPackage.id])
            return TRUE;
        end if

        return isSubPackageOf([BigPackage], [Domain]);
    end loop

    return FALSE;
end proc

proc isSelectedPackage(MPackage)
    if ([selected_packages] == "")
        if (hasLoop(MPackage->Domain))
            return FALSE;
        else
            return TRUE;
        end if
    end if

    return isElementOf([selected_packages], [MPackage.name]);
end proc

proc isSubPackageOfSelectedPackage(MPackage as SubPackage)
    if ([selected_packages] == "")
        if (hasLoop(SubPackage->Domain))
            return FALSE;
        else
            return TRUE;
        end if
    end if

    loop(Instances->MPackage as BigPackage where isSelectedPackage([BigPackage]))
        if (isSubPackageOf([BigPackage], [SubPackage]))
            return TRUE;
        end if
    end loop

    return FALSE;
end proc

proc isExportedPackage(MPackage)
    if ([selected_packages] == "")
        return TRUE;
    end if

    if (isSelectedPackage([MPackage]))
        return TRUE;
    end if

    return isSubPackageOfSelectedPackage([MPackage]);
end proc

proc isExportedDependentElement(MDependentElement)
    if ([selected_packages] == "")
        return TRUE;
    end if

    loop(MDependentElement->MPackage)
        return isExportedPackage([MPackage]);
    end loop

    loop(MDependentElement->MClass)
        return isExportedClass([MClass]);
    end loop

    loop(MDependentElement->MPara->MParaItem->MAttribute->MClass)
        return isExportedClass([MClass]);
    end loop

    loop (MDependentElement->MOperation->MClass)
        return isExportedClass([MClass]);
    end loop

    return FALSE;
end proc

proc isExportedClass(MClass)
    if ([selected_packages] == "")
        return TRUE;
    end if

    loop(MClass->MPackage)
        return isExportedPackage([MPackage]);
    end loop

    return FALSE;
end proc

proc isExportedAssociation(MAssociation)
    local nTotalCount;
    local nExportedCount;

    [nExportedCount] = 0;
    [nTotalCount] = loopCount(MAssociation->MAssociationEnd->MClass);
    loop(MAssociation->MAssociationEnd->MClass)
        if (isExportedClass([MClass]))
            [nExportedCount] = inc([nExportedCount]);
        end if
    end loop

    if (less(1, [nExportedCount]) || [nExportedCount] == [nTotalCount])
        return TRUE;
    else
        return FALSE;
    end if
end proc

proc getDependentElementNamespace(MDependentElement)
    loop(MDependentElement->MPackage->Domain)
        if (isExportedPackage([Domain]))
            return "<Model_Management.Package xmi.idref=\""[Domain].getXmiId()"\" />";
        end if
    end loop
    loop(MDependentElement->MClass->MPackage)
        return "<Model_Management.Package xmi.idref=\""[MPackage].getXmiId()"\" />";
    end loop
    loop(MDependentElement->MOperation->MClass)
        return "<" [MClass].getXmiTag() " xmi.idref=\""[MClass].getXmiId()"\" />";
    end loop
    loop(MDependentElement->MPara->MParaItem->MAttribute->MClass)
        return "<" [MClass].getXmiTag() " xmi.idref=\""[MClass].getXmiId()"\" />";
    end loop

    return "<Model_Management.Model xmi.idref=\"i000000000001\" />";
end proc

proc MElement.getXmiId()
    return xmlFixup([MElement.id]);
end proc

proc MSemElement.getXmiId()
    if ([MSemElement.guid] == "")
        return xmlFixup([MSemElement.id]);
    end if

    return xmlFixup([MSemElement.guid]);
end proc

proc MClass.getXmiId()
    local res;

    if ([MClass.guid] == "")
        [res] = xmlFixup([MClass.id]);
    else
        [res] = xmlFixup([MClass.guid]);
    end if

    loop(MClass->MAssociation Where isExportedAssociation([MAssociation]))
        if ([MAssociation.guid] == "")
            [res] = [res] "." xmlFixup([MAssociation.id]);
        else
            [res] = [res] "." xmlFixup([MAssociation.guid]);
        end if
    end loop

    return [res];
end proc

proc MAssociation.getXmiId()
    local res;

    if ([MAssociation.guid] == "")
        [res] = xmlFixup([MAssociation.id]);
    else
        [res] = xmlFixup([MAssociation.guid]);
    end if

    loop(MAssociation->AssociationClass Where isExportedClass([AssociationClass]))
        if ([AssociationClass.guid] == "")
            [res] = xmlFixup([AssociationClass.id]) "." [res];
        else
            [res] = xmlFixup([AssociationClass.guid]) "." [res];
        end if
    end loop

    return [res];
end proc

proc MDependentElement.getXmiTag()
    return "<<<ERROR>>>";
end proc

proc MClass.getXmiTag()
    loop(MClass->MAssociation Where isExportedAssociation([MAssociation]))
        return "Foundation.Core.AssociationClass";
    end loop
    return "Foundation.Core.Class";
end proc

proc MInterface.getXmiTag()
    return "Foundation.Core.Interface";
end proc

proc MPackage.getXmiTag()
    return "Model_Management.Package";
end proc

proc MAttribute.getXmiTag()
    return "Foundation.Core.Attribute";
end proc

proc MOperation.getXmiTag()
    return "Foundation.Core.Operation";
end proc

tcl_proc inc(val)
    return [expr $val + 1]
end proc

tcl_proc less(val1, val2)
    if { [expr $val1 < $val2] } {
        return "TRUE"
    } else {
        return "FALSE"
    }
end proc

