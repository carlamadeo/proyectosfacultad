
proc generateClassTables()
    loop(Instances->MClass Where !hasLoop(MClass->MInstantiatedClass))
        output( [ProjectDir] "uclasst_files/" [MClass.name] ".uclasst");
        out = generateClassTable([MClass]) "\n";
    end loop
end proc

template generateClassTable(MClass)
FillTable UmlClassTable
{
    [generateClassTableHeader([MClass])]
    [generateAttributesInfo([MClass])]
    [generateOperationsInfo([MClass])]
}
end template

template generateClassTableHeader(MClass)
///////////////////////////////////////////////////////////////////////////
// Class HSection
///////////////////////////////////////////////////////////////////////////
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows 1 }
    { Hidden False }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { Row
            { Appid [getNextAppID()] }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[MClass.name]" }
                { ObjectCache
                    { Object
                        { PDMType node }
                        { MappingName Class }
                        { ID 0 }
                        { GUID "[[MClass].getGuid()]" }
                    }
                }
            }
        }
    }
}\
end template

template generateAttributesInfo(MClass)
///////////////////////////////////////////////////////////////////////////
// Attributes HSection
///////////////////////////////////////////////////////////////////////////
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows 1 }
    { Hidden False }
    { NumVisRows 1 }
}
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows [loopCount(MClass->MAttribute)] }
    { Hidden False }
    { NumVisRows [loopCount(MClass->MAttribute)] }
    ///////////////////////////////////////////////////////////////////////////
    // Class VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        [loop(MClass->MAttribute)]
        { Row
            { Appid [getNextAppID()] }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[MAttribute.name]" }
                { ObjectCache
                    { Object
                        { PDMType node }
                        { MappingName Attribute }
                        { ID 0 }
                        { GUID "[[MAttribute].getGuid()]" }
                    }
                }
            }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[MAttribute.type]" }
            }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[replaceQuotes([MAttribute.defaultValue])]" }
            }
        }
        [end loop]
    }
    ///////////////////////////////////////////////////////////////////////////
    // Analysis Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 4 }
        { Hidden False }
        [loop(MClass->MAttribute)]
        { Row
            { Appid [RowID] }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[getVisibility([MAttribute.access])]" }
            }
            { Cell
                { Appid [getNextAppID()] }
                [if ([MAttribute.binding] == "static")]
                { Label "True" }
                [else]
                { Label "False" }
                [end if]
            }
            { Cell
                { Appid [getNextAppID()] }
                [if ([MAttribute.derived])]
                { Label "True" }
                [else]
                { Label "False" }
                [end if]
            }
            { Cell { Appid [getNextAppID()] } }
        }
        [end loop]
    }
    ///////////////////////////////////////////////////////////////////////////
    // C++ Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 5 }
        { Hidden True }
    }
    ///////////////////////////////////////////////////////////////////////////
    // Ada_95 Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 4 }
        { Hidden True }
    }
    ///////////////////////////////////////////////////////////////////////////
    // Java Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 4 }
        { Hidden True }
    }
    ///////////////////////////////////////////////////////////////////////////
    // IDL Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 4 }
        { Hidden True }
        [loop(MClass->MAttribute)]
        { Row
            { Appid [getNextAppID()] }
            { Cell { Appid [getNextAppID()] } }
            { Cell
                { Appid [getNextAppID()] }
                [generateAttributeReadOnlyLabel([MAttribute])]
            }
            { Cell { Appid [getNextAppID()] } }
            { Cell { Appid [getNextAppID()] } }
        }
        [end loop]
    }
}\
end template

template generateOperationsInfo(MClass)
///////////////////////////////////////////////////////////////////////////
// Operations HSection
///////////////////////////////////////////////////////////////////////////
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows 1 }
    { Hidden False }
    { NumVisRows 1 }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { NumVisCols 3 }
    }
}
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows [loopCount(MClass->MOperation)] }
    { Hidden False }
    { NumVisRows [loopCount(MClass->MOperation)] }
    ///////////////////////////////////////////////////////////////////////////
    // Class VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        [loop(MClass->MOperation)]
        { Row
            { Appid [getNextAppID()] }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[MOperation.name]" }
                { ObjectCache
                    { Object
                        { PDMType node }
                        { MappingName Operation }
                        { ID 0 }
                        { GUID "[[MOperation].getGuid()]" }
                    }
                }
            }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[replaceQuotes(generateOperationParameters([MOperation]))]" }
            }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[MOperation.returnType]" }
            }
        }
        [end loop]
    }
    ///////////////////////////////////////////////////////////////////////////
    // Analysis Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 4 }
        { Hidden False }
        [loop(MClass->MOperation)]
        { Row
            { Appid [getNextAppID()] }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[getVisibility([MOperation.access])]" }
            }
            { Cell
                { Appid [getNextAppID()] }
                [if ([MOperation.binding] == "static")]
                { Label "True" }
                [else]
                { Label "False" }
                [end if]
            }
            { Cell { Appid [getNextAppID()] } }
            { Cell
                { Appid [getNextAppID()] }
                [generateOperationThrowsLabel([MOperation])]
            }
        }
        [end loop]
    }
    ///////////////////////////////////////////////////////////////////////////
    // C++ Items VSection
    ///////////////////////////////////////////////////////////////////////////
    { Vsect
        { Appid [Vsect_CPP_ID] }
        { NumCols 5 }
        { Hidden False }
        [loop(MClass->MOperation)]
        { Row
            { Appid [getNextAppID()] }
            { Cell { Appid [getNextAppID()] } }
            { Cell { Appid [getNextAppID()] } }
            { Cell
                { Appid [getNextAppID()] }
                [if([MOperation.binding] == "virtual")]
                { Label "True" }
                [else]
                { Label "False" }
                [end if]
            }
            { Cell { Appid [getNextAppID()] } }
            { Cell { Appid [getNextAppID()] } }
        }
        [end loop]
    }
}\
end template

proc generateAttributeReadOnlyLabel(MAttribute)
    loop(MAttribute->TaggedValue)
        if (getTagComponent([TaggedValue.tag], 1) == "UmlAttributeIDLDefinition" &&
                getTagComponent([TaggedValue.tag], 2) == "UmlAttributeIDLIsReadOnly")
            return "{ Label \"" [TaggedValue.value] "\" }";
        end if
    end loop

    return "";
end proc

proc generateOperationThrowsLabel(MOperation)
    loop(MOperation->TaggedValue)
        if (getTagComponent([TaggedValue.tag], 1) == "UmlOperationDefinition" &&
                getTagComponent([TaggedValue.tag], 2) == "UmlOperationThrows")
            return "{ Label \"" [TaggedValue.value] "\" }";
        end if
    end loop

    return "";
end proc

tcl_proc getTagComponent(strTag, nComponent)
    set lstComponents [split $strTag ":"]

    if {[llength $lstComponents] < $nComponent} {
        return ""
    } else {
        return [lindex $lstComponents [expr $nComponent - 1]]
    }
end proc

