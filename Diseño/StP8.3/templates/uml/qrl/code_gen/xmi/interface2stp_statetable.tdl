proc generateStateTables()
    local stateCount;

    [stateCount] = "0";
    loop(Instances->MNormalState)
        [stateCount] = add("1",[stateCount]);
        output( [ProjectDir] "ustatet_files/" getStateClass([MNormalState]) "__" [stateCount] ".ustatet");
        out = generateStateTable([MNormalState]);
    end loop
end proc

template generateStateTable(MState)
FillTable UmlStateTable
{
    [generateStateTableHeader([MState])]
    [generateStateActions([MState],"EntryAction")]
    [generateStateActions([MState],"Activity")]
    [generateStateActions([MState],"ExitAction")]
}
end template

template generateStateTableHeader(MState)
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows 1 }
    { Hidden False }
    { NumVisRows 1 }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { NumVisCols 2 }
        { Row
            { Appid [getNextAppID()] }
            { Cell { Appid [getNextAppID()] } }
            { Cell
                { Appid [getNextAppID()] }
                { Label "[getStateClass([MState])]" }
                { ObjectCache
                    { Object
                        { PDMType node }
                        { MappingName UmlState }
                        { ID 0 }
                        [loop(MState->MStatemachine)]
                        { GUID "[[MStatemachine].getGuid()]" }
                        [end loop]
                    }
                }
            }
            { Cell { Appid [getNextAppID()] } }
        }
    }
}
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows [getSuperStatesCount([MState])] }
    { Hidden False }
    { NumVisRows [getSuperStatesCount([MState])] }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { NumVisCols 2 }
        [generateSuperStates([MState], "State")]
    }
}
end template

template generateSuperStates(MState, strType)
[loop(MState->MStatemachine->SuperState)]
[generateSuperStates([SuperState], "Parent State")]
[end loop]
{ Row
    { Appid [getNextAppID()] }
    { Cell { Appid [getNextAppID()] } { Label "[strType]" } }
    { Cell { Appid [getNextAppID()] }
        { Label "[MState.name]" }
        { ObjectCache
            { Object
                { PDMType node }
                { MappingName UmlState }
                { ID 0 }
                { GUID "[[MState].getGuid()]" }
            }
        }
    }
    { Cell { Appid [getNextAppID()] } }
}
end template

template generateStateActions(MState, actionType)
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows 1 }
    { Hidden False }
    { NumVisRows 1 }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { NumVisCols 2 }
    }
}
{ Hsect
    { Appid [getNextAppID()] }
    { NumRows [getStateActionsCount([MState], [actionType])] }
    { Hidden False }
    { NumVisRows [getStateActionsCount([MState], [actionType])] }
    { Vsect
        { Appid [getNextAppID()] }
        { NumCols 3 }
        { Hidden False }
        { NumVisCols 2 }
    [switch([actionType])]
    [case "Activity":]
        [loop(MState->MActivity)]
        [generateStateAction([MActivity.name], [MActivity].getGuid(), "UmlStateActivity")]
        [end loop]
        [break]
    [case "EntryAction":]
        [loop(MState->MAction->MActionType Where [MActionType.type] == "entry")]
        [generateStateAction([MAction.name], [MAction].getGuid(), "UmlStateEntryAction")]
        [end loop]
        [break]
    [case "ExitAction":]
        [loop(MState->MAction->MActionType Where [MActionType.type] == "exit")]
        [generateStateAction([MAction.name], [MAction].getGuid(), "UmlStateExitAction")]
        [end loop]
        [break]
    [end switch]
    }
}
end template

proc getStateClass(MState)
    loop(MState->MStatemachine->MClass)
        return [MClass.name];
    end loop
    loop(MState->MStatemachine->SuperState)
        return getStateClass([SuperState]);
    end loop
end proc

template generateStateAction(label, UID, mapping)
{ Row
    { Appid [getNextAppID()] }
    { Cell
        { Appid [getNextAppID()] }
        { Label "[replace([label], "\x22", "\\\x22")]" }
        { ObjectCache
            { Object
                { PDMType link }
                { MappingName [mapping] }
                { ID 0 }
                { GUID "[UID]" }
            }
        }
    }
    { Cell  { Appid [getNextAppID()] } }
    { Cell  { Appid [getNextAppID()] } }
}
end template

proc getStateQualifiedName(MState)
    loop(MState->MStatemachine->SuperState)
        return getStateQualifiedName([SuperState]) "_" [MState.name];
    end loop
    loop(MState->MStatemachine->MClass)
        return [MClass.name] "_" [MState.name];
    end loop
    return [MState.name];
end proc

proc getSuperStatesCount(MState)
    loop(MState->MStatemachine->SuperState)
        return add(getSuperStatesCount([SuperState]), "1");
    end loop
    return 1;
end proc

proc getStateActionsCount(MState, actionType)
    local res;

    [res] = 1;
    switch([actionType])
        case "Activity":
            [res] = loopCount(MState->MActivity);
            break;
        case "EntryAction":
            [res] = loopCount(MState->MAction->MActionType Where [MActionType.type] == "entry");
            break;
        case "ExitAction":
            [res] = loopCount(MState->MAction->MActionType Where [MActionType.type] == "exit");
            break;
    end switch

    return [res];
end proc

