//*****************************************************************************
// $RCSfile: corbaidl_main.tdl,v $
// $Revision: 1.1 $
// $Date: 2001/06/15 02:12:53 $
// Author: Oliver Maus
//*****************************************************************************

/*
Contains the main routine of the IDL code generator.

Calls for each class in the model the procedure gen_dir_file.

The mapping of metatypes and StP/Uml types is documented in the ACD manual.
*/

/*
import other template files
*/
USES corbaidl_genInterface;
USES corbaidl_std;


/******************************************************************************
This is the entry procedure of the IDL generator.
******************************************************************************/
proc main()
	// set the interface extension 
	[interface_extension] = ".idl";
	/* For each MClass a variable is defined that holds the id of the
	   package it belongs to.
	   In the procedure genClass (called below)
	   these variable(s) will be used for generating the appropriate
	   package statement.
	   This uses the insert/mark mechanism as described in the documentation
	*/
	loop(Instances->MPackage AS mp->MClass)
		[Class_[MClass.name]] = [mp.id];
	end loop
	
	/* defines the structure of user defined block id strings 
	   (defined in midl_std.tdl)*/
	init();		
	
	/* Generate idl files for list of classes or
		whole model
		The class id list is passed from the desktop, depending
		on the selection of classes, diagrams, packageds
	*/
//	if ([class_id_list] == "")
//		gen_model();
//	else
//		gen_classes();
//	end if

/*	Set external variables to default values
	Behaviour of code generation could be influenced by changing
	the default value
*/			
	[exclusions] = "True";
	[comment_classes] = "True";
	[comment_attributes] = "True";
	[comment_operations] = "True";

// code should be generated for the whole model
	gen_model();

end proc

proc gen_classes()
	/* each metamodel type MClass is passed to the procedure gen_dir_file
	   defined in corbaidl_geninterface.tdl */

	loop(Instances->MClass([class_id_list]) Where (!hasLoop(MClass->MDataType))) 
		
//		info = "gen_classes - for Class: " [MClass.name] "\n";
		gen_dir_file([MClass]);
		
	end loop	
end proc

//proc gen_model()
//
//	loop(Instances->MPackage AS mp Where (!hasLoop(mp->Domain)))
//		info = "TopLevelPacks: " [mp.name]"\n";
//			[mp].startGenInterfaceFile();
//	end loop
//end proc

proc gen_model()
	/* each metamodel type MClass is passed to the procedure gen_dir_file
	   defined in corbaidl_geninterface.tdl */

//	loop(Instances->MClass Where (!hasLoop(MClass->MDataType))) 
	loop(Instances->MInterface) 
		
		if ([exclusions] == "True" && classIsExternal([MInterface])=="True")
			// don't generate
		else

//			info = "gen_classes - for Class: " [MClass.name] "\n";
			gen_dir_file([MInterface]);
		end if
		
	end loop	
end proc












