/******************************************
 *
 * Utility functions for 
 * bean-managed persistence
 *
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    18/02/2001
 ******************************************/
 
// retrieves the name of a datasource
// (modelled as an association between bean and datasource)
proc getDataSourceName(MClass)
loop(MClass->Role As FromRole->MAssociation->MAssociationEnd As ToRole->MClass As Partner Where [FromRole.id] != [ToRole.id] && [Partner.stereotype] == [datasource_stereo])
    return [Partner.name];
end loop
end proc


template TokenSet.import_proc() 
import [TokenSet.line];
end template


// Generates placeholders in an insert statement
// (for operations)
proc MOperation.genPlaceHolders()
    local retval = "";
    
    loop(MOperation->OpPara; setDelim(""); setDelim(", "))
        [retval] = [retval] delim() "?";
    end loop
    
    return [retval];
end proc


// Generates placeholders in an insert statement
// (for classes)
proc MClass.genPlaceHolders()
    local retval = "";
    
    loop(MClass->MAttribute Where [MAttribute:access_methods] == "True"; setDelim(""); setDelim(", "))
        [retval] = [retval] delim() "?";
    end loop
    
    return [retval];
end proc


// Generates placeholders in an update statement
proc genUpdatePlaceHolders(MClass)
    local retval = "";
    
    loop(MClass->MAttribute Where [MAttribute:access_methods] == "True"; setDelim(""); setDelim(", "))
        [retval] = [retval] delim() [MAttribute.name] " = ?";   
    end loop
    
    return [retval];
end proc



proc getSQLType(type)
    switch([type])
        case "boolean"   :
        case "int"       :
        case "short"     :
        case "long"      :
        case "double"    :
        case "float"     :
            return upcase_firstchar([type]);
          break;
        case "Integer"   :
             return "Int";
          break;
        case "Short"     :          
        case "Long"      :
        case "Double"    :
        case "Float"     :
        case "Long"      :
        case "String"    :
        case "Timestamp" :
        case "Date"      :
            return [type];
          break;
        case "java.sql.Timestamp" :
        case "java.sql.Date"     :
            return getFileFromPackage([type]);
        default          :
            return "Object";
          break;
    end switch
end proc

proc MAttribute.setSQLType()
    switch([MAttribute.type])
        case "boolean"   :
        case "int"       :
        case "short"     :
        case "long"      :
        case "double"    :
        case "float"     :
        case "String"    :
        case "Timestamp" :
        case "Date"      :
        case "java.sql.Timestamp" :
        case "java.sql.Date"     :
            return [MAttribute.name];
          break;
        case "Integer"   :
            return [MAttribute.name] ".intValue()";
          break;
        case "Short"     :
        case "Long"      :
        case "Double"    :
        case "Float"     :
        case "Long"      :
            return [MAttribute.name] "." lowercase_firstchar([MAttribute.type]) "Value()";                
        default          :
            return [MAttribute.name];
          break;
    end switch
end proc

proc setSQLType(type, name)
    switch([type])
        case "boolean"   :
        case "int"       :
        case "short"     :
        case "long"      :
        case "double"    :
        case "float"     :
        case "String"    :
        case "Timestamp" :
        case "Date"      :
        case "java.sql.Timestamp" :
        case "java.util.Date"     :
            return [name];
          break;
        case "Integer"   :
            return [name] ".intValue()";
          break;
        case "Short"     :
        case "Long"      :
        case "Double"    :
        case "Float"     :
        case "Long"      :
            return [name] "." lowercase_firstchar([type]) "Value()";
        default          :
            return [name];
          break;
    end switch
end proc



proc getPrimaryKey(MClass)
    if ([MClass:gen_pk_class] == "False")
        if ([MClass:pk_var_name] == "")
            info = "Keine PK-Klasse und kein PK-Feld gesetzt!";
            exit();
        else
            return [MClass:pk_var_name];
        end if
    else
        return "new " [MClass:pk_class] "(" [MClass:pk_attr_list] ")";
    end if
end proc



// Simple AND concatenation of PrimaryKey attributes
// for a WHERE clause in a SELECT statement
proc MClass.getWhereClause()
    local retval = "";
    loop(Instances->MAttribute([MClass:pk_attributes]); setDelim(""); setDelim(" AND "))
        [retval] = [retval] delim() [MAttribute.name] " = ?";
    end loop
    return [retval];
end proc


// Simple AND concatenation of method parameters
// for a WHERE clause in a SELECT statement
proc MOperation.getWhereClause()
    local retval = "";
    loop(MOperation->OpPara; setDelim(""); setDelim(" AND "))
        [retval] = [retval] delim() [OpPara.name] " = ?";
    end loop
    return [retval];
end proc


proc getResultSet(MAttribute, ResultSet)
    local retval = "";
    switch([MAttribute.type])
        case "byte"    :
        case "short"   :
        case "int"     :
        case "long"    :
        case "float"   :
        case "double"  :
        case "boolean" :
            [retval] = [ResultSet] ".get" upcase_firstchar([MAttribute.type]) "(\"" [MAttribute.name] "\")";
          break;
        case "String"    :
        case "Timestamp" :
        case "Date"      :
        case "java.sql.Timestamp" :
        case "java.sql.Date"     :
            [retval] = [ResultSet] ".get" getFileFromPackage([MAttribute.type]) "(\"" [MAttribute.name] "\")";
          break;
        case "Integer" :
            [retval] = "new Integer(" [ResultSet] ".getInt(\"" [MAttribute.name] "\"))";
          break;
        case "Long"    :
        case "Byte"    :
        case "Short"   :
        case "Boolean" :
        case "Float"   :
        case "Double"  :
            [retval] = "new " [MAttribute.type] "(" [ResultSet] ".get" [MAttribute.type]" (\"" [MAttribute.name] "\"))";
          break;
        default        :
            [retval] = "(" [MAttribute.type] ") " [ResultSet] ".getObject(\"" [MAttribute.name] "\")";
          break;
    end switch
    return [retval];
end proc
