/***********************************************
 *
 * Utilities for Package related Tasks
 *
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    12.01.2000
 *
 * History:
 * =============================================
 * DATE        WHO      CHANGE
 * ---------------------------------------------
 * 20/02/2002  Lippert  Package initialisitation
 *                      now takes selective code
 *                      generation into account.
 **********************************************/

/* Prepares packages for the generation of
   DeploymentDescriptors, initiates Makefile
   generation for compiling and packaging.
   
   There are three possible strategies:
   1) loop all toplevel packages and write all their
      classes (EJBs or not) in one JAR file and DD
   2) For every package with a specified stereotype,
      say e.g. <<EJB>> write a DD and a JAR file
   3) Look in every package, if it contains a EJB,
      build DD and JAR file.
*/
proc prepareDeplPackages()   
    if ([package_mode] == "toplevel")
        // search toplevel packages
        loop(Instances->MPackage As TopLevel Where !hasLoop(TopLevel->Domain))
            // get all descendant packages
            [TopLevel:descendants]   = getIdListRec(TopLevel->SubPackage);
      
      if ([class_id_list] != "")
        // markPackages if [class_id_list] is non-empty.
        loop(TopLevel->MClass)
          if (isInIdlist([MClass.id]))
            [MClass:marked] = TRUE;
            [TopLevel:marked] = TRUE;
          end if
        end loop
        loop(Instances->MPackage([TopLevel:descendants]) As ChildPack)
          loop(ChildPack->MClass)
            if (isInIdlist([MClass.id]))
              [MClass:marked] = TRUE;
              [TopLevel:marked] = TRUE;
            end if
          end loop
        end loop
      end if
    end loop  
    
    if ([class_id_list] != "")
      loop(Instances->MPackage As TopLevel Where !hasLoop(TopLevel->Domain) && [TopLevel:marked])
        [TopLevel:pack_name]     = [build_dir] "/" [TopLevel.name];
        [TopLevel:classes_name]  = [TopLevel:pack_name] "/classes";
        [TopLevel:depldesc_name] = [TopLevel:classes_name] "/META-INF/ejb-jar.xml";
        switch ([ejb_server])
      	  case "wls" :
      		  [TopLevel:wls_depl_name] = [TopLevel:classes_name] "/META-INF/weblogic-ejb-jar.xml";
      	    break;
        end switch
        [TopLevel:lib_name]      = [TopLevel:pack_name] "/lib";
        loop(Instances->MPackage([TopLevel:descendants]) As Guckmal)
          genPackageName([Guckmal]);
        end loop
      end loop
    else
      loop(Instances->MPackage As TopLevel Where !hasLoop(TopLevel->Domain))
            [TopLevel:pack_name]     = [build_dir] "/" [TopLevel.name];
            [TopLevel:classes_name]  = [TopLevel:pack_name] "/classes";
            [TopLevel:depldesc_name] = [TopLevel:classes_name] "/META-INF/ejb-jar.xml";
            switch ([ejb_server])
            	case "wls" :
            		[TopLevel:wls_depl_name] = [TopLevel:classes_name] "/META-INF/weblogic-ejb-jar.xml";
            	  break;
           	end switch
            [TopLevel:lib_name]      = [TopLevel:pack_name] "/lib";
            mkdir([TopLevel:lib_name]);
            loop(Instances->MPackage([TopLevel:descendants]) As Guckmal)
                genPackageName([Guckmal]);
            end loop
        end loop
    end if // if ([class_id_list] != "")
    
  end if // if ([package_mode] == "toplevel")
end proc 




// genPackageName
// --------------
proc genPackageName(MPackage As TestPack) 
    local dir_name = [TestPack.name];
    local package_list = getIdListRec(TestPack->Domain);
    [package_list] = invIdOrder([package_list]);
    
    loop(Instances->MPackage([package_list]); setDelim("/"); setDelim("/"))
        [dir_name] = [MPackage.name] delim() [dir_name];
    end loop
    [TestPack:dir_name] = [dir_name];
end proc



// hasSameToplevel
// ---------------
// "com.stp.bank" and "com.stp.customer" have the same
// toplevel package, "de.stp.bank" and "com.stp.bank" have not.
proc hasSameToplevel(MClass As Source, MClass As Target) 
    if (hasSameToplevelString([Source:package_name], [Target:package_name]))
        return TRUE;
    end if
    return FALSE;
end proc


// hasSameToplevelString
// ---------------------
// Looks, wether two given package strings have the
// the same toplevel part.
tcl_proc hasSameToplevelString(source_pack, target_pack)
    set s_pack [lindex [split $source_pack "."] 0];
    set t_pack [lindex [split $target_pack "."] 0];
    if { $s_pack == $t_pack } {
        return "TRUE";
    } else {
        return "FALSE";
    }    
end proc

// isInIdList
// ----------
// looks, whether or not a given ID is in the list
// of class_ids.
proc isInIdlist(id)
  loop(Instances->TokenSet([class_id_list_nl]))
    if ([id] == [TokenSet.line])
      return TRUE;
    end if
  end loop
  return FALSE;
end proc