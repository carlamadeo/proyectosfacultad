/************************************************
 *
 * Generates a DeploymentDescriptor that adheres 
 * to the EJB Spec. 1.1. 
 *
 * Only information that are related to the role
 * of a Bean Provider are generated. Information
 * that is relevant for the Application Assembler
 * or Deployer roles is left out.
 *
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    22/11/2000
 *
 * History:
 * ==============================================
 * DATE        WHO      CHANGE
 * ----------------------------------------------
 * 20/02/2002  Lippert  Prepared Depl-Desc. for
 *                      selective codegeneration.
 ***********************************************/

USES util/ejb_DeplDesc;
USES util/ejb_MAssociation;

// Generates the top level information for a deployment descriptor.
template genDeploymentDescriptor(MPackage)
<?xml version="1.0" encoding="Cp1252"?>
<!DOCTYPE ejb-jar PUBLIC 
 '-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN' 
 'http://java.sun.com/j2ee/dtds/ejb-jar_1_1.dtd'
>

<!--
    Currently, StP/UML writes mainly information to the Deployment Descriptor
    that can be extracted from the structural model and that is needed by code 
    generation too. These are mainly information that also a Bean Provider can 
    and should provide.
    
    Information about security or transaction contexts are in the Application 
    Assemblers and Deployers realm and are difficult to model without a general 
    dependency mechanism.
    
    We could have provided this information like the others with the help of
    Tagged Values. However, this would be a cumbersome and error-prone process.
    Once StP/ACD will provide a MetaModel for component diagrams we can 
    extract these information and add it to the Deployment Descriptor.
-->

<ejb-jar>
    <display-name>[MPackage:name][pkg_display_name_sf]</display-name>
    <small-icon></small-icon>
    <large-icon></large-icon>
    
    <!--                                      -->
    <!-- section for the static structure     -->
    <!--                                      -->
    <enterprise-beans>
    [if (! [MPackage:marked])]
    [loop(Instances->MPackage([MPackage:descendants]) As SubPack)]
        [loop(SubPack->MClass)]
            [if (getStereotype([MClass]) == [entity_bean_stereo])]
        [genEntityBeanDD([MClass])]
            [end if]
            [if (getStereotype([MClass]) == [session_bean_stereo])]
        [genSessionBeanDD([MClass])]
            [end if]
        [end loop]
    [end loop]
    [loop(MPackage->MClass)]
        [if (getStereotype([MClass]) == [entity_bean_stereo])]
        [genEntityBeanDD([MClass])]
        [end if]
        [if (getStereotype([MClass]) == [session_bean_stereo])]
        [genSessionBeanDD([MClass])]
        [end if]
    [end loop]
    [else]
    [loop(Instances->MPackage([MPackage:descendants]) As SubPack)]
        [loop(SubPack->MClass Where [MClass:marked])]
            [if (getStereotype([MClass]) == [entity_bean_stereo])]
        [genEntityBeanDD([MClass])]
            [end if]
            [if (getStereotype([MClass]) == [session_bean_stereo])]
        [genSessionBeanDD([MClass])]
            [end if]
        [end loop]
    [end loop]
    [loop(MPackage->MClass Where [MClass:marked])]
        [if (getStereotype([MClass]) == [entity_bean_stereo])]
        [genEntityBeanDD([MClass])]
        [end if]
        [if (getStereotype([MClass]) == [session_bean_stereo])]
        [genSessionBeanDD([MClass])]
        [end if]
    [end loop]
    [end if]
    </enterprise-beans>
    
    
    <!--                                       -->
    <!-- section for security and transactions -->
    <!--                                       -->
    <assembly-descriptor>
    [if (! [MPackage:marked])]
    [loop(Instances->MPackage([MPackage:descendants]) As SubPack)]
        [loop(SubPack->MClass)]
            [if (getStereotype([MClass]) == [entity_bean_stereo] || getStereotype([MClass]) == [session_bean_stereo])]
    [genTransactionDescriptor([MClass])]
            [end if]
        [end loop]
    [end loop]
    [loop(MPackage->MClass)]
        [if (getStereotype([MClass]) == [entity_bean_stereo] || getStereotype([MClass]) == [session_bean_stereo])]
    [genTransactionDescriptor([MClass])]
        [end if]
    [end loop]
    [else]
    [loop(Instances->MPackage([MPackage:descendants]) As SubPack)]
        [loop(SubPack->MClass Where [MClass:marked])]
            [if (getStereotype([MClass]) == [entity_bean_stereo] || getStereotype([MClass]) == [session_bean_stereo])]
    [genTransactionDescriptor([MClass])]
            [end if]
        [end loop]
    [end loop]
    [loop(MPackage->MClass Where [MClass:marked])]
        [if (getStereotype([MClass]) == [entity_bean_stereo] || getStereotype([MClass]) == [session_bean_stereo])]
    [genTransactionDescriptor([MClass])]
        [end if]
    [end loop]
    [end if]
    </assembly-descriptor>
    
    
    <!--                                        -->
    <!-- section for client jars                -->
    <!--                                        -->
    <ejb-client-jar>
    </ejb-client-jar>
</ejb-jar>
end template


// Generates information for a EntityBean
template genEntityBeanDD(MClass)
<entity>
    [genDDDescription([MClass])]
    <display-name>[MClass.name][display_name_suffix]</display-name>
    <small-icon></small-icon>
    <large-icon></large-icon>
    <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
    <home>[MClass:package_name].[MClass.name][home_name_suffix]</home>
    <remote>[MClass:package_name].[MClass.name][remote_name_suffix]</remote>
    <ejb-class>[MClass:package_name].[MClass.name][bean_name_suffix]</ejb-class>
    <persistence-type>[MClass:persistence]</persistence-type>
    [if ([MClass:gen_pk_class] == "True")]
    <prim-key-class>[MClass:package_name].[MClass:pk_class]</prim-key-class>
    [else] [// The fully qualified name is needed: e.g. java.lang.Integer ]
    <prim-key-class>java.lang.[MClass:pk_class]</prim-key-class>
    [end if]
    [if ([MClass:persistence] == "Container" && [MClass:gen_pk_class] != "True")] 
    <primkey-field>[MClass:pk_var_name]</primkey-field>
    [end if]
    <reentrant>[MClass:reentrant]</reentrant>
    [loop(MClass->MAttribute Where [MAttribute:cmp] == "True")]
    <cmp-field>
        [genDDDescription([MAttribute])]
        <field-name>[MAttribute.name]</field-name>
    </cmp-field>
    [end loop]
    [genReferencesDD([MClass])]
</entity>
end template


template genSessionBeanDD(MClass)
<session>
    [genDDDescription([MClass])]
    <display-name>[MClass.name][display_name_suffix]</display-name>
    <small-icon></small-icon>
    <large-icon></large-icon>
    <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
    <home>[MClass:package_name].[MClass.name][home_name_suffix]</home>
    <remote>[MClass:package_name].[MClass.name][remote_name_suffix]</remote>
    <ejb-class>[MClass:package_name].[MClass.name][bean_name_suffix]</ejb-class>
    <session-type>[MClass:session_type]</session-type>
    <transaction-type>[MClass:transaction_type]</transaction-type>
    [genReferencesDD([MClass])]
</session>
end template


// Generates a reference to another Enterprise Bean
proc genReferencesDD(MClass)
    local result = "";
    
    loop(MClass->Role As FromRole->MAssociation->MAssociationEnd As ToRole->MClass As Partner Where [FromRole.id] != [ToRole.id] && ([Partner.stereotype] == [entity_bean_stereo] || [Partner.stereotype] == [session_bean_stereo]))
        if (checkNavigability([FromRole], [ToRole]) == "True")
            [result] = [result] doEjbRef([MClass], [Partner], [MAssociation]);
        end if
    end loop
    loop(MClass->Role As FromRole->MAssociation->MAssociationEnd As ToRole->MClass As Partner Where [FromRole.id] != [ToRole.id] && [Partner.stereotype] == [datasource_stereo])
        [result] = [result] doDataSourceRef([Partner], [MAssociation]);
    end loop
    return [result];
end proc


// Generates a reference to another Enterprise Bean.
template doEjbRef(MClass As Source, MClass As Target, MAssociation)
<ejb-ref>
    [genDDDescription([MAssociation])]
    <ejb-ref-name>ejb/[Target.name][jndi_name_suffix]</ejb-ref-name>
    <ejb-ref-type>[if(getStereotype([Target]) == [entity_bean_stereo])]Entity[end if][if(getStereotype([Target]) == [session_bean_stereo])]Session[end if]</ejb-ref-type>
    <home>[Target:package_name].[Target.name][home_name_suffix]</home>
    <remote>[Target:package_name].[Target.name][remote_name_suffix]</remote>
    [if (hasSameToplevel([Source], [Target]))]
    <ejb-link>[Target.name][ejbjar_name_suffix]</ejb-link>
    [end if]
</ejb-ref>
end template


// Generates a reference to an external Database resource
template doDataSourceRef(MClass, MAssociation)
<resource-ref>
    [genDDDescription([MAssociation])]\
    <res-ref-name>jdbc/[MClass.name][jndi_name_suffix]</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>[getResourceAuthentication([MAssociation])]</res-auth>
</resource-ref>
end template

// Generates for every Class with Container-managed
// transaction demarcation a default transaction scope.
template genTransactionDescriptor(MClass)
    <container-transaction>
    [if (getStereotype([MClass]) == [session_bean_stereo])]
        <method>
            <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
            <method-intf>Remote</method-intf>
            <method-name>*</method-name>
        </method>
        <trans-attribute>RequiresNew</trans-attribute>
    [else]
        <method>
            <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
            <method-intf>Remote</method-intf>
            <method-name>*</method-name>
        </method>
        [loop(Instances->MOperation([MClass:create_methods]))]
        <method>
            <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
            <method-intf>Home</method-intf>
            <method-name>[MOperation.name]</method-name>
        </method>
        [end loop]
        [loop(Instances->MOperation([MClass:find_methods]))]
        <method>
            <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
            <method-intf>Home</method-intf>
            <method-name>[MOperation.name]</method-name>
        </method>
        [end loop]
        <method>
            <ejb-name>[MClass.name][ejbjar_name_suffix]</ejb-name>
            <method-intf>Home</method-intf>
            <method-name>findByPrimaryKey</method-name>
        </method>
        <trans-attribute>Mandatory</trans-attribute>
    [end if]
    </container-transaction>
end template