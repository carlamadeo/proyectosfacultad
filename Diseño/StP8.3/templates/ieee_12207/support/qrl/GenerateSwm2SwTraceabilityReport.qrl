
#include "val/qrl/include/table.inc"
#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"

  const int width_1 = 450;
  const int width_2 = 450;
  const int width_3 = 325;
  const int width_4 = 275;
  const int width_5 = 450;

  const string coltitle1 = "Use Case";
  const string coltitle2 = "Scenario";
  const string coltitle3 = "Requirement Table";
  const string coltitle4 = "Requirement ID";
  const string coltitle5 = "Short Description";

  struct paragraph_info
    {
      string document;
      string obj_ids;
    };


void
main ()
{
  print_message ("Start Report Generation");

  format ("ValidatorDocuments.rtf");

  string q = "node[UmlUseCase && node_refs] sort by name";

  list nodelist;
  node nodevar;
  list scenariolist;
  node scenario;

  int i, j;
  int count1, count2;

  string caption = "Requirements Model to Software Requirements Traceability Table";

  paragraph ("Heading 3");
  print ("Requirements Traceability from Software Model");


  nodelist = list_select(q);
  count1 = list_count(nodelist);

  InitializeTable();

  for (i=0;i<count1;i++)
    {
      nodevar = list_get(nodelist,i);
      MakeOneComponent(nodevar.name, "", nodevar.id);

      scenariolist = GetScenarioList(nodevar.name);
      count2 = list_count(scenariolist);
      for (j=0;j<count2;j++)
        {
          scenario = list_get(scenariolist, j);
          MakeOneComponent(nodevar.name, scenario.name, scenario.id);
        }
    }

  End_Table();

  print_table("usecasetraceability", caption);

  print_message ("Use Case Traceability Table Printed");
}


void
MakeOneComponent(string usecasename, string scenarioname, int id)
{
  string c1,c2,c3,c4,c5;
  string reqname;

  item itemvar;
  node nodevar;

  int i,count;

  string q1 = "item[REQAnalysisAssignmentItem && obj_id == ${id} ]";

  list itemlist = list_select(q1);

  count = list_count(itemlist);


  if (count == 0)
    {
      c1 = usecasename;
      c2 = scenarioname;
      c3 = "unspecified";
      c4 = "unspecified";
      c5 = "unspecified";

      PrintTableRow(c1, c2, c3, c4, c5);
      return;
    }

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist,i);

      reqname = GetItem("REQAnalysisAssignmentItem", itemvar.obj_id);
      nodevar = GetRequirementName(reqname);

      c1 = usecasename;
      c2 = scenarioname;
      c4 = reqname;

      if (nodevar != NULL)
        {
          c3 = GetTableName(nodevar.id);
          c5 = GetItem("REQInformalNameItem", nodevar.id);
        }
      else
        {
          c3 = "unspecified";
          c5 = "unspecified";
        }

      PrintTableRow(c1, c2, c3, c4, c5);
    }
}


node
GetRequirementName(string reqname)
{
  string q = "node[REQRequirement && node_refs && name == '${reqname}' ]";

  node nodevar = find_by_query(q);

  return (nodevar);


}

string
GetTableName(int id)
{
  string q = "file [REQTable && node_refs[node [${id}] ] ]";
  file filevar = find_by_query(q);

  return (filevar.name);
}



string
GetItem(string typename, int id)
{
   string q = "item[${typename} && obj_id==${id}]";

   item itemvar = find_by_query (q);

   if (itemvar == NULL)
     return ("unspecified");
   else
     {
       if (itemvar.value == "")
         return ("unspecified");
       else
         return (itemvar.value);
     }
}

void
PrintTableRow( string c1, string c2, string c3, string c4, string c5 )
{

      Begin_Row();

      Make_Cell(width_1, NULL, NULL, NULL, NULL, NULL, c1 );
      Make_Cell(width_2, NULL, NULL, NULL, NULL, NULL, c2 );
      Make_Cell(width_3, NULL, NULL, NULL, NULL, NULL, c3 );
      Make_Cell(width_4, NULL, NULL, NULL, NULL, NULL, c4 );
      Make_Cell(width_5, NULL, NULL, NULL, NULL, NULL, c5 );

      End_Row();

}



void 
InitializeTable()
{


   table_caption_placement_set(Top);
   table_width_set(6.5);

   table_caption_paragraph_format_set ("TableTitle");
   table_cell_bold_paragraph_format_set ("CellBody");
   table_cell_paragraph_format_set ("CellBodyleft");


   // create title bar

   Begin_Table(5);

   Begin_Row();

   Make_Cell(width_1, NULL, "Shade0", NULL, NULL, NULL, coltitle1);
   Make_Cell(width_2, NULL, "Shade0", NULL, NULL, NULL, coltitle2);
   Make_Cell(width_3, NULL, "Shade0", NULL, NULL, NULL, coltitle3);
   Make_Cell(width_4, NULL, "Shade0", NULL, NULL, NULL, coltitle4);
   Make_Cell(width_5, NULL, "Shade0", NULL, NULL, NULL, coltitle5);

   End_Row();

}




