

void 
main ()
{

  print_message ("Generating Data Type Report"); 


  format ("ValidatorDocuments.rtf");

  PrintIntegerTypes();
  PrintRealTypes();
  PrintStringTypes();

}


void
PrintIntegerTypes()

{
  string q1="node[ttesttype && node_refs && items[tdatatypeclass " +
            " && value=='integer']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  print_message ("    Printing Integer DataTypes");
  paragraph ("Heading 3");
  print ("Integer Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);


      paragraph ("Heading 4");
      print (nodevar.name);

      PrintMinimumValue(nodevar.id);
      PrintMaximumValue(nodevar.id);
      PrintResolutionValue(nodevar.id);
      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);

    }

}



void
PrintRealTypes()

{
  string q1="node[ttesttype&& node_refs&& items[tdatatypeclass " +
            " && value=='real']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  print_message ("    Printing Real DataTypes");
  paragraph ("Heading 3");
  print ("Real Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);

      paragraph ("Heading 4");
      print (nodevar.name);
      PrintMinimumValue(nodevar.id);
      PrintMaximumValue(nodevar.id);
      PrintResolutionValue(nodevar.id);
      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);

    }

}




void
PrintStringTypes()

{
  string q1="node[ttesttype&& node_refs&& items[tdatatypeclass " +
            " && value=='string']] sort by name";
  list nodelist;
  node nodevar;
  int i,count;

  print_message ("    Printing String DataTypes");
  paragraph ("Heading 3");
  print ("String Data Types");

  nodelist = list_select(q1);

  count = list_count(nodelist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);

      paragraph ("Heading 4");
      print (nodevar.name);

      PrintTestValues(nodevar.id);
      PrintInvalidSubdomain(nodevar.id);

    }

}


void
PrintMinimumValue(int id)
{
  string query = "item[tminimumvalue && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Paragraph");
      print("Minimum Value:\t" + itemvar.value);
    }
}

void
PrintMaximumValue(int id)
{
  string query = "item[tmaximumvalue && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Paragraph");
      print("Maximum Value:\t" + itemvar.value);
    }

}

void
PrintResolutionValue(int id)
{
  string query = "item[tresolution && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Paragraph");
      print("Resolution Value:\t" + itemvar.value);
    }

}

void
PrintTestValues(int id)
{
  string query = "item[ttestvalue && obj_id==${id}]";
  item itemvar;
  list itemlist;
  int i,count,num;

  itemlist = list_select(query);

  count = list_count(itemlist);

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist,i);
      num=i+1;
      paragraph("Paragraph");
      print ("Value " + num + ":\t" + itemvar.value);

    }

}

void
PrintInvalidSubdomain(int id)
{
  string query = "item[tinvalidsubdomain && obj_id==${id}]";
  item itemvar;

  itemvar = find_by_query(query);

  if (itemvar != NULL)
    {
      paragraph("Paragraph");
      paragraph("Paragraph");
      print("Invalid Subdomain:\t" + itemvar.value);
    }

}



void
GetData ( int actorid, string actorname)
{
  int i,count;
  note notevar;
  list TNote, notelist;
  item iv1, iv2, iv3, iv4, iv5;
  string cell2, cell3, cell4;

  string query = "note [TestDataItem && obj_id == ${actorid}]";
  string q1 = "item [TDataItemName && note_id == ${notevar.id}]";
  string q2 = "item [TDataTypeName && note_id == ${notevar.id}]";
  string q3 = "item [TDataType && note_id == ${notevar.id}]";
  string q4 = "item [TFixedValue && note_id == ${notevar.id}]";
  string q5 = "item [TExhaustiveTest && note_id == ${notevar.id}]";

  notelist = list_select(query);
  TNote = SortBySequenceNumber(notelist, actorid);

  count = list_count(TNote);
  if (count == 0)
    return;
}



