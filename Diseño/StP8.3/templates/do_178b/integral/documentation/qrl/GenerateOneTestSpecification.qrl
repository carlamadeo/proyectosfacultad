external string use_case_name;
external string DocumentFormat;
external string RequirementsTools;

#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/table.inc"
#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/GenerateTestCaseDataForUML.inc"

  list ScenarioList;
  list TESTCASELIST;
  int TESTCASELISTCOUNT;

  string OUTPUTPATH = current_projdir() + current_system() + "/test_files/";
  string COMMANDDIR = OUTPUTPATH + "/ORACLES/";

  string OUTPUTDIR;

//  const string SEPARATOR = "#";
//  const string SEPARATOR2 = "@";


  const int width_1 = 550;
  const int width_2 = 250;
  const int width_3 = 250;
  const int width_4 = 250;
  const int width_5 = 550;

  set ACTORSET;

void 
main ()
{

  format ("ValidatorDocuments." + DocumentFormat);

  string test_unit_id;

  string filetext;

  string path;
  string inputfile;

  ACTORSET = GetActors(use_case_name);

  test_unit_id = Get_T_test_unit_id(use_case_name, "");

  ScenarioList = GetScenarioList(use_case_name);


  OUTPUTDIR = OUTPUTPATH + test_unit_id;

  path = OUTPUTDIR + "/UseCaseTestScripts";
  inputfile = path + "/testcases.rpt";

  if (!CheckForSDF(OUTPUTDIR, "TDDB"))
    {
      message ("TDDB for " + test_unit_id + " does not exist.");
      return;
    }


  FormatTestCaseData(test_unit_id);

  if (CheckForSDF(path, "testcases.rpt"))
     filetext = read_file (inputfile);
  else
    {
      message ("testcases.rpt for " + test_unit_id + " does not exist.");
      return;
    }

  TESTCASELIST = string_to_list(filetext, "\n");
  TESTCASELISTCOUNT = list_count (TESTCASELIST);


  message ("");
  message ("");
  message ("Generating Test Specification Document for Use Case: " + use_case_name); 
  message ("");


  PrintTitlePage(use_case_name);

  if (RequirementsTools == "Validator")
    {
      message ("  Generating Requirements Traceability"); 
      PrintRequirementsPage(use_case_name);
    }
  else if (RequirementsTools == "DOORS")
    {
      // Section 1 Requirements Traceability to DOORS
      message ("  Generating Requirements Traceability to DOORS"); 
      PrintDOORSRequirementsPage(use_case_name);
    }

  message ("  Printing Metrics");
  PrintMetrics(use_case_name);



  message ("  Printing Test Cases");
  PrintScenarioTestCases(use_case_name);


}



void
PrintDOORSRequirementsPage (string use_case_name)
{
  string test_unit_id;
  int j, count2, count;
  node scenario;
  node nodevar;
  string query = "node[UmlUseCase && name=='${use_case_name}']";

  paragraph ("Sec1");
  print ("Requirements Traceability");

  nodevar = find_by_query(query);

  paragraph ("Sec2");
  print ("Use Case - " + use_case_name );

  count = TESTCASELISTCOUNT;

  ListDOORSRequirements(nodevar.id, count);


  count2 = list_count (ScenarioList);
  for (j=0;j<count2;j=j+1)
    {
      scenario = list_get(ScenarioList,j);

      paragraph ("Sec2");
      print ("Scenario - " + scenario.name );

      count = GetTestCaseCount(scenario.name);

      ListDOORSRequirements( scenario.id, count);
    }
}


void
ListDOORSRequirements(int id, int tccount)
{

  string query = "item[UniqueID && ${id} == obj_id]";

  item itemvar;


  itemvar = find_by_query(query);


  paragraph("description");
  print ( "There are " + tccount + " test cases that trace to the " );
  print ( "following DOORS requirement id " + itemvar.value); 

}



void
PrintRequirementsPage (string use_case_name)
{
  string test_unit_id;
  int j, count2, count;
  node scenario;
  node nodevar;
  string query = "node[UmlUseCase && name=='${use_case_name}']";

  paragraph ("Sec1");
  print ("Requirements Traceability");

  nodevar = find_by_query(query);

  paragraph ("Sec2");
  print ("Use Case - " + use_case_name );

  count = TESTCASELISTCOUNT;

  ListRequirements( "Use Case", nodevar.id, use_case_name, count);


  count2 = list_count (ScenarioList);
  for (j=0;j<count2;j=j+1)
    {
      scenario = list_get(ScenarioList,j);

      paragraph ("Sec2");
      print ("Scenario - " + scenario.name );

      count = GetTestCaseCount(scenario.name);

      ListRequirements( "Scenario", scenario.id, scenario.name, count);
    }
}


void
ListRequirements(string rqttype, int id, string name, int tccount)
{

  string query;
  int i,count;
  item itemvar;
  list itemlist;
  string rqts="";
  string ReqType="";

  query = "item[(REQAnalysisAssignmentItem ||
                 REQDesignAssignmentItem || 
                 REQImplementationAssignmentItem || 
                 REQTestAssignmentItem) && ${id} == obj_id]";



  itemlist = list_select(query);

  count = list_count (itemlist);

  paragraph("description");
  print ( rqttype + " " + name + " has " + tccount);
  print ( " test cases that trace to the following " + count + " requirement(s)" ); 

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist, i);

      if (i==count-1)
         print ("and ");

      print( itemvar.value );
 
      if (i<count-1)
         print (", ");
      else
         print (".");

    }


}


int
GetTestCaseCount(string name)
{
  int i,count, scenariocount;
  string testcase;
  list textlist;

  string  action, exercises, testunitid;
  int testcases = 0;

  count = TESTCASELISTCOUNT;

  for (i=0;i<count;i++)
    {

      testcase = list_get(TESTCASELIST,i);

      textlist = string_to_list (testcase, " ");

      action = list_get(textlist, 0);

      if (action == name)
        ++testcases;
    }
  return (testcases);

}


void
PrintMetrics(string use_case_name)
{

   paragraph ("Sec1");
   print ("Use Case Metrics");

   UseCaseMetrics( use_case_name);


   paragraph ("Sec1");
   print ("Scenario Metrics");

   ScenarioMetrics();

}


void
UseCaseMetrics(string use_case_name)
{

   int totaltestcases = TESTCASELISTCOUNT;

   paragraph ("Sec2");
   print ("Number of Test Cases");
   PrintTestCaseActionsMetric();

//   paragraph ("Sec2");
//   print ("Test Case Generation Time");
//   PrintUCTestCaseGenerationMetric();

   paragraph ("Sec2");
   print ("Predicted Test Case Execution Time");
   PrintUCTestExecutionTime(totaltestcases);

   paragraph ("Sec2");
   print ("Predicted Test Case Evaluation Time");
   PrintUCTestEvaluationTime(totaltestcases);

}



void
PrintTestCaseActionsMetric()
{
  int i,count, scenariocount;
  string testcase;
  list textlist;
  list actiondata;
  string  action, exercises, testunitid;
  int goodcount = 0;
  int badcount = 0;

  scenariocount = list_count (ScenarioList);

  string path, inputfile, filetext;

  string testcasedata;
  list testcaseinfo;
  
  path = OUTPUTDIR + "/UseCaseTestScripts";


  count = TESTCASELISTCOUNT;

  for (i=0;i<count;i++)
    {
      testcasedata = list_get(TESTCASELIST,i);

      testcaseinfo = string_to_list (testcasedata, " ");

      testcase = list_get(testcaseinfo,1);
      inputfile = path + "/" + testcase;

      if (CheckForSDF(path, testcase))
         filetext = read_file (inputfile);
      else
         {
           message (testcase + " does not exist.");
           return;
         }

      textlist = string_to_list(filetext,"\n");



      actiondata = string_to_list ( list_get(textlist,0), SEPARATOR);
      action = list_get(actiondata, 0);

      exercises = list_get(actiondata, 1);
      testunitid = list_get(actiondata, 2);

      if (exercises == "GOOD")
         ++goodcount;
      else
         ++badcount;
    }

  paragraph ("testmetrics");
  print ("The Use Case contains \t" + scenariocount + "\tScenario(s)");


  paragraph ("testmetrics");
  paragraph ("testmetrics");
  print ("Test Cases that Exercise the Use Case\t" + goodcount + "\tTest Cases");
  paragraph ("testmetrics");
  print ("Test Cases that Do Not Exercise the Use Case\t" + badcount + "\tTest Cases");

  paragraph ("testmetricsB");
  print ("Total Test Cases\t" + count + "\tTest Cases");


}



void
PrintUCTestExecutionTime(int totaltestcases)
{
  int i,count;
  node scenario;

  string q1 = "item [OperationDuration && obj_id ==${scenario.id}]";
  string q2 = "item [TestDuration && obj_id ==${scenario.id}]";
  string q3 = "item [TimeUnit && obj_id ==${scenario.id}]";

  item itemvar1;
  float value1 = 0.0;
  item itemvar2, itemvar3;
  float value2 = 0.0;
  float screeningtime = 0.0;
  float alltime = 0.0;
  float ave = 0.0;
  string timeunit;

  list timelist;
  timelist = list_create("all", 0);

  count = list_count (ScenarioList);
  for (i=0;i<count;i++)
    {
      scenario = list_get(ScenarioList,i);

      itemvar1 = find_by_query(q1);
      itemvar2 = find_by_query(q2);
      itemvar3 = find_by_query(q3);

      if (itemvar1 != NULL)
        value1 = to_float(itemvar1.value);
      else
        value1 = 0.0;

      if (itemvar2 != NULL)
        value2 = value2 + to_float(itemvar2.value);
      else
        value2 = value2 + value1*2;

      if (itemvar3 != NULL)
        timeunit = itemvar3.value;
      else
        timeunit = "UNKNOWN";

      screeningtime = screeningtime + (3 * value2);
      alltime = alltime + (totaltestcases * value2);
    }

   ave = value2/(count);

   timelist = simplifytime(ave, timeunit);
   paragraph("testmetrics");
   printf ("Average Test Case:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

   timelist = simplifytime(screeningtime, timeunit);
   paragraph("testmetrics");
   printf ("Screening Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

   timelist = simplifytime(alltime, timeunit);
   paragraph("testmetrics");
   printf ("All Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));


}

list
simplifytime(float value, string time)
{


  list tmp;
  
  tmp = list_create("all",0);

  if (time == "hundredth_seconds" && value >= 10)
     {
       value = value / 10;
       time = "tenth_seconds";
     }


  if (time == "tenth_seconds" && value >= 10)
     {
       value = value / 10;
       time = "seconds";
     }


  if (time == "seconds" && value >= 60)
     {
       value = value / 60;
       time = "minutes";
     }


  if (time == "minutes"&& value >= 60)
     {
       value = value / 60;
       time = "hours";
     }

  list_append(tmp, value);
  list_append(tmp, time);



  return (tmp);

}



void
PrintUCTestEvaluationTime(int totaltestcases)
{
  int i,count;
  node scenario;

  string q1 = "item [OperationDuration && obj_id ==${scenario.id}]";
  string q2 = "item [EvaluationTime && obj_id ==${scenario.id}]";
  string q3 = "item [TimeUnit && obj_id ==${scenario.id}]";

  item itemvar1;
  float value1;
  item itemvar2, itemvar3;
  float value2 = 0.0;
  float screeningtime = 0.0;
  float alltime = 0.0;
  float ave = 0.0;
  string timeunit;


  list timelist;
  timelist = list_create("all",0);


  count = list_count (ScenarioList);
  for (i=0;i<count;i++)
    {
      scenario = list_get(ScenarioList,i);

      itemvar1 = find_by_query(q1);
      itemvar2 = find_by_query(q2);
      itemvar3 = find_by_query(q3);

      if (itemvar1 != NULL)
        value1 = to_float(itemvar1.value);
      else
        value1 = 0.0;

      if (itemvar2 != NULL)
        value2 = value2 + to_float(itemvar2.value);
      else 
        value2 = value2 + value1*2;

      if (itemvar3 != NULL)
        timeunit = itemvar3.value;
      else
        timeunit = "UNKNOWN";

      screeningtime = screeningtime + (3 * value2);
      alltime = alltime + (totaltestcases * value2);
    }

   ave = value2/(count);

   timelist = simplifytime(ave, timeunit);
   paragraph("testmetrics");
   printf ("Average Test Case:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

   timelist = simplifytime(screeningtime, timeunit);
   paragraph("testmetrics");
   printf ("Screening Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

   timelist = simplifytime(alltime, timeunit);
   paragraph("testmetrics");
   printf ("All Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));


}


void
ScenarioMetrics()
{
  int i,count;
  node scenario;
  float executiontime;
  int totaltestcases;

  count = list_count (ScenarioList);
  for (i=0;i<count;i++)
    {
      scenario = list_get(ScenarioList,i);

      paragraph("Sec2");
      print ("Scenario: " + scenario.name);

      paragraph("Sec3");
      print ("Number of Test Cases");
      totaltestcases = PrintScenarioMetrics(scenario.name);

      paragraph("Sec3");
      print ("Normal Execution Time");
      executiontime = PrintScenarioExecutionMetric(scenario.id);

      paragraph("Sec3");
      print ("Predicted Test Test Setup Time");
      PrintScenarioTestSetupMetric(scenario.id);


      paragraph("Sec3");
      print ("Predicted Test Case Execution Time");
      PrintScenarioTestDurationMetric(totaltestcases, scenario.id, executiontime);

      paragraph("Sec3");
      print ("Predicted Test Case Evaluation Time");
      PrintScenarioEvaluationMetric(totaltestcases, scenario.id, executiontime);
    }
}

int
PrintScenarioMetrics(string scenario)
{
  int i,count;
  string testcase;
  list textlist;
  list actiondata;
  string  action, exercises, testunitid;
  int goodcount = 0;
  int badcount = 0;
  int totaltestcases = 0;



  string path, inputfile, filetext;
  string testcasedata;
  list testcaseinfo;
  
  path = OUTPUTDIR + "/UseCaseTestScripts";


  count = TESTCASELISTCOUNT;

  for (i=0;i<count;i++)
    {
      testcasedata = list_get(TESTCASELIST,i);
      testcaseinfo = string_to_list (testcasedata, " ");

      testcase = list_get(testcaseinfo,1);
      inputfile = path + "/" + testcase;



      if (CheckForSDF(path, testcase))
         filetext = read_file (inputfile);
      else
         {
           message (testcase + " does not exist.");
           return;
         }

      textlist = string_to_list(filetext,"\n");



      actiondata = string_to_list ( list_get(textlist,0), SEPARATOR);
      action = list_get(actiondata, 0);

      exercises = list_get(actiondata, 1);
      testunitid = list_get(actiondata, 2);

      if (action == scenario)
         {
            if (exercises == "GOOD")
               ++goodcount;
            else
               ++badcount;
            ++totaltestcases;
         }
    }

  paragraph ("testmetrics");
  print ("Test Cases that Exercise the Scenario\t" + goodcount + "\tTest Cases");
  paragraph ("testmetrics");
  print ("Test Cases that Do Not Exercise the Scenario\t" + badcount + "\tTest Cases");
  paragraph ("testmetricsB");
  print ("Total Test Cases\t" + totaltestcases + "\tTest Cases");

  return(totaltestcases);

}


void
PrintUCTestCaseGenerationMetric()
{
   int ExtractModel = 0;
   int VerifySDF = 0;
   int DesignTestCases = 0;
   int ElapsedTime;
   string tmp;
   list tmplist;


   tmp = read_file(OUTPUTDIR + "/measures_ExtractModel");
   tmplist = string_to_list(tmp, "\n");
   tmp = list_get(tmplist, 0);
   ExtractModel = to_int (tmp);

   tmp = read_file(OUTPUTDIR + "/measures_VerifySDF");
   tmplist = string_to_list(tmp, "\n");
   tmp = list_get(tmplist, 0);
   VerifySDF = to_int (tmp);

   tmp = read_file(OUTPUTDIR + "/measures_DesignTestCases");
   tmplist = string_to_list(tmp, "\n");
   tmp = list_get(tmplist, 0);
   DesignTestCases = to_int (tmp);

   ElapsedTime = ExtractModel + VerifySDF + DesignTestCases;

   paragraph("testmetrics");
   print ("Elapsed Time to Extract Test Information:\t" + ExtractModel + "\tseconds");

   paragraph("testmetrics");
   print ("Elapsed Time to Verify Test Information:\t" + VerifySDF + "\tseconds");

   paragraph("testmetrics");
   print ("Elapsed Time to Design Test Cases:\t" + DesignTestCases + "\tseconds");

   paragraph("testmetricsB");
   print ("Total Elapsed Time to Create Test Cases:\t" + ElapsedTime + "\tseconds");


}


float
PrintScenarioExecutionMetric( int id)
{

  string q1 = "item [OperationDuration && obj_id ==${id}]";
  string q3 = "item [TimeUnit && obj_id ==${id}]";

  item itemvar1, itemvar3;
  float value1;
  string timeunit;

  list timelist;
  timelist = list_create("all",0);

  itemvar1 = find_by_query(q1);
  itemvar3 = find_by_query(q3);



  if (itemvar1 != NULL)
    value1 = to_float(itemvar1.value);
  else
    value1 = 0.0;

  if (itemvar3 != NULL)
    timeunit = itemvar3.value;
  else
    timeunit = "UNKNOWN";

  timelist = simplifytime(value1, timeunit);
  paragraph("testmetrics");
  printf ("Required Execution Time for the Scenario:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));


  return (value1);
}

void
PrintScenarioTestSetupMetric(int id)
{

  string q1 = "item [SetUpTime && obj_id ==${id}]";
  string q3 = "item [TimeUnit && obj_id ==${id}]";

  item itemvar1, itemvar3;
  float value1;
  string timeunit;

  list timelist;
  timelist = list_create("all",0);

  itemvar1 = find_by_query(q1);
  itemvar3 = find_by_query(q3);



  if (itemvar1 != NULL)
    value1 = to_float(itemvar1.value);
  else
    value1 = 0.0;

  if (itemvar3 != NULL)
    timeunit = itemvar3.value;
  else
    timeunit = "UNKNOWN";

  timelist = simplifytime(value1, timeunit);
  paragraph("testmetrics");
  printf ("Predicted Setup Time for the Scenario:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

}


void
PrintScenarioTestDurationMetric(int totaltestcases, int id, float executiontime)
{

  string q2 = "item [TestDuration && obj_id ==${id}]";
  string q3 = "item [TimeUnit && obj_id ==${id}]";

  list timelist;
  timelist = list_create("all",0);

  item itemvar2, itemvar3;
  float value2, screeningtime, alltime;
  string timeunit;

  itemvar2 = find_by_query(q2);
  itemvar3 = find_by_query(q3);



  if (itemvar2 != NULL)
    value2 = to_float(itemvar2.value);
  else
    value2 = executiontime*2;

  if (itemvar3 != NULL)
    timeunit = itemvar3.value;
  else
    timeunit = "UNKNOWN";

  screeningtime = 3 * value2;
  alltime = totaltestcases * value2;


  timelist = simplifytime(value2, timeunit);
  paragraph("testmetrics");
  printf ("Average Test Case:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

  timelist = simplifytime(screeningtime, timeunit);
  paragraph("testmetrics");
  printf ("Screening Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

  timelist = simplifytime(alltime, timeunit);
  paragraph("testmetrics");
  printf ("All Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

}




void
PrintScenarioEvaluationMetric(int totaltestcases, int id, float executiontime)
{

  string q2 = "item [EvaluationTime && obj_id ==${id}]";
  string q3 = "item [TimeUnit && obj_id ==${id}]";


  item itemvar2, itemvar3;
  float value2, screeningtime, alltime;
  string timeunit;


  list timelist;
  timelist = list_create("all",0);


  itemvar2 = find_by_query(q2);
  itemvar3 = find_by_query(q3);



  if (itemvar2 != NULL)
    value2 = to_float(itemvar2.value);
  else 
    value2 = executiontime*2;

  if (itemvar3 != NULL)
    timeunit = itemvar3.value;
  else
    timeunit = "UNKNOWN";

  screeningtime = 3 * value2;
  alltime = totaltestcases * value2;



  timelist = simplifytime(value2, timeunit);
  paragraph("testmetrics");
  printf ("Predicted Evaluation Time for the Average Test Case:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

  timelist = simplifytime(screeningtime, timeunit);
  paragraph("testmetrics");
  printf ("Predicted Evaluation Time for the Screening Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));

  timelist = simplifytime(alltime, timeunit);
  paragraph("testmetrics");
  printf ("Predicted Evaluation Time for all Test Cases:\t%.2f\t%s", list_get(timelist,0), list_get(timelist,1));


}

void
PrintScenarioTestCases(string use_case_name)
{
  int i,count;
  string testcase;
  list textlist;
  list actiondata;
  string  action, pastaction, exercises, testunitid;
  int testid=0;
  list validlist;
  list testcasesummary;
  int j,count2;
  boolean firstaction = False;

  validlist = list_create("string",0);

  string testcasedata;
  list testcaseinfo;

  count = TESTCASELISTCOUNT;

  firstaction = True;

  for (i=0;i<count;i++)
    {

     testcasedata = list_get(TESTCASELIST,i);

      testcaseinfo = string_to_list(testcasedata, " ");

      action = list_get(testcaseinfo, 0);
      testcase = list_get(testcaseinfo, 1);


      if (i==0)
         pastaction = action;

      if (pastaction != action)
        {
           PrintCases(validlist, pastaction, use_case_name);

           list_clear(validlist);
           firstaction = False;
        }


      list_append (validlist, testcase);

      pastaction = action;
    }

  PrintCases(validlist, action, use_case_name);

}



void
PrintCases(list validlist, string action, string use_case_name)
{
  int count2,j;
  int testid; 
  
   string testcase;

   paragraph ("Sec1");
   print ("Test Cases for Scenario: " + action );

   count2 = list_count(validlist);

   testid=0;
   for (j=0;j<count2;j++)
     {
       testcase = list_get(validlist,j);

       message ("    " + testcase);

       FormatTestCase (testcase , ++testid, use_case_name);
     }

}

void 
FormatTestCase (string testcase, int testid, string use_case_name)
{

  string st;
  int i,count;
  set probeset;
  list actiondata;
  string  action, exercises, testunitid, domaintype;
  int start = 0;
  probeset = set_create ("string");
  list tmpprobelist;
  list textlist;

  string path, inputfile, filetext;

  
  path = OUTPUTDIR + "/UseCaseTestScripts";
  inputfile = path + "/" + testcase;



  if (CheckForSDF(path, testcase))
     filetext = read_file (inputfile);
  else
     {
       message (testcase + " does not exist.");
       return;
     }

  textlist = string_to_list(filetext,"\n");

  actiondata = string_to_list ( list_get(textlist,0), SEPARATOR);
  action = list_get(actiondata, 0);
  exercises = list_get(actiondata, 1);
  testunitid = list_get(actiondata, 2);


  paragraph ("P1");
  print ("Test Case: " + testid + "\tTest Execution ID: " + testunitid);

  paragraph ("EXER");
  if (exercises == "INVALID" )
    {
      print ("Evaluates exception for scenario " + action);
      print ("\n( Steps or entries after \"Exception\" may not be executable )");
    }
  else
    {
     print ("Evaluates scenario " + action);
    }

  set_clear(probeset);
  start = 1;
  st = list_get(textlist,start);
  while (string_find (st, 0, "<P3>Probes:") == 0 )
    {
      tmpprobelist = string_to_list(st, " ");
      set_add (probeset, list_get(tmpprobelist, 2) + SEPARATOR +  list_get(tmpprobelist, 1)  );

      st = string_search_and_replace(st,"invalid", "Exception");
      st = string_search_and_replace(st,"valid ", "");
      paragraph ("P3");
      print ( string_search_and_replace (st, "<P3>", "" ) );

      ++start;
      st = list_get(textlist,start);
    }

  paragraph("EVAL");
  print ("Evaluation:\t____Pass\t_____Fail\t_____Skip\tDate:_____________\tInitial:_____________");
  paragraph("EVAL");
  print ("Comments: ");
  print ("___________________________________________________________________________");
  print ("___________________________________________________________________________");
  print ("___________________________________________________________________________");
  print ("____________________________________________________________________");
  print ("_________________");

  paragraph("EVAL");
  print ("================================================");
  print ("===============================================");


  FormatTestData (textlist, start, list_count(textlist), probeset, action, use_case_name);

}

void
FormatTestData(list textlist, int start, int count, set probeset, string action, string use_case_name)
{
  int i;
  string st;
  string probedata ="";
  list tmp;
  string probeline = "not_in_set";
  set actorset;
  string command;
  string printline, pg;
  boolean ExpectedOutput = False;
  boolean RegularLine = True;


  for (i=start; i<count; i++)
    {
       ExpectedOutput = False;
       RegularLine = True;
       st = list_get(textlist,i);

       if ( string_find (st, 0, "<P2>") == 0)
         {
           pg = "P2";
           printline =  ( string_search_and_replace (st, "<P2>", "" ) );
         }
       else if ( string_find (st, 0, "<P3>") == 0)
         {
           pg = "P3";
           printline =  ( string_search_and_replace (st, "<P3>", "" ) );
         }
       else if ( string_find (st, 0, "<IP4>") == 0)
         {
           pg = "P4";
           printline =  ( string_search_and_replace (st, "<IP4>", "" ) );
         }
       else if ( string_find (st, 0, "<OP4>") == 0)
         {
           pg = "P4";
           printline =  ( string_search_and_replace (st, "<OP4>", "" ) );
         }
       else if ( string_find (st, 0, "<P5>") == 0)
         {
           pg = "P5";
           printline =  ( string_search_and_replace (st, "<P5>", "" )  );
         }
       else if ( string_find (st, 0, "<DI>") == 0)
         {
           probeline = contains_probedata(st, probeset);

           if (probeline == "validprobe")
             {
               pg = "BP6";
               printline =  ( string_search_and_replace (st, "<DI>", "" )  );
             }
           else if (probeline == "invalidprobe")
             {
               pg = "BP6";
               printline =  ( string_search_and_replace (st, "<DI>", "" )  + " [ Exception: Invalid Data ]"  );
             }
           else
             {
               pg = "P6";
               printline =  ( string_search_and_replace (st, "<DI>", "" ) );
             }
         }
       else if ( string_find (st, 0, "<EVAL>") == 0)
         {
           pg = "EVAL";
           printline =  ( string_search_and_replace (st, "<EVAL>", "" )  );
         }
       else if (  string_find (st, 0, "<GR>") == 0)
         {
           command = string_search_and_replace (st, "<GR>", "" );
           PrintExpectedResults(command);
           ExpectedOutput = True;
           RegularLine = False;
         }
       else if ( string_find (st, 0, "<NO>") == 0)
         {
           pg = "EO1";
           printline =    ( string_search_and_replace (st, "<NO>", "" )  );
           ExpectedOutput = True;
         }
       else if ( string_find (st, 0, "<ER>") == 0)
         {
           command =   ( string_search_and_replace (st, "<ER>", "" )  );
           PrintFixedResults(command);
           ExpectedOutput = True;
           RegularLine = False;
         }


       if (ExpectedOutput && !RegularLine )
         {
           AddLines();
         }
       else if (ExpectedOutput && RegularLine )
         {
           paragraph (pg);
           print (printline);
           AddLines();
         }
       else if (!ExpectedOutput && RegularLine )
         {
           paragraph (pg);
           print (printline);
         }


    }


}





void
PrintExpectedResults(string command)
{
  string tmp;

  string sysdir = current_projdir() + current_system() + "/";

//
// Fix to remove ' from the expected result program - 5/11/98
// and to add /" in place of "
//
//
  tmp = string_search_and_replace (command, "\"", "@@@");
  command = string_search_and_replace (tmp, "@@@", "\\\"");
//
//

  system ("sh -c '" + COMMANDDIR + command +  " '  > " + sysdir + "output");

  if(write_file_access(sysdir + "output"))
    {
      paragraph ("EO1");
      print ("Expected Result");
      tmp = read_file(sysdir + "output");
      paragraph ("EO");
      print (tmp);
      system ("rm " + sysdir + "output");
    }
}



void
PrintFixedResults(string event_id)
{

  string query = "note [expectedoutput && obj_id == ${event_id}]";
  note notevar;

  notevar = find_by_query(query);

  paragraph ("EO1");
  print ("Expected Result");
  paragraph ("EO");
  print (notevar.desc);
}



string
contains_probedata(string st, set probeset)
{
  list st1, st2;
  string data;

  st1 = string_to_list(st, "<");
  st2 = string_to_list(list_get(st1, 1), ">");
  data = list_get(st2,0);



  if (set_is_member (probeset, data + SEPARATOR + "valid" ) )
    return ("validprobe");
  else if (set_is_member (probeset, data + SEPARATOR + "invalid" ) )
    return ("invalidprobe");
  else 
    return ("not_in_set");

}



string
EventName(string st)
{
  list st1, st2;
  string data;

  st1 = string_to_list(st, "<");
  st2 = string_to_list(list_get(st1, 1), ">");
  data = list_get(st2,0);

  return (data);

}




void
PrintTitlePage(string use_case_name)
{

  paragraph ("Title");
  print ("");
  paragraph ("BTitle");
  print ("Test Specification");
  paragraph ("BSubTitle");
  print ("for");
  paragraph ("BSubTitle");
  print ( "Use Case / Requirement" );
  paragraph ("BSubTitle");
  print ( "");
  paragraph ("BSubTitle");
  print ( use_case_name);

}



void
PrintSummaryTable(list summary, string caption, string scenario_name)
{
  int count,i;
  int num=0;
  float x,y;
  int increment = 0;

  count = list_count(summary);

  if (count == 0)
    return;

  paragraph ("Sec1");
  print ("Test Results Summary" );

  InitializeTable();


  for (i=0;i<count;i++)
    {
      Begin_Row();

      Make_Cell(width_1, NULL, NULL, NULL, NULL, NULL, to_string(++increment) );
      Make_Cell(width_2, NULL, NULL, NULL, NULL, NULL, " " );
      Make_Cell(width_3, NULL, NULL, NULL, NULL, NULL, " ");
      Make_Cell(width_4, NULL, NULL, NULL, NULL, NULL, " ");
      Make_Cell(width_5, NULL, NULL, NULL, NULL, NULL, list_get(summary,i) );

      End_Row();
    }

  End_Table();

  print_table(scenario_name, caption);

}




void 
InitializeTable()
{
    table_caption_placement_set(Top);
    table_width_set(6.5);

    table_caption_paragraph_format_set ("TableTitle");
    table_cell_bold_paragraph_format_set ("CellBody");
    table_cell_paragraph_format_set ("CellBody");


   // create title bar

   Begin_Table(5);


   Begin_Row();


   Make_Cell(width_1, NULL, "Shade0",
                      NULL, NULL, NULL, "Test Case");
   Make_Cell(width_2, NULL, "Shade0",
                      NULL, NULL, NULL, "Pass");
   Make_Cell(width_3, NULL, "Shade0",
                      NULL, NULL, NULL, "Fail");
   Make_Cell(width_4, NULL, "Shade0",
                      NULL, NULL, NULL, "Skip");
   Make_Cell(width_5, NULL, "Shade0",
                      NULL, NULL, NULL, "Test Execution ID");

   End_Row();


}


void
AddLines()
{

  paragraph("EVAL1");
  print ("Observed Results: ");
  print ("___________________________________________________________________________");
  print ("___________________________________________________________________________");
  print ("___________________________________________________________________________");
  print ("____________________________________________________________________");
}

