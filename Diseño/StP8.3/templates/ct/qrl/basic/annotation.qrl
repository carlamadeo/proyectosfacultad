////////////////////////////////////////////////////////////////////////////
//
// 	sccsid[] = %W% %Y% %D%
// 	StP/Core
// 	Confidential property of Aonix.
// 	Copyright (c) 1992-1997
// 	All rights reserved
//
//	print an object annotation
//
////////////////////////////////////////////////////////////////////////////
#include "qrl/include/annotation_formats.inc"

external string  objects = "";  
external_help = "Specify object id's for which annotations should be printed.";

script_help = "Print object annotations for the objects specified";


int
main()
{
    list   objs = string_to_list(objects, ", \n");
    int    i, id;

	if (list_count(objs) == 0)
    {
	message("Please specify one or more object id's.");
	return(1);
    }
    format(DefaultFormatFile);

    for (i = 0; i < list_count(objs); i++)
    {
	id = to_int(list_get(objs, i));
	printObject(id);
    }
    return(0);
}

void
printObject(int id)
{
    list   notes, items;
    int    i, j;
    note   note;
    item   item;

	printName(id);
    notes = list_select("note[obj_id == ${id}]");

    if (notes == NULL)
    {
		message("No notes found for object id: " + id);
		continue;
    }
    for (i = 0; i < list_count(notes); i++)
    {
		note = list_get(notes, i);

		// ECR4844
		// print only notes that are in the object annotation
		if (note.file_id != 0)
		{
			paragraph(Note1Format);
			print(note.type + ": " + note.name);
		
			items = list_select("item[note_id == ${note.id}]");

			if (items == NULL)
			{
				continue;
			}
			for (j = 0; j < list_count(items); j++)
			{
				item = list_get(items, j);

				paragraph(Item1Format);
				print(item.type + ": " + item.value);
			}
			paragraph(Description1Format);
			print(note.desc);
		}
	}
}

void
printName(int id)
{
    file    file;

	if ((file = find_by_query("file[${id}]")) != NULL)
    {
	printTypeAndName(file.type, file.name);
	return;
    }
    node    node;

    if ((node = find_by_query("node[${id}]")) != NULL)
    {
	printTypeAndName(node.type, node.name);
	return;
    }
    link    link;
    string  xname;                 
    node to_node, from_node;
    if ((link = find_by_query("link[${id}]")) != NULL)
    {
//ECR 4845 begin
        to_node = find_by_query("node[in_links[${id}]]");
        from_node = find_by_query("node[out_links[${id}]]");
        if((to_node != NULL) && (from_node != NULL))
        {
            printTypeAndName(link.type, link.name + " from " + from_node.type + " " + from_node.name + " to " + to_node.type + " " + to_node.name);
        }
        else
            printTypeAndName(link.type, link.name);
//ECR 4845 end
	return;
    }
    cntx    cntx;

    if ((cntx = find_by_query("cntx[${id}]")) != NULL)
    {
	printTypeAndName(cntx.type, cntx.name);
	return;
    }
    message("'" + id + "' is not a valid repository object id.");
}

void
printTypeAndName(string type, string name)
{
    paragraph(Object1Format);
    print(type + ": " + name);
}

