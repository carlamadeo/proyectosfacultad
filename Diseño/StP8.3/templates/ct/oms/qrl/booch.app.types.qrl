//
//      sccsid[] = %W% %Y% %D%
//      StP/Booch
//      StP/OO
//	StP Core
//      Confidential property of Interactive Development Environments, Inc.
//      Copyright (c) 1992-1996
//      All rights reserved
//

// externs from ct.inc:
// 	const string    FILE_NAME_SCOPE_SEPARATOR = "__";

#include	"rules/qrl/gor_object_instance.inc"


//
// DependentsFunc for: node Category
//

update_dependents
Category_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent node objects of type CategoryQualifier
    // Dependency name: Name
    //
    node	dep_CategoryQualifier;
    const	string	dep_CategoryQualifier_Name_query =
				"node[CategoryQualifier&name='${theBaseName}']";
    
    for_each_in_select(dep_CategoryQualifier_Name_query, dep_CategoryQualifier)
    {
	update_dependents_append(dependents, dep_CategoryQualifier, GOR_NM_DP_N);
    }


    //
    // Dependent node objects of type ObjectDiagCategoryScope
    // Dependency name: Name
    //
    node	dep_ObjectDiagCategoryScope;
    const	string	dep_ObjectDiagCategoryScope_Name_query =
				"node[ObjectDiagCategoryScope&name='${theBaseName}']";
    
    for_each_in_select(dep_ObjectDiagCategoryScope_Name_query, dep_ObjectDiagCategoryScope)
    {
	update_dependents_append(dependents, dep_ObjectDiagCategoryScope, GOR_NM_DP_N);
    }

    //
    // Dependent file objects of type BoochObjectDiagram
    // Dependency name: CategoryScenarios
    //
    file	dep_BoochObjectDiagram;
    const	string	dep_BoochObjectDiagram_CategoryScenarios_query =
				"file[BoochObjectDiagram&&(${namecond})]";
    string	namecond;

    namecond= "name$'" + theBaseName + FILE_NAME_SCOPE_SEPARATOR + "*'" +
		"||name$'" + "*" + FILE_NAME_SCOPE_SEPARATOR +
		    theBaseName + FILE_NAME_SCOPE_SEPARATOR + "*'";
    
    for_each_in_select(dep_BoochObjectDiagram_CategoryScenarios_query, dep_BoochObjectDiagram)
    {
	update_dependents_append(dependents, dep_BoochObjectDiagram, "CategoryScenarios");
    }


    return(dependents);
}

//
// Derive Attributes Function
// Source Type	  :	node Category
// Dependent Type :	BoochObjectDiagram
// Dependency Name:	CategoryScenarios
//

file
Category_BoochObjectDiagram_CategoryScenarios_derattrs(file theDep, node oldVal, node newVal)
{
    file	result = theDep;
    list	l = make_scope_chain_from_filename(theDep.name);
    int		i;
    string	c;
    string	res = "";

    // has the potential of allowing cat names to overwrite class names with 
    // same name in filename.
    // Could follow up the scope hierarchy in the file to see at
    // what level to really rename the category, but Booch says
    // that categories and classes shouldn't have the same name
    // and what am I to contradict Booch .....

    if (list_count(l) == 0)
    {
	list_append(l, oldVal.name);
    }

    for(i = 0; i < list_count(l); i++)
    {
	c = list_get(l, i);
	if (c == oldVal.name)
	{
	    c = newVal.name;
	}
	if (i == 0)
	    res = c;
	else
	    res = res + FILE_NAME_SCOPE_SEPARATOR + c;
    }

    res = create_new_file_in_sequence(res, theDep.type);

    result = file_name_set(result, res);

    return(result);
}



//
// DependentsFunc for: node ModuleSpec
//

update_dependents
ModuleSpec_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent item objects of type ClassModule
    // Dependency name: Name
    //
    item	dep_ClassModule;
    const	string	dep_ClassModule_Name_query =
				"item[ClassModule&value='${theBaseName}']";
    
    for_each_in_select(dep_ClassModule_Name_query, dep_ClassModule)
    {
	update_dependents_append(dependents, dep_ClassModule, GOR_NM_DP_N);
    }


    return(dependents);
}

//
// DependentsFunc for: node ModuleBody
//

update_dependents
ModuleBody_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent item objects of type ClassModule
    // Dependency name: Name
    //
    item	dep_ClassModule;
    const	string	dep_ClassModule_Name_query =
				"item[ClassModule&value='${theBaseName}']";
    
    for_each_in_select(dep_ClassModule_Name_query, dep_ClassModule)
    {
	update_dependents_append(dependents, dep_ClassModule, GOR_NM_DP_N);
    }


    return(dependents);
}

//
// DependentsFunc for: node ModuleSpecBody
//

update_dependents
ModuleSpecBody_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent item objects of type ClassModule
    // Dependency name: Name
    //
    item	dep_ClassModule;
    const	string	dep_ClassModule_Name_query =
				"item[ClassModule&value='${theBaseName}']";
    
    for_each_in_select(dep_ClassModule_Name_query, dep_ClassModule)
    {
	update_dependents_append(dependents, dep_ClassModule, GOR_NM_DP_N);
    }


    return(dependents);
}

//
// DependentsFunc for: node ModuleMain
//

update_dependents
ModuleMain_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent item objects of type ClassModule
    // Dependency name: Name
    //
    item	dep_ClassModule;
    const	string	dep_ClassModule_Name_query =
				"item[ClassModule&value='${theBaseName}']";
    
    for_each_in_select(dep_ClassModule_Name_query, dep_ClassModule)
    {
	update_dependents_append(dependents, dep_ClassModule, GOR_NM_DP_N);
    }


    return(dependents);
}


//
// DependentsFunc for: node Subsystem
//

update_dependents
Subsystem_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    string	bname_start = theBaseName + FILE_NAME_SCOPE_SEPARATOR + "*";
    

    //
    // Dependent file objects of type BoochModuleDiagram
    // Dependency name: SubsystemName
    //
    file	dep_BoochModuleDiagram;
    const	string	dep_BoochModuleDiagram_SubsystemName_query =
			    "file[BoochModuleDiagram&&name$'${bname_start}']";
    
    for_each_in_select(dep_BoochModuleDiagram_SubsystemName_query, dep_BoochModuleDiagram)
    {
	update_dependents_append(dependents, dep_BoochModuleDiagram, "SubsystemName");
    }


    return(dependents);
}


//
// Derive Attributes Function
// Source Type	  :	node Subsystem
// Dependent Type :	BoochModuleDiagram
// Dependency Name:	SubsystemName
//

file
Subsystem_BoochModuleDiagram_SubsystemName_derattrs(file theDep, node oldVal, node newVal)
{
    file	result = theDep;
    string	newname;

    newname = create_new_file_in_sequence(newVal.name, theDep.type);

    result = file_name_set(result, newname);

    return(result);
}

//
// DependentsFunc for: link UsingSupplier
//

update_dependents
UsingSupplier_dependents(link theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent node objects of type Using
    // Dependency name: UsingSupplier
    //
    node	dep_Using;
    const	string	dep_Using_UsingSupplier_query =
				    "node[Using&&${theBase.scope_node_id}]";
    
    for_each_in_select(dep_Using_UsingSupplier_query, dep_Using)
    {
	update_dependents_append(dependents, dep_Using, "UsingSupplier");
    }


    //
    // Dependent link objects of type UsingClient
    // Dependency name: UsingSupplier
    //
    link	dep_UsingClient;
    const	string	dep_UsingClient_UsingSupplier_query =
	    "link[UsingClient&scope_node_id=${theBase.scope_node_id}&from_node_id=${theBase.to_node_id}&to_node_id=${theBase.from_node_id}]";
    
    for_each_in_select(dep_UsingClient_UsingSupplier_query, dep_UsingClient)
    {
	update_dependents_append(dependents, dep_UsingClient, "UsingSupplier");
    }


    return(dependents);
}

//
// DependentsFunc for: link UsingClient
//

update_dependents
UsingClient_dependents(link theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent node objects of type Using
    // Dependency name: UsingClient
    //
    node	dep_Using;
    const	string	dep_Using_UsingClient_query =
				"node[Using&&${theBase.scope_node_id}]";
    
    for_each_in_select(dep_Using_UsingClient_query, dep_Using)
    {
	update_dependents_append(dependents, dep_Using, "UsingClient");
    }


    //
    // Dependent link objects of type UsingSupplier
    // Dependency name: UsingClient
    //
    link	dep_UsingSupplier;
    const	string	dep_UsingSupplier_UsingClient_query =
				"link[UsingSupplier&scope_node_id=${theBase.scope_node_id}&from_node_id=${theBase.to_node_id}&to_node_id=${theBase.from_node_id}]";
    
    for_each_in_select(dep_UsingSupplier_UsingClient_query, dep_UsingSupplier)
    {
	update_dependents_append(dependents, dep_UsingSupplier, "UsingClient");
    }


    return(dependents);
}

//
// DependentsFunc for: node Using
//

update_dependents
Using_dependents(node theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    

    //
    // Dependent link objects of type UsingClient
    // Dependent link objects of type UsingSupplier
    // Dependency name: Using
    //
    link	dep_UsingClient;
    const	string	dep_UsingClient_Using_query =
				"link[scope_node_id=${theBase.id}]";
    
    for_each_in_select(dep_UsingClient_Using_query, dep_UsingClient)
    {
	if (dep_UsingClient.type == "UsingClient" ||
	    dep_UsingClient.type == "UsingSupplier")
	{
	    update_dependents_append(dependents, dep_UsingClient, "Using");
	}
    }



    return(dependents);
}

//
// Derive Attributes Function
// Source Type	  :	link UsingSupplier
// Dependent Type :	Using
// Dependency Name:	UsingSupplier
//

node
UsingSupplier_Using_UsingSupplier_derattrs(node theDep, link oldVal, link newVal)
{
    node	result = theDep;
    string	oldsig = theDep.sig;

    oldsig = string_search_and_replace(oldsig, oldVal.name + ",",
					       newVal.name + ",");

    result = node_sig_set(result, oldsig);


    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	link UsingClient
// Dependent Type :	Using
// Dependency Name:	UsingClient
//

node
UsingClient_Using_UsingClient_derattrs(node theDep, link oldVal, link newVal)
{
    node	result = theDep;
    string	oldsig = theDep.sig;

    oldsig = string_search_and_replace(oldsig, "," + oldVal.name,
					       "," + newVal.name);

    result = node_sig_set(result, oldsig);

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	link UsingSupplier
// Dependent Type :	UsingClient
// Dependency Name:	UsingSupplier
//

link
UsingSupplier_UsingClient_UsingSupplier_derattrs(link theDep, link oldVal, link newVal)
{
    link	result = theDep;
    string	oldsig = theDep.sig;

    oldsig = string_search_and_replace(oldsig, ":" + oldVal.name + ",",
					       ":" + newVal.name + ",");

    result = link_sig_set(result, oldsig);

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	node Using
// Dependent Type :	UsingClient
// Dependency Name:	Using
//

link
Using_UsingClient_Using_derattrs(link theDep, node oldVal, node newVal)
{
    link	result = theDep;
    string	usingname, usingclientsig;
    int		indx, len;

    indx = string_find(newVal.name, 0, ":");
    if (indx == string_length(newVal.name))
    {
	usingname = "";
    } else {
	usingname = string_extract(newVal.name, 0, indx);
    }

    indx = string_find(theDep.sig, 0, ":");
    len = string_length(theDep.sig);
    usingclientsig = usingname;
    if (indx < len)
    {
	usingclientsig = usingclientsig +
				string_extract(theDep.sig, indx, len-indx);
    }

    result = link_sig_set(result, usingclientsig);

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	link UsingClient
// Dependent Type :	UsingSupplier
// Dependency Name:	UsingClient
//

link
UsingClient_UsingSupplier_UsingClient_derattrs(link theDep, link oldVal, link newVal)
{
    link	result = theDep;
    string	oldsig = theDep.sig;
    int		indx, len;


    len = string_length(oldsig);
    indx = string_find(oldsig, 0, ",");
    if (indx < len)
    {
	oldsig = string_extract(oldsig, 0, indx) + "," + newVal.name;
    } else {
	oldsig = "," + newVal.name;
    }


    result = link_sig_set(result, oldsig);

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	node Using
// Dependent Type :	UsingSupplier
// Dependency Name:	Using
//

link
Using_UsingSupplier_Using_derattrs(link theDep, node oldVal, node newVal)
{
    link	result = theDep;
    string	usingname, usingsuppliersig;
    int		indx, len;

    indx = string_find(newVal.name, 0, ":");
    if (indx == string_length(newVal.name))
    {
	usingname = "";
    } else {
	usingname = string_extract(newVal.name, 0, indx);
    }

    indx = string_find(theDep.sig, 0, ":");
    len = string_length(theDep.sig);
    usingsuppliersig = usingname;
    if (indx < len)
    {
	usingsuppliersig = usingsuppliersig +
				string_extract(theDep.sig, indx, len-indx);
    }

    result = link_sig_set(result, usingsuppliersig);


    return(result);
}

// Optional dependency variable declaration
// Dependent link objects of type SimpleMessage
// Dependency name: MessagesInSameCntx
// boolean dep_SimpleMessage_SimpleMessage_MessagesInSameCntx = True;
//
// DependentsFunc for: link SimpleMessage
// DependentsFunc for: link SynchronousMessage
// DependentsFunc for: link BalkingMessage
// DependentsFunc for: link TimeoutMessage
// DependentsFunc for: link AsynchronousMessage
//

update_dependents
SimpleMessage_dependents(link theBase)
{
    update_dependents	dependents = update_dependents_create();
    string	theBaseName = to_oms_string(theBase.name);
    BoochParsedMsg      r = booch_parse_message_label(theBase.name);
    string	nameOnly = to_oms_string(r.msg);
    

    //
    // Dependent link objects of type SimpleMessage
    // Dependency name: MessagesInSameCntx
    // Optional dependency
    // extern boolean dep_SimpleMessage_SimpleMessage_MessagesInSameCntx
    //
    if (dep_SimpleMessage_SimpleMessage_MessagesInSameCntx == True)
    {
	link	dep_SimpleMessage;
	const	string	msgtypes = "(SimpleMessage|SynchronousMessage|BalkingMessage|TimeoutMessage|AsynchronousMessage)";
	const		string	dep_SimpleMessage_MessagesInSameCntx_query =
		    "link[${msgtypes}&scope_node_id=${theBase.scope_node_id}&(name='${nameOnly}'|name$'${nameOnly}(*')]";
    
    
	for_each_in_select(dep_SimpleMessage_MessagesInSameCntx_query, dep_SimpleMessage)
	{
	    update_dependents_append(dependents, dep_SimpleMessage, "MessagesInSameCntx");
	}
    }
    //
    // Dependent item objects of type MessageNameValue
    // Dependency name: MessageName
    // Dependent item objects of type MessageIsEvent
    // Dependency name: MessageEvent
    // Dependent item objects of type MessageArgsValue
    // Dependency name: MessageArgs
    //
    item	dep_MessageNameValue;
    const	string	dep_MessageNameValue_MessageName_query =
		"item[(MessageNameValue|MessageIsEvent|MessageArgsValue)&obj_id=${theBase.id}]";
    
    for_each_in_select(dep_MessageNameValue_MessageName_query, dep_MessageNameValue)
    {
	if (dep_MessageNameValue.type == "MessageNameValue")
	    update_dependents_append(dependents, dep_MessageNameValue, "MessageName");
	else if (dep_MessageNameValue.type == "MessageArgsValue")
	    update_dependents_append(dependents, dep_MessageNameValue, "MessageArgs");
	else
	    update_dependents_append(dependents, dep_MessageNameValue, "MessageEvent");
    }


    return(dependents);
}


//
// Derive Attributes Function
// Source Type	  :	link SimpleMessage
// Source Type	  :	link SynchronousMessage
// Source Type	  :	link BalkingMessage
// Source Type	  :	link TimeoutMessage
// Source Type	  :	link AsynchronousMessage
// Dependent Type :	MessageNameValue
// Dependency Name:	MessageName
//

item
SimpleMessage_MessageNameValue_MessageName_derattrs(item theDep, link oldVal, link newVal)
{
    item	result = theDep;
    BoochParsedMsg	r = booch_parse_message_label(newVal.name);

    result = item_value_set(result, r.msg);

    return(result);
}


//
// Derive Attributes Function
// Source Type	  :	link SimpleMessage
// Source Type	  :	link SynchronousMessage
// Source Type	  :	link BalkingMessage
// Source Type	  :	link TimeoutMessage
// Source Type	  :	link AsynchronousMessage
// Dependent Type :	MessageIsEvent
// Dependency Name:	MessageEvent
//

item
SimpleMessage_MessageIsEvent_MessageEvent_derattrs(item theDep, link oldVal, link newVal)
{
    item	result = theDep;
    string	newvalue;
    BoochParsedMsg	r = booch_parse_message_label(newVal.name);

    if (r.isMsg)
	newvalue = "True";
    else
	newvalue = "False";

    result = item_value_set(result, newvalue);


    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	link Any Message Type
// Dependent Type :	Any Message Type
// Dependency Name:	MessagesInSameCntx
//

link
SimpleMessage_SimpleMessage_MessagesInSameCntx_derattrs(link theDep, link oldVal, link newVal)
{
    link	result = theDep;
    BoochParsedMsg      r = booch_parse_message_label(newVal.name);
    BoochParsedMsg      rcurr = booch_parse_message_label(theDep.name);
    string	newname;

    if (rcurr.msg != r.msg)
    {
	rcurr.msg = r.msg;
	newname = booch_make_link_name_from_parsed_msg(rcurr);
	result = link_name_set(result, newname);
    }
    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	link SimpleMessage
// Source Type	  :	link SynchronousMessage
// Source Type	  :	link BalkingMessage
// Source Type	  :	link TimeoutMessage
// Source Type	  :	link AsynchronousMessage
// Dependent Type :	MessageArgsValue
// Dependency Name:	MessageArgs
//

item
SimpleMessage_MessageArgsValue_MessageArgs_derattrs(item theDep, link oldVal, link newVal)
{
    item	result = theDep;
    BoochParsedMsg	r = booch_parse_message_label(newVal.name);

    result = item_value_set(result, r.attrs);

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	node OMTOperation
// Dependent Type :	SimpleMessage
// Dependent Type :	SynchronousMessage
// Dependent Type :	BalkingMessage
// Dependent Type :	TimeoutMessage
// Dependent Type :	AsynchronousMessage
// Dependency Name:	MsgNameCntx
//

link
OMTOperation_Message_MsgNameCntx_derattrs(link theDep, node oldVal, node newVal)
{
    link	result = theDep;
    BoochParsedMsg	rcurr = booch_parse_message_label(theDep.name);
    string	newname;

    if (rcurr.msg != newVal.name)
    {
	rcurr.msg = newVal.name;
	newname = booch_make_link_name_from_parsed_msg(rcurr);
	result = link_name_set(result, newname);

    }

    return(result);
}

//
// Derive Attributes Function
// Source Type	  :	node OMTOperation
// Dependent Type :	SimpleMessage
// Dependent Type :	SynchronousMessage
// Dependent Type :	BalkingMessage
// Dependent Type :	TimeoutMessage
// Dependent Type :	AsynchronousMessage
// Dependency Name:	MsgOperName
//

link
OMTOperation_Message_MsgOperName_derattrs(link theDep, node oldVal, node newVal)
{
    link	result = theDep;
    BoochParsedMsg	rcurr = booch_parse_message_label(theDep.name);
    string	newname;

    // Arg count to match op is done in dependency function
    // Rename deals with name changes only, no propagated signature
    // changes

    if (rcurr.msg != newVal.name)
    {
	rcurr.msg = newVal.name;
	newname = booch_make_link_name_from_parsed_msg(rcurr);
	result = link_name_set(result, newname);

    }

    return(result);
}

