//
//      sccsid[] = %W% %Y% %D%
//      StP/Core
//      StP/SE
//      Confidential property of Interactive Development Environments, Inc.
//      Copyright (c) 1992-1993
//      All rights reserved
//



// STE Dependency function

update_dependents event_action_dependents(node the_event_or_action)
{
    update_dependents dependents;
    cntx dependent_cntx;
    link dependent_link;

    dependents = update_dependents_create();

    if (the_event_or_action.type == "Event")
    {
        for_each_in_select("cntx[ActionInstance && 
                name $ '${the_event_or_action.name}/*']", dependent_cntx)

        update_dependents_append(dependents, dependent_cntx, 
                                    "EventAction");

        for_each_in_select("link[Transition && 
                name='${the_event_or_action.name}']", dependent_link)

        update_dependents_append(dependents, dependent_link, "Name");
    }
    else
    {
        for_each_in_select("cntx[ActionInstance && 
                name $ '*/${the_event_or_action.name}']", dependent_cntx)

        update_dependents_append(dependents, dependent_cntx, "EventAction");
    }

    return dependents;
}


// STE DeriveAttr function
        
cntx action_instance_derive_name (cntx the_action_instance,
                                    node old_node,
                                    node new_node)
{

    string aux_label, main_label = "";
    string name;
    int pos;

    pos = string_find(the_action_instance.name, 0, "/");

    aux_label = string_extract(the_action_instance.name, 0, pos);

    if (pos + 1 != string_length(the_action_instance.name))
	main_label = string_extract(the_action_instance.name, pos + 1, 
                        string_length(the_action_instance.name) - pos - 1);

    if (new_node.type == "Event")
        name = new_node.name + "/" + main_label;    

    else if (new_node.type == "Action")
        name = aux_label + "/" + new_node.name;    

    return cntx_name_set (the_action_instance, name);

}

// DSE data dependency function 

update_dependents data_dependents(node the_node)
{
    string filename;
    update_dependents dependents;
    node dependent_node;
    link dependent_link;
    file dependent_file;
    item dependent_item;
 
    dependents = update_dependents_create();
 
    if(rename_diagram)
    {
        filename = string_search_and_replace(the_node.name," ", "_");
        for_each_in_select("file[DseDiagram && name $ '${filename}'];",
                            dependent_file)
            update_dependents_append(dependents, dependent_file, "DseDiagram");
    }
    
    if(rename_stores)
    {
        for_each_in_select("node[Store && name='${the_node.name}'];", 
                            dependent_node)
            update_dependents_append(dependents, dependent_node, "Name");
    }
 
    if(rename_flows)
    {
        for_each_in_select("link[(DataFlow || ControlFlow) 
                            && name='${the_node.name}']", dependent_link)
            update_dependents_append(dependents, dependent_link, "Name");
    }

    if(rename_type_annots)
    {
        for_each_in_select("item[(ModuleReturnType || DataType ) && value='${the_node.name}']", dependent_item)
            update_dependents_append(dependents, dependent_item, "Name");
    }
            
    return dependents;
 
}

// dse diagram DeriveAttr function from node
 
file diagram_derive_name_node (file the_file,
                                  node old_node,
                                  node new_node)
{
 
    string label, name, valid_name;
 
    valid_name = string_search_and_replace(new_node.name," ", "_");
 
    return file_name_set (the_file, valid_name);
 
}

// dse diagram DeriveAttr function from link
 
file diagram_derive_name_link (file the_file,
                                  link old_link,
                                  link new_link)
{
 
    string label, name, valid_name;
 
    valid_name = string_search_and_replace(new_link.name," ", "_");
 
    return file_name_set (the_file, valid_name);
 
}


// DFE flow dependency function
update_dependents flow_dependents(link the_link)
{
    update_dependents dependents;
    string filename;
    link dependent_link;
    node dependent_node, node;
    file dependent_file;

    dependents = update_dependents_create();

    for_each_in_select("link[${the_link.type} && name='${the_link.name}']", 
                        dependent_link)
    {
	if (the_link.sig == dependent_link.sig)
	    update_dependents_append(dependents, dependent_link, "Name");
    }

    if (rename_data_objects)
    {
        for_each_in_select("node[(Sequence || Selection || Enumeration) 
                        && name='${the_link.name}']", dependent_node)
        update_dependents_append(dependents, dependent_node, "DseObjectFlow");
    }

    if (rename_dse_diagram)
    {
        filename = string_search_and_replace(the_link.name," ", "_");
        for_each_in_select("file[DseDiagram && name $ '${filename}'];",
                            dependent_file)
            update_dependents_append(dependents, dependent_file, "DseDiagramFlow");
    }

    if (the_link.type == "ControlFlow" && rename_control_in_out)
    {

        node = find_by_query("node[${the_link.to_node_id}]");

        if (node.type == "Cspec")
        {
            for_each_in_select("node[ControlIn && name='${the_link.name}']", 
                                dependent_node)
            update_dependents_append(dependents, dependent_node, "Name");
        }
        else
        {
            for_each_in_select("node[ControlOut && name='${the_link.name}']", 
                                dependent_node)
            update_dependents_append(dependents, dependent_node, "Name");
        }
    }

    return dependents;
}

// dse object DeriveAttr function from link

node object_derive_name_link (node the_node,
                                  link old_link,
                                  link new_link)
{

    return node_name_set (the_node, new_link.name);

}

// DFE store dependency function
update_dependents store_dependents(node the_node)
{
    update_dependents dependents;
    string filename;
    node dependent_node;
    file dependent_file;
    link dependent_link;

    dependents = update_dependents_create();

    if (rename_data_flows_store)
    {
        for_each_in_select("link[(ControlFlow || DataFlow )
                        && name='${the_node.name}']", dependent_link)
        update_dependents_append(dependents, dependent_link, "Name");
    }

    if (rename_data_objects_store)
    {
        for_each_in_select("node[(Sequence || Selection || Enumeration)
                        && name='${the_node.name}']", dependent_node)
        update_dependents_append(dependents, dependent_node, "Name");
    }

    if (rename_dse_diagram_store)
    {
        filename = string_search_and_replace(the_node.name," ", "_");
        for_each_in_select("file[DseDiagram && name $ '${filename}'];",
                            dependent_file)
            update_dependents_append(dependents, dependent_file, "DseDiagramStore");
    }
 
    return dependents;
}

// DFE externals dependency function

update_dependents external_dependents(node the_node)
{
    update_dependents dependents;
    node dependent_node;

    dependents = update_dependents_create();

    if(rename_offpage_externals)
    {
        for_each_in_select("node[OffPageExternal && name $ '${the_node.name}'];",
                            dependent_node)
            update_dependents_append(dependents, dependent_node, "Name");
    }

    return dependents;

}


// DFE processes dependency function

update_dependents process_dependents(node the_node)
{
    update_dependents dependents;
    node dependent_node;

    dependents = update_dependents_create();

    if(rename_offpage_processes)
    {
        for_each_in_select("node[OffPageProcess && name $ '${the_node.name}'];",                            dependent_node)
            update_dependents_append(dependents, dependent_node, "Name");
    }
 
    return dependents;
 
}

// SCE module dependency function
 
update_dependents module_dependents(node the_node)
{
    string filename;
    update_dependents dependents;
    file dependent_file;
 
    dependents = update_dependents_create();
 
    if(rename_sce_diagram)
    {
        filename = string_search_and_replace(the_node.name," ", "_");
        for_each_in_select("file[SceDiagram && name $ '${filename}'];",
                            dependent_file)
            update_dependents_append(dependents, dependent_file, "SceDiagram");
    }
 
    return dependents;
    
}

// control in/out cell dependency function

update_dependents control_in_out_dependents(node the_node)
{
    update_dependents dependents;
    link dependent_link;
    node dependent_node;
    node to_node;
 
    dependents = update_dependents_create();
 
    if(rename_control_flows)
    {
        for_each_in_select("link[ControlFlow && name='${the_node.name}']",
                            dependent_link)
        {
            to_node = find_by_query("node[${dependent_link.to_node_id}]");

            if (the_node.type == "ControlIn" )
	    {
                if (to_node.type == "Cspec")
                    update_dependents_append(dependents, dependent_link, "Name");
	    }
            else 
	    {
                if (to_node.type != "Cspec")
                    update_dependents_append(dependents, dependent_link, "Name");
	    }
        }
    }

    if (rename_dse_for_control_in_out)
    {
        for_each_in_select("node[(Sequence || Selection || Enumeration)
                        && name='${the_node.name}']", dependent_node)
        update_dependents_append(dependents, dependent_node, "Name");
    }
 
    return dependents;
   
}

