//
// 	sccsid[] = %W% %Y% %D%
// 	StP/Core
// 	Confidential property of Interactive Development Environments, Inc.
// 	Copyright (c) 1992-1994
// 	All rights reserved
//

//
//	FILE:	OMTClass.note
//

Note 801501
{
	{ AppType OMTClassDefinition }
        { HelpText "The Class Definition note lets you add items that capture modeling information about a particular class." }
	{ PrintName "Class Definition" }
	{ Bounds { Min 1 } { Max 1 } }
	{ Item
		{ AppType OMTEntityIsDerived }
                { HelpText "The Derived Class item lets you indicate that a class is derived. A derived class is one whose data can be completely determined by other classes. Thus a derived class is somewhat redundant, but may be included in object model for clarity." }
		{ PrintName "Derived Class" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "True" }
	}
	{ Item
		{ AppType OMTUnaryConstraint }
                { HelpText "The Constraint item lets you indicate a constraint on a class. A constraint restricts the values that a class's attributes can assume. Enter constraint as natural language or equations (e.g., A < B)." }
		{ PrintName "Constraint" }
		{ Bounds { Min 0 } }
	}
	{ Item
		{ AppType OMTClassIsImported }
                { HelpText "The External Class item lets you indicate that a class is external. An external class is assumed to be defined in another system.  It can be used as a type and associations to it can be defined but, for example, a declaration for it will not be produced during code generation." }
		{ PrintName "External Class" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "True" }
	}
	{ Item
		{ AppType OMTClassType }
                { HelpText "The Class Type lets you indicate the type of this analysis class.  It has two values, Domain and Application, and an associated display mark, ClassType, that will be shown on the NorthWest corner of the class box." }
		{ PrintName "Class Type" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "Domain" }
	}
	{ Item
		{ AppType ObjectConcurrency }
                { HelpText "The Concurrency item lets you indicate the concurrency semantics of objects instantiated from this class.  It has four values, Sequential, Guarded, Synchronous and Active, and an associated display mark, ConcurrencyMark, that will be shown on the SouthWest corner of the class symbol in the StP/Booch Object Diagram." }
		{ PrintName "Concurrency" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "Sequential" }
	}
	{ Item
		{ AppType ClassIsAbstract }
                { HelpText "The Abstract item lets you indicate that a class is abstract. An abstract class is one for which no instances may be created." }
		{ PrintName "Abstract" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "True" }
	}
	{ Item
		{ AppType ClassExportControl }
                { HelpText "The Export Control item lets you specify how a class is seen outside of the category in which it's defined." }
		{ PrintName "Export Control" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "Public" }
	}
  	{ Item
      		{ AppType OMTMultiplicity }
      		{ HelpText "The Cardinality item lets you indicate how many instances of a class may exist. Note that an explicit cardinality value (for example 4) must be set in the Explicit Cardinality item." }
      		{ PrintName "Cardinality" }
      		{ Bounds { Min 0 } { Max 1 } }
      		{ InitValue "Many" }
  	}
  	{ Item
      		{ AppType OMTExplicitMultiplicity }
      		{ HelpText "The Explicit Cardinality item lets you further specify cardinality by giving an explicit value (for example 3 or 1-2,4) for it." }
      		{ PrintName "Explicit Cardinality" }
      		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "" }
  	}
  	{ Item
      		{ AppType ClassParameters }
      		{ HelpText "The Parameters item lets you specify a list of parameters for a parameterized or instantiated class.  The Template Class Parameter List item in the Class C++ Implementation note will be obsolete in the future." }
      		{ PrintName "Parameters" }
      		{ Bounds { Min 0 } { Max 1 } }
      		{ InitValue "" }
  	}
  	{ Item
      		{ AppType ClassModule }
      		{ HelpText "The Module item lets you specify the name of a module to which this class belongs." }
      		{ PrintName "Module" }
      		{ Bounds { Min 0 } { Max 1 } }
      		{ InitValue "" }
  	}
	{ Item
		{ AppType ClassPersistence }
                { HelpText "The Persistence item lets you specify the lifetime for instances of the class." }
		{ PrintName "Persistence" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "Transient" }
	}
	{ Item
		{ AppType ClassSpaceComplexity }
                { HelpText "The Space Complexity item lets you express a statement about the relative or absolute storage consumed by each instance of the class." }
		{ PrintName "Space Complexity" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "" }
	}
	{ Item
		{ AppType Stereotype }
                { HelpText "The Stereotype item lets you specify a stereotype name for the class." }
		{ PrintName "Stereotype" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "" }
	}
}

Note 801522
{
  { AppType OMTClassCXXImplementation }
  { HelpText "The Class C++ Implementation note lets you add items for a class that are used for C++ code generation." }
  { PrintName "Class C++ Implementation" }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTTemplateClassParameterList }
      { HelpText "The Template Class Parameter List item lets you specify the C++ template parameter list.  Existence of this item indicates that the class is a C++ template.  The Rumbaugh name:type syntax must be used for the template parameter list." }
      { PrintName "Template Class Parameter List" }
      { Bounds { Min 0 } { Max 1 } }
    }
}

Note 801536
{
  { AppType OMTClassPersistenceImplementation }
  { HelpText "The Class Persistence Implementation note lets you add items for a class that are used for Persistence code generation." }
  { PrintName "Class Persistence Implementation" }
  { Bounds { Min 0 } { Max 1 } }
  { Item
	{ AppType OMTClassIsPersistent }
        { HelpText "The Persistent Class item lets you indicate that a class is persistent, therefore Persistence code will be generated for it if this class is chosen for Persistence code generation." }
	{ PrintName "Persistent Class" }
	{ Bounds { Min 0 } { Max 1 } }
	{ InitValue "True" }
   }
   { Item
	{ AppType OMTClassTableName }
        { HelpText "The Class Table Name item lets you specify the parameter to the TableName property of a Persistence class (i.e., the name of the table or view in the database.)  If this item is not specified or is blank, the default is to use the class name." }
	{ PrintName "Class Table Name" }
        { Bounds { Min 0 } { Max 1 } }
   }
  { Item
	{ AppType OMTClassIsExistingTable }
        { HelpText "The Existing Table item lets you indicate that a table that represents the class already exists in the database." }
	{ PrintName "Existing Table" }
	{ Bounds { Min 0 } { Max 1 } }
	{ InitValue "True" }
   }
  { Item
	{ AppType OMTClassIsReadOnly }
        { HelpText "The Read Only item lets you indicate that the class represents a table view or a class which should not be changed." }
	{ PrintName "Read Only" }
	{ Bounds { Min 0 } { Max 1 } }
	{ InitValue "True" }
   }
   { Item
	{ AppType OMTClassHookMethods }
        { HelpText "The Notification Hooks item lets you specify the hook methods you want generated for this class (preCreate, postCreate, preChange, postChange, etcetera.)  Enter them as you would in Pesistence, i.e., a space-separated list of hook methods." }
	{ PrintName "Notification Hooks" }
        { Bounds { Min 0 } { Max 1 } }
   }
}

Note 801801
{
  { AppType OMTClassAda83Implementation }
  { PrintName "Class Ada_83 Implementation" }
  { HelpText "The Class Ada_83 Implementation note lets you add items for a class that are used for Ada_83 code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTClassAda83TypePrivacy }
      { PrintName "Class Type Privacy" }
      { HelpText "The Class Type Privacy item specifies whether the generated class record type appears in its enclosing package specification as a directly visible type (Public), as a Private or Limited Private type, or as an incomplete type declaration in the private part (Implementation).  Implementation privacy is needed to implement two-way associations as 2 one-way associations while avoiding circular compilation dependencies between the 2 associated class package specifications.  Implementation privacy also means that an access type for the class must be generated and that only dynamic objects can be declared for the class type." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Implementation" }
  }
  { Item
      { AppType OMTClassAda83GenerateAccessType }
      { PrintName "Generate Access Type" }
      { HelpText "The Generate Access Type item specifies whether or not to generate an access type to the class record type in the class package specification.  If the generated Class Type Privacy is Implementation, then a class access type will be generated regardless of the value of this item. " }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTClassAda83ClassAttributesLocation }
      { PrintName "Class Attributes Location" }
      { HelpText "The Class Attributes Location item specifies the location within the class package where the class attributes type and variable are declared. It can be in the specification or body." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Body" }
  }
  { Item
      { AppType OMTClassAda83InlineInheritedSubprograms }
      { PrintName "Inline Inherited Subprograms" }
      { HelpText "The Inline Inherited Subprograms item applies when this class is a subclass in a generalization relationship.  It specifies whether or not to use pragma Inline for the short call-through subprograms which are generated automatically for inherited operations, which merely call the corresponding subprograms in the superclass package. " }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType OMTClassAda83ImplementPolymorphism }
      { PrintName "Implement Polymorphism" }
      { HelpText "The Implement Polymorphism item applies when this class is a superclass in a generalization relationship.  When true, it specifies that code generation should produce a package allowing polymorphic behavior for objects of this class and all of its generalization descendants.  Polymorphic behavior means that an object belonging to any of these classes can be converted to any of the other classes, and can be passed as an argument to any of these classes' operations. " }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
}

Note 801810
{
  { AppType OMTClassAda95Implementation }
  { PrintName "Class Ada_95 Implementation" }
  { HelpText "The Class Ada_95 Implementation note lets you add items for a class that are used for Ada_95 code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTClassAda95TypePrivacy }
      { PrintName "Class Type Privacy" }
      { HelpText "The Class Type Privacy item specifies, for a root class, whether the generated class type appears in its enclosing package specification as a publicly visible tagged type (Public), a tagged private type (Tagged Private), a private type (Private), or an incomplete type declaration in the private part (Implementation).  In addition, for subclasses, the generated class type can appear as a public derivation with private extensions (Private Extension).  Implementation Privacy is needed to implement two-way associations as 2 one-way associations while avoiding circular compilation dependencies between the 2 associated class package specifications.  Implementation Privacy means that no dispatching can occur for operation subprograms." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Tagged Private" }
  }
  { Item
      { AppType OMTClassAda95IsLimited }
      { PrintName "Limited (Root Class Only)" }
      { HelpText "The Limited item specifies whether or not to designate the generated class type as a limited type.  This applies only to a class which is a root of an inheritance hierarchy." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTClassAda95GenerateClassAccessType }
      { PrintName "Generate Access Type to Class Type" }
      { HelpText "The Generate Access Type to Class Type item specifies whether or not to generate in the class package specification an access type to the class type." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTClassAda95GenerateClassWideAccessType }
      { PrintName "Generate Access Type to Class-Wide Type" }
      { HelpText "The Generate Access Type to Class-Wide Type item specifies whether or not to generate an access type to the class-wide type associated with the class (tagged) type." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTClassAda95SubclassPackageKind }
      { PrintName "Subclass Package Kind" }
      { HelpText "The Subclass Package Kind item specifies, if this class is a subclass in an inheritance relationship, what kind of package is generated for the class.  Possible values are 'Root', 'Public Child', and 'Private Child'.  The parent of a subclass's child package is the class package of its superclass." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Public Child" }
  }
  { Item
      { AppType OMTClassAda95FullViewNotLimited }
      { PrintName "Partial View Limited/Full View Not Limited" }
      { HelpText "The Partial View Limited/Full View Not Limited item specifies whether to not designate the full view of a class type as limited, when the partial view is limited and has a privacy of 'Private'.  If it is not set to any value, the full view will be limited.  This applies only to a class which is a root of an inheritance hierarchy." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTClassAda95FullViewNotAbstract }
      { PrintName "Partial View Abstract/Full View Not Abstract " }
      { HelpText "The Partial View Abstract/Full View Not Abstract item specifies whether to not designate the full view of a class type as abstract, when the partial view is abstract and has a privacy of either 'Private Extension' or 'Tagged Private'.  If it is not set to any value, the full view will be abstract." }
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
}

Note 801550
{
  { AppType OMTClassSmalltalkImplementation }
  { HelpText "The Class Smalltalk Implementation note lets you add items for a class that are used for Smalltalk code generation." }
  { PrintName "Class Smalltalk Implementation" }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTClassSmalltalkPoolDictionaries }
      { HelpText "The Pool Dictionaries item lets you specify the pool dictionaries that are intended for use by this specific class.  These are listed as part of the poolDictionaries definition of a class." }
      { PrintName "Pool Dictionaries" }
      { Bounds { Min 0 } { Max 1 } }
    }
  { Item
      { AppType OMTClassSmalltalkCategory }
      { HelpText "The Category item lets you specify the Smalltalk category to which this class belongs.  This item is ignored if the method supports categories (e.g., Booch) and this class is a member of such a category in the model." }
      { PrintName "Category" }
      { Bounds { Min 0 } { Max 1 } }
    }
}

Note 801818
{
  { AppType OMTClassTOOLImplementation }
  { PrintName "Class TOOL Implementation" }
  { HelpText "The Class TOOL Implementation note lets you add items for a class that are used for TOOL (Forte) code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTTOOLClassSharedProperty }
      { PrintName "Shared Property" }
      { HelpText "The Class Shared Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType OMTTOOLClassSubclassOverrideShared }
      { PrintName "Subclass Override Shared Property" }
      { HelpText "The Class Subclass Override Shared Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType OMTTOOLClassMonitoredProperty }
      { PrintName "Monitored Property" }
      { HelpText "The Class Monitored Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Allowed" }
  }
  { Item
      { AppType OMTTOOLClassSubclassOverrideMonitored }
      { PrintName "Subclass Override Monitored Property" }
      { HelpText "The Class Subclass Override Monitored Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTTOOLClassDistributedProperty }
      { PrintName "Distributed Property" }
      { HelpText "The Class Distributed Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType OMTTOOLClassSubclassOverrideDistributed }
      { PrintName "Subclass Override Distributed Property" }
      { HelpText "The Class Subclass Override Distributed Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTTOOLClassTransactionalProperty }
      { PrintName "Transactional Property" }
      { HelpText "The Class Transactional Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType OMTTOOLClassSubclassOverrideTransactional }
      { PrintName "Subclass Override Transactional Property" }
      { HelpText "The Class Subclass Override Transactional Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType OMTTOOLClassRestricted }
      { PrintName "Restricted Property" }
      { HelpText "The Class Restricted Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType OMTTOOLWindowClassFilename }
      { PrintName "Window Class Filename" }
      { HelpText "The window definition file created using the Forte Window Workshop."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "" }
  }

}

Note 801824
{
  { AppType OMTClassJavaImplementation }
  { PrintName "Class Java Implementation" }
  { HelpText "The Class Java Implementation note lets you add items for a class that are used forJava code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType OMTJavaClassIsInterface }
      { PrintName "Interface Type" }
      { HelpText "The Interface Type item specifies whether or not the class should be implemented as an interface type instead of a class type in Java."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType OMTJavaClassIsFinal }
      { PrintName "Final" }
      { HelpText "The Final item specifies whether or not the class should be declared 'final' when implemented in Java."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
}

Note 801713
{
	{ AppType OMTClassCxxDeclarations }
        { HelpText "The C++ Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a local typedef or enum) to the code generated for a C++ class definition.  This note is prepended, as is, to the code generated for a C++ class definition." }
	{ PrintName "C++ Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

Note 801712
{
	{ AppType OMTClassIDLDeclarations }
        { HelpText "The IDL Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a typedef or exception, or any \"export declaration\") to the code generated for an IDL interface body.  This note is prepended, as is, to the code generated for an IDL interface body." }
	{ PrintName "IDL Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

Note 801829  
{
	{ AppType OMTClassJavaDeclarations }
        { HelpText "The Java Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a local typedef or enum) to the code generated for a Java class definition.  This note is prepended, as is, to the code generated for a Java class definition." }
	{ PrintName "Java Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

