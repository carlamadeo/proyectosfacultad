//////////////////////////////////////////////////////////////////////////////
//
// 	sccsid[] = @(#)dfe.inc	
// 	StP/IM
// 	Confidential property of Interactive Development Environments, Inc.
// 	Copyright (c) 1992-1993
// 	All rights reserved
//
//    	Description: Decompose a Dfe Diagram
//
//////////////////////////////////////////////////////////////////////////////

#include "rules/qrl/decomp.inc"
#include "rules/qrl/gde_qrl_std.inc"
#include "rules/qrl/anchors.inc"

// Symbol Types

const string PHASE =		"Phase";
const string ANCHOR =		"Anchor";
const string COMMENT =		"Comment";

void 
DecomposeSpeDiagram(string name)
{
    gde_builtin("EditorSetFileName \"" + name + "\"");   
    general_decomp(PHASE);
}

//
// CALLBACKS FOR GENERAL_DECOMP
//

//
//  Replacing a node
//
void 
off_node_replace(gde_node old_node)
{
    string type = gde_nt_name(gde_node_nt(old_node));    
    if (type == COMMENT || type == ANCHOR)
    	return;
    gde_node_replace_nt(old_node, ANCHOR);
}

//
//  Clearing a node
//
void 
clear_node(gde_node the_node)
{
    gde_node_clear_all_prop(the_node);
    gde_node_set_label(the_node, NULL);
}

//
//  Preserving inherited arc labels.
//
void
label_arc(gde_arc arc, list end_nodes)
{
}

int 
SpeParent (string filename)
{
    string query;
    node_ref phase_ref;
    file parent;

    query = "node_ref[node[Phase && name == '${filename}'] && " + 
		"file[SpeDiagram]]";
    phase_ref = find_by_query(query);


    if (phase_ref == NULL)
    {
	gde_print_error("No Parent Found");
    	return(1);
    }
    query = "file[SpeDiagram && node_refs[${phase_ref.id}]]";
    parent = find_by_query(query);
    NavLoadAndFind(parent.name, phase_ref.appid+ "");
    return(0);
}

//  Add any user customizations to the file included below:
#include_if_exists "user/ct/rules/qrl/user_spe.qrl"
