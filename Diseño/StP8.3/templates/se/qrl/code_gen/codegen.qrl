//
//      StP/SE
//      Confidential property of Interactive Development Environments, Inc.
//      Copyright (c) 1993
//      All rights reserved
//
script_help = "This script generates C source code from SE DSE and SCE diagrams.";

const string    SCRIPT_DESCRIPTION = "SE C code generation";

#include "qrl/include/return_codes.inc"
#include "se/qrl/include/se_utils.inc"
#include "qrl/code_gen/codegen.impl"
#include "ct/rules/qrl/ct.inc"

external string obj_name = "";
external_help = "String representing objects to use as input (separated by spaces).";

external string obj_type = "";
external_help = "The type of the object(s) identified by obj_name. Must be one of 'SceDiagram', 'SEFile', or 'SEDirectory'.";

external string kandr_or_ansi = "ansi";
external_help = "Generates K&R or ANSI C during code generation.";

external int alternate_directory = 0;
external_help = "See file_directory.";

external string file_directory = "";
external_help = "File directory used for C output (uses directory node if blank).";

external int alternate_file = 0;
external_help = "See file_name.";

external string file_name = "";
external_help = "File name used for C output. If blank , uses file node.";

external int view_file = 0;
external_help = "View resultant C file(s) after generation. "; 

// Remedy 2806. C.L. Make view_editor platform dependent.

//ECR 5395 begin
//if (is_unix_platform())
//    external string view_editor = "vi";
//else
//    external string view_editor = "notepad";
external string view_editor = "";
//ECR 5395 end

external_help = "Editor to use for viewing source file.";

external string file_interface_extension = ".h";
external_help = "C interface (header) file extension (data declarations/definitions).";

external string file_extension = ".c";
external_help = "C implementation file extension (functions)";

external int delete_old_code = 0;
external_help = "If true, all code files are regenerated, and any user changes are lost."; 

external int verbose = 0;
external_help = "Print more information during execution?";

external string sce_files = "";
external_help = "Names of SCE diagram files to use as input (separated by spaces).";

external string file_objs = "";
external_help = "ids of SEFile nodes to use as input (separated by spaces).";

external string dir_objs = "";
external_help = "ids of SEDirectory nodes to use as input (separated by spaces).";

external int gen_code_body = 0;
external_help = "Generate information from C Code Body note.";

external int gen_comment = 0;
external_help = "Generate information from the object's 'comment' note description.";

external int check_only = 0;
external_help = "Performs code generation checks only. No code generated.";

void
main()
{
    int	errors = 0;
    prop_tp props;

    props.obj_name = obj_name;
    props.obj_type = obj_type;
    props.kandr_or_ansi = kandr_or_ansi;
    props.alternate_directory = alternate_directory;
    props.file_directory = file_directory;
    props.alternate_file = alternate_file;
    props.file_name = file_name;
    props.view_file = view_file;
    //ECR 5395 begin
    if ("" == view_editor)
    {
        if (is_unix_platform())
            view_editor = "vi";
        else
            view_editor = "notepad";        
    }
    //ECR 5395 end
    props.view_editor = view_editor; 
    props.file_interface_extension = file_interface_extension;
    props.file_extension = file_extension;
    props.delete_old_code = delete_old_code;
    props.verbose = verbose;
    props.gen_code_body = gen_code_body;
    props.gen_comment = gen_comment;
    props.check_only = check_only;

    errors = generate_code_from_qrp(props);

    print_message("\n");
    error_count(SCRIPT_DESCRIPTION, errors);
    print_message("\n");
}



