external string file_name = "NONE"; 	    
external_help = "The name of the diagram which contains the Process(es).";

external int process_id = 0;  
external_help = "The id of the process for which to generate a Pspec.";

external string process_name = "";
external_help = "The name of the process for which to generate a Pspec.";

external int process_index = 9999999;
external_help = "The index of the process for which to generate a Pspec.";

template_help = "This template prints out the contents of one Process Spec into a file.  Users must supply the file name and either the process id or the process name.";

#include "qrl/include/pindex.inc"
#include "qrl/include/files.inc"
#include "qrl/include/decomp.inc"
#include "qrl/include/pspec_primitive.inc"
#include "qrl/include/pspec_formats.inc"

void
main() 
{
    note pspec;     // process description
    string query;
    string proc_index;

    // set default format
    format(DefaultFormatFile);

    if (process_id == 0 && process_name == "")
    {
    	ide_error("Please supply the process id or the process name.");
    	return;
    }

    if (process_id == 0)
    {
    	node process;

    	query = "node[Process && name == '" + process_name + "']";
    	process = find_by_query(query);
    	if (process == NULL)
    	{
    	    ide_error("No Process with name '" + process_name + "'.");
    	    return;
    	}
    	process_id = process.id;    	    
    }
    else if (process_name == "")
    {
    	node process;

    	query = "node[Process && id == " + process_id + "]";
    	process = find_by_query(query);
    	if (process == NULL)
    	{
    	    ide_error("No Process with id " + process_id + ".");
    	    return;
    	}
    	process_name = process.name;    	    
    }

    if (file_name == "NONE")
    {
    	file the_file;

    	query = "file[node_refs[node_id == " + process_id + "]]";
    	the_file = find_by_query(query);
    	if (the_file == NULL)
    	{
    	    ide_error("There are no references to the Process with id " 
    	    	      + process_id + ".");
    	    return;
    	}
    	file_name = the_file.name;    	
    }

    if (process_index == 9999999)
    {
    	item pindex;
    
    	query = "item[RelativeIndex && obj_id == " + process_id + "]";
    	pindex = find_by_query(query);
    	if (pindex == NULL)
    	{
    	    ide_error("No process index for Process with id '" + process_id + "'.");
    	    return;
    	}
    	process_index = to_int(pindex.value);
    }

	proc_index = FindDecompositionName(file_name, process_index);
	generate_pspec_primitive (proc_index, process_name, file_name, 
							  process_id);
	
}
