#include "rules/qrl/doors.inc"
#include "qrl/req_trace/export_to_doors.inc"
 
external string Files = "";
external_help = "Enter the filenames to export to doors.";
external string Editor = "";
external_help = "Enter the diagram types to export to doors."; 


void
main()
{
    set nodes = set_create("node");
    set cntxs = set_create("cntx");
    set links  = set_create("link");
    string diagramType = "";
    
    int i;
    list exportFiles = string_to_list(Files," ");
    string fileNameClause = "";
    string fileClause = "";

    for(i = 0; i < list_count(exportFiles); i++)
    {
	    if(i != 0)
		fileNameClause = fileNameClause + " | ";
	    fileNameClause = fileNameClause + 
            "name = '" + list_get(exportFiles,i) + "'";
	   
	}

    if(Editor == "dydfe" || Editor == "gsdfe")
	    diagramType = "DfeDiagram";
    else if(Editor == "sce")
	diagramType = "SceDiagram";
    else if(Editor == "ste")
	diagramType = "SteDiagram";
    else if(Editor == "dse")
	diagramType = "DseDiagram";
    
    if(fileNameClause == "")
        if(diagramType == "")
            fileClause = "";
        else
            fileClause = "[file[" + diagramType + "]]";
    else
        if(diagramType == "")
            fileClause = "[file[" + fileNameClause + "]]";
        else
            fileClause = "[file[" + diagramType  + " & (" + fileNameClause +  ")]]";

    string appTypeClause = list_to_string(doors_exportable_node_types(),
					  " | ");
    nodes = 
	set_select("node[node_refs ${fileClause} & (${appTypeClause})]");

    appTypeClause = list_to_string(doors_exportable_link_types(),
					  " | ");
    links = 
	set_select("link[link_refs ${fileClause} & (${appTypeClause}) ]");


    appTypeClause = list_to_string(doors_exportable_cntx_types(),
					  " | ");
    cntxs = 
	set_select("cntx [cntx_refs ${fileClause} & (${appTypeClause}) ]");

    if (set_count(nodes) == 0 && set_count(links) == 0 && set_count(cntxs) == 0) {
       print_message("There are no exportable objects to DOORS");
       return;
    } 

    string export_stmt = doors_make_export_stmt(nodes,links,cntxs, False);
	// now send the statements to DOORS
    if ("" == export_stmt) // annot file locked
    {
        
        print_error("All selected objects' annotations are locked." +
                " Unable to export to DOORS");
        return;
    }
	doors_send_string_to_doors(export_stmt);

}
