
//  StP/SE
//  Confidential property of Aonix
//  Copyright (c) 1999
//  All rights reserved

// Taken from the whole model semantic checks in UML, for the most part

int 
StartCheckWholeModel_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "WholeModel");
    return semcheck_rc_code(theprop);
}

int 
StartCheckWholeModelFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "WholeModelFiles");
    return semcheck_rc_code(theprop);
}

int
StartCheckDfeFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "Dfe");
    return semcheck_rc_code(theprop);
}

int
StartCheckDseFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "Dse");
    return semcheck_rc_code(theprop);
}

int
StartCheckSceFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "Sce");
    return semcheck_rc_code(theprop);
}

int
StartCheckSteFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "Ste");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckCseFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "Cse");
    return semcheck_rc_code(theprop);
}

int
StartCheckDETFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "DecisionTable");
    return semcheck_rc_code(theprop);
}


int
StartCheckPATFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "ProcessActivationTable");
    return semcheck_rc_code(theprop);
}


int
StartCheckPAMFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "ProcessActivationMatrix");
    return semcheck_rc_code(theprop);
}


int
StartCheckSTTFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StateTransitionTable");
    return semcheck_rc_code(theprop);
}


int
StartCheckSEMFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StateEventMatrix");
    return semcheck_rc_code(theprop);
}


int
StartCheckELTFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "EventLogicTable");
    return semcheck_rc_code(theprop);
}


int
StartCheckALTFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "ActionLogicTable");
    return semcheck_rc_code(theprop);
}

 

int
semcheck_rc_code(ui_prop button)
{
    if (ui_button_is_ok(button))
        return 1;
    if (ui_button_is_apply(button))
        return 0;
    
    return 0;
}

int 
get_prop_args_and_begin(ui_prop theprop, string parent_func)
{
    int error_count = 0;

    int out_form = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_form"));
    string out_file = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_dir"));

    editor_set_is_busy(True);
    ui_busy(to_ui_owner(theprop), True);

    if (out_form != 3 && out_file == "")
    {
        stp_print_message("Please enter an output file name.");
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "Footer1"), 
                     "Please enter an output file name.");
        editor_set_is_busy(False);
        ui_busy(to_ui_owner(theprop), False);

        return 1;
    }
    else
    {
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "Footer1"), "");
    }

    int x;
    list file_names;
    int files_selected = 0;
    string files = "";

    if (parent_func != "WholeModel")
    {
        files_selected = stp_editor_files_selected();
        if (files_selected)
        {
            file_names = stp_editor_file_names_selected();
            for (x=0; x<list_count(file_names); x++)
                files += list_get(file_names, x) + " ";
        }
    }

    if (parent_func == "WholeModelFiles")
    {
        parent_func = stp_editor_file_type_selected();
        if (parent_func == "GsDfe")
            parent_func = "Dfe"; 
        else if (parent_func == "DyDfe")
            parent_func = "Dfe"; 
    }
    
    string cmdstr = "qrp -p " + current_projdir() + " -s " + current_system();
    cmdstr = cmdstr + " -x parent_func " + parent_func;
    cmdstr = cmdstr + " -x out_form " + out_form;
// ECR 7410 begin
    if (string_length(out_file) > 0)
        cmdstr = cmdstr + " -x out_file " + out_file;
// ECR 7410 end
    if (files_selected)
        cmdstr += " -x sem_file_names \"" + files + "\"";

    cmdstr += " -forward_messages " + editor_get_msgd_handle();

    if (out_form == 0) // mif
        cmdstr += " -t mif -f report -o " + out_file;
    else if (out_form == 1) // rtf
        cmdstr += " -t rtf -f basic -o " + out_file;
    else if (out_form == 2) // html
        cmdstr += " -t html -f basic -o " + out_file;

    cmdstr = cmdstr + " se/qrl/check/check_all.qrl";

// ECR 7410 begin
    if (is_windows_platform())
    {
        int view_after_run_checked = ui_get_value(to_ui_prop(to_ui_owner(theprop), "view_after_run"));
        if (view_after_run_checked)
            cmdstr = cmdstr + " -viewafter";
    }
// ECR 7410 end

    if (out_form == 3)
        print_message("Sending output to message log.");
    else
        print_message("Sending output to '" + out_file + "' and message log.");

// ECR 7410 begin
//    editor_system(cmdstr, NULL);
    system(cmdstr);
    if (view_after_run_checked)
        shell_execute("open", out_file);
// ECR 7410 end

    editor_set_is_busy(False);
    ui_busy(to_ui_owner(theprop), False);

    return 0;
}

// ECR 3651a begin
int choice_index = 3;
// ECR 3651a end

int
select_format_check_sem_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    choice_index = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_form"));
    string out_file_name = path_compose(current_projdir() + current_system(), 
        "misc_files", "sem_check_rpt"); // ECR 7403
    string file_ext = "";

    if (choice_index == 3)
    {
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), "");
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), False);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), False);
        // ECR 3651a end
    }
    else if (choice_index == 0)
    {
        file_ext = ".mif";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }
    else if (choice_index == 1)
    {
        file_ext = ".rtf";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }
    else if (choice_index == 2)
    {
        file_ext = ".html";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }

// ECR 7410 begin
    if (is_windows_platform())
    {
        if (choice_index == 3)
            ui_activate(to_ui_prop(to_ui_owner(theprop), "view_after_run"), False);
        else
            ui_activate(to_ui_prop(to_ui_owner(theprop), "view_after_run"), True);
    }
// ECR 7410 end

    return 0;
}

// ECR 3651a begin
int select_out_file_callback(ui_event_tp event, ui_prop theprop, int id, string value)
{
    string str;
    ui_owner uiOwner;

    uiOwner = to_ui_owner(theprop);
    str = ui_get_value(to_ui_prop(uiOwner, "out_dir"));

    if(choice_index == 0)
        str = editor_show_filechooser("Open File", str, "Mif Files|*.mif|All Files (*.*)|*");
    else if(choice_index == 1)
        str = editor_show_filechooser("Open File", str, "RTF Files|*.rtf|All Files (*.*)|*");
    else if(choice_index == 2)
        str = editor_show_filechooser("Open File", str, "HTML Files|*.html|All Files (*.*)|*");
    else
        str = editor_show_filechooser("Open File", str, "All Files (*.*)|*");

    if (str != NULL && string_length(str) != 0)
    {
        str = path_normalize(str);
        ui_set_value(to_ui_prop(uiOwner, "out_dir"), str);
    }

    return 0;
}
// ECR 3651a end

