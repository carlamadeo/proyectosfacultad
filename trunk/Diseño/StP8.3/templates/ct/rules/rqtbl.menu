//
// 	sccsid[] = %W% %Y% %D%
// 	StP/Core
// 	Confidential property of Aonix, Inc.
// 	Copyright (c) 1992-1998
// 	All rights reserved
//

Include "rules/gte_menu_bar.std"
Include "rules/version_menu.std"

Menu File
{
    { MenuEntry
	{ Name Load }
	{ Builtin "EditorQrlEval REQ_Load();"}
    }
    { MenuEntry
	{ Name Import }
	{ Label "&Import Requirements from ASCII File..." }
	{ Builtin "EditorQrlEval REQ_AskForImportFile();"}
	{ PlaceBefore Save }
    }
}

Menu View
{
    { Spacer
	{ Name RqtblSpacer1 }
//	{ PlaceAfter HoldView }
    }
    { MenuEntry
	{ Name ToggleSupersededRqmts }
	{ Label "&Toggle Superseded Requirements" }
	{ Builtin "EditorQrlEval REQ_ToggleSupersededRqmts();" }
        { Accelerator
             { Label "Ctrl+T" }
             { Value "Ctrl<Key>t" }
        }
    }
    { MenuEntry
	{ Name NewPhase }
	{ Label "Switch &Project Phase..." }
	{ Builtin "EditorQrlEval REQ_RequestRequirementPhase();" }
	{ ActiveFunc REQ_RequestRequirementPhase_IsActive }
    }
    { Spacer
	{ Name RqtblSpacer2 }
    }
    { MenuEntry
	{ Name Reset }
	{ Label "Table &Refresh" }
	{ Builtin "EditorQrlEval REQ_Reset();" }
    }
}

Menu MenuBarEdit
{
    // ECR 6169 begin
    { Pin True }
    // ECR 6169 end
    { MenuEntry
	{ Name Create }
	{ Label "Cr&eate" }
	{ Builtin "EditorQrlEval REQ_Create();" }
        { PlaceBefore ClearLabel }
        { Accelerator
             { Label "Ctrl+Y" }
             { Value "Ctrl<Key>y" }
        }
    }
    { MenuEntry
	{ Name Refine }
	{ Label "&Refine" }
	{ Builtin "EditorQrlEval REQ_Refine();" }
	{ ActiveFunc REQ_RefineIsActive }
        { PlaceBefore Create }
        { Accelerator
             { Label "Ctrl+I" }
             { Value "Ctrl<Key>i" }
        }
    }
    { MenuEntry
	{ Name ClearLabel }
	{ Builtin "EditorQrlEval REQ_Delete();" }
	{ ActiveFunc REQ_DeleteIsActive }
    }
    { MenuEntry
	{ Name DeleteUndo }
	{ Label "&Undo Delete" }
	{ Builtin "EditorQrlEval REQ_DoDeleteUndo();" }
	{ ActiveFunc REQ_DoDeleteUndo_IsActive }
	{ PlaceAfter ClearLabel }
        { Accelerator
             { Label "Ctrl+Z" }
             { Value "Ctrl<Key>z" }
        }
    }
    { MenuEntry
	{ Name Copy }
	{ Label "&Copy Cell Text" }
	{ Builtin "EditorQrlEval REQ_CopyCellText();" }
	{ ActiveFunc REQ_CopyCellText_IsActive }
	{ PlaceBefore Spacer1 }
    }
    { MenuEntry
	{ Name Paste }
	{ Label "&Paste Cell Text" }
	{ Builtin "EditorQrlEval REQ_PasteCellText();" }
	{ ActiveFunc REQ_PasteCellText_IsActive }
	{ PlaceAfter Copy }
    }
    { MenuEntry { Name Undo } 
		{ Show False }
		{ ActiveFunc REQ_undo_IsActive } 
    }
    { MenuEntry { Name Redo } 
		{ Show False } 
		{ ActiveFunc REQ_redo_IsActive } 
    }
    { MenuEntry { Name Cut } { Show False } }
    { SubMenu { Name LabelMenu } { Show False } }
    { SubMenu { Name InsertRowAfterMenu } { Show False } }
    { SubMenu { Name InsertRowBeforeMenu } { Show False } }
    { SubMenu { Name InsertColBeforeMenu } { Show False } }
    { SubMenu { Name InsertColAfterMenu } { Show False } }
    { MenuEntry { Name InsertCells } { Show False } }
    { MenuEntry { Name Span } { Show False } }
    { MenuEntry { Name Unspan } { Show False } }
}

Menu Tools
{
    { InMenuBar True }
    { MenuEntry { Name CheckSemantics } { Show False } }
    { MenuEntry { Name CheckSyntax } { Show False } }
    { SubMenu
        { Name Allocation }
	{ Label "&Allocate" }
	{ PlaceAfter Spacer1 }
    }
    { SubMenu
	{ Name Query }
	{ Label "&Query" }
        { PlaceAfter Allocation }
    }
    { SubMenu
	{ Name Sort }
	{ Label "&Sort" }
        { PlaceAfter Query }
    }
    { Spacer { PlaceBefore Options } }
}

Include "rules/gte_edit_menu.std"

Menu Edit
{
    // ECR 6169 begin
    // { Pin False }
    { Pin True }
    // ECR 6169 end
    { MenuEntry
	{ Name Create }
	{ Label "Cr&eate" }
	{ Builtin "EditorQrlEval REQ_Create();" }
        { PlaceBefore ClearLabel }
    }
    { MenuEntry
	{ Name Refine }
	{ Label "&Refine" }
	{ Builtin "EditorQrlEval REQ_Refine();" }
	{ ActiveFunc REQ_RefineIsActive }
        { PlaceBefore Create }
    }
    { MenuEntry
	{ Name ClearLabel }
	{ Builtin "EditorQrlEval REQ_Delete();" }
	{ ActiveFunc REQ_DeleteIsActive }
    }
    { MenuEntry
	{ Name DeleteUndo }
	{ Label "&Undo Delete" }
	{ Builtin "EditorQrlEval REQ_DoDeleteUndo();" }
	{ ActiveFunc REQ_DoDeleteUndo_IsActive }
        { PlaceAfter ClearLabel }
    }
    { MenuEntry
	{ Name Copy }
	{ Label "&Copy Cell Text" }
	{ Builtin "EditorQrlEval REQ_CopyCellText();" }
	{ ActiveFunc REQ_CopyCellText_IsActive }
	{ PlaceBefore Spacer1 }
    }
    { MenuEntry
	{ Name Paste }
	{ Label "&Paste Cell Text" }
	{ Builtin "EditorQrlEval REQ_PasteCellText();" }
	{ ActiveFunc REQ_PasteCellText_IsActive }
	{ PlaceAfter Copy }
    }
    { MenuEntry { Name Undo } { Show False } }
    { MenuEntry { Name Redo } { Show False } }
    { MenuEntry { Name Cut } { Show False } }
    { SubMenu { Name LabelMenu } { Show False } }
    { SubMenu { Name NavigationSubmenu } { Show False } }    //ECR 3792
    { MenuEntry { Name ListLabels } { Show False } }
    { MenuEntry { Name ScaleToLabel } { Show False } }
    { MenuEntry { Name DefaultScale } { Show False } }
}

// Below commands were originally used to work around gte repsync errors
// caused by incorrect mapping of spanning cells to DB.

Command RepUpdate
{
    { PrintName "Save & Update Repository" }
    { Accelerator "r" }
    { StopOnFailure True }
    { Builtin "EditorExecCommand CheckSyntax" }
    { Builtin "EditorQrlEvalNoSave REQ_RepSynch();" }
}

Menu Allocation
{
// ECR 6149
    { Pin True }
    { Label "Allocate" }
// ECR 6149 end
    { MenuEntry
	{ Name Assign }
	{ Label "&Allocate" }
	{ Builtin "EditorQrlEval REQ_Assign();" }
	{ ActiveFunc REQ_AssignIsActive }
    }
    { MenuEntry
	{ Name Unassign }
	{ Label "&Deallocate" }
	{ Builtin "EditorQrlEval REQ_Unassign();" }
	{ ActiveFunc REQ_AssignIsActive }
    }
    { MenuEntry
	{ Name Inherit }
	{ Label "&Inherit" }
	{ Builtin "EditorQrlEval REQ_Inherit();" }
	{ ActiveFunc REQ_InheritIsActive }
    }
    { Spacer { Name Spacer2 } }
    { MenuEntry
	{ Name UnassignAny }
	{ Label "D&eallocate Any Allocations" }
	{ Builtin "EditorQrlEval REQ_UnassignAny();" }
	{ ActiveFunc REQ_UnassignAny_IsActive }
    }
}

Menu Query
{
// ECR 6149
    { Pin True }
    { Label "Query" }
// ECR 6149 end
    { MenuEntry
	{ Name CurrentlySatisfied }
	{ Label "&Allocated Requirements of Target Object" }
	{ Builtin "EditorQrlEval REQ_ShadeAllocatedRqmts();" }
	{ ActiveFunc REQ_ShowAllocatedIsActive }
    }
    { MenuEntry
	{ Name LeavesNotYetSatisfied }
	{ Label "&Unallocated Requirements" } 
	{ Builtin "EditorQrlEval REQ_ShowAllUnsatisfiedLeaves();" }
    }
    { MenuEntry
	{ Name RequirementCycles }
	{ Label "&Cycles in Requirements" }
	{ Builtin "EditorQrlEval REQ_ShowRequirementCycles();" }
    }
    { Spacer { Name Spacer1 } }
    { MenuEntry
	{ Name AllSatisfied }
	{ Label "&Objects that Satisfy Selected Requirements" } 
	{ Builtin "EditorQrlEval REQ_AllSatisfied();" }
	{ ActiveFunc REQ_SatisfactionQueryIsActive }
    }
    { Spacer { Name Spacer2 } }
    { MenuEntry
	{ Name SupersededDefinitions }
	{ Label "&Superseded Requirement Definition" }
	{ Builtin "EditorQrlEval REQ_ShowSupersededDefinition();" }
	{ ActiveFunc REQ_ShowSupersededDefinition_IsActive }
    }
    { Spacer { Name Spacer3 } }
    { MenuEntry
	{ Name GetNextQueryResult }
	{ Label "Go To &Next Query Result" }
	{ Builtin "EditorQrlEval REQ_GetNextSatisfaction();" }
	{ ActiveFunc REQ_GetNextSatisfactionIsActive }
        { Accelerator
             { Label "Ctrl+N" }
             { Value "Ctrl<Key>N" }
        }
    }
}

Menu Sort
{
// ECR 6149
    { Pin True }
    { Label "Sort" }
// ECR 6149 end
    { MenuEntry
	{ Name AlphaSort}
	{ Label "&Alphanumerically by Selected Column" }
	{ Builtin "EditorQrlEval REQ_AlphaSort();" }
	{ ActiveFunc REQ_SortIsActive }
    }
    { MenuEntry
	{ Name NumericSort}
	{ Label "&Numerically by Selected Column" }
	{ Builtin "EditorQrlEval REQ_NumericSort();" }
	{ ActiveFunc REQ_SortIsActive }
    }
    { MenuEntry
	{ Name MoveSatisfiedToTop }
	{ Label "Query Results &To Top" }
	{ Builtin "EditorQrlEval REQ_MoveSatisfiedToTop();" }
	{ ActiveFunc REQ_MoveSatisfiedToTopIsActive }
    }
}

// ECR 4052
Menu MenuBarEdit
{
    { ParseCondition "is_product_uml();" }
    { MenuEntry
	{ Name EditDiagSubsystem }
	{ Label "Assign Table to Subsystem..." }
	{ Builtin "EditorQrlEvalNoSave setTableSubsystem();" }
	{ PlaceBefore FileAnnotEdit }
    }
}
