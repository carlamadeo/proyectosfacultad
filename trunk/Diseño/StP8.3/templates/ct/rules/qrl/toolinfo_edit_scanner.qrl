struct tv_anly
{
string		tab1;
string		comment;
string		tab2;
string		name;
string		tab3;
string		equal;
string		tab4;
string		value;
};

string tv_main_toolinfo_file = NULL;

// tv_strline_get returns the "line_nr"-th line of "the_string"
// beginning with linenumber 0
int get_line_nr_cache = -1;
int get_line_pos_cache = -1;

string tv_strline_get( string the_string, int line_nr )
{
int		line_begin = -1;
int		i = 0;

	if ( line_nr >= tv_strline_count( the_string ) )
		return( "" );

	if ( line_nr == 0 )
	{
		return( string_extract( the_string, 0, string_find( the_string, 0, "\n" ) ) );
	}

    if( get_line_nr_cache != -1 && get_line_nr_cache < line_nr ) {
        i = get_line_nr_cache;
        line_begin = get_line_pos_cache;
    }
        
	for ( ; i<line_nr; i++ )
	{
		line_begin = string_find( the_string, line_begin+1, "\n" );
	}
    get_line_nr_cache = line_nr;
    get_line_pos_cache = line_begin;
	return( string_extract( the_string, line_begin+1, string_find( the_string, line_begin+1, "\n" ) - line_begin - 1 ) );
}

// tv_strline_count counts the number of lines in string
int line_nr_cache = -1;

int tv_strline_count( string the_string )
{
int		line_begin = -1;
int		count = 1;

    if(line_nr_cache != -1)
        return ( line_nr_cache );

    if ( string_length( the_string ) == 0 ) {
        line_nr_cache = 0;
		return( 0 );
    }

	while ( ( line_begin = string_find( the_string, ( line_begin + 1 ), "\n" ) ) != string_length( the_string ) )
		count++;

	line_nr_cache = count;
    return( count );
}

void reset_tv_cache()
{
    line_nr_cache = -1;
    get_line_nr_cache = -1;
    get_line_pos_cache = -1;
}

string tv_strline_get_first_char( string the_string )
{
	if ( string_length( the_string ) > 0 )
		return( string_extract( the_string, 0, 1 ) );
	else
		return( "" );
}

string tv_strline_get_rest_string( string the_string )
{
	if ( string_length( the_string ) <= 1 )
		return( "" );
	else
		return( string_extract( the_string, 1, string_length( the_string ) - 1 ) );
}

list tv_anly_scan_string( string tv_scan_line )
{
list				tv_scan_list;
string				tv_scan_char;
string				tv_scan_string;
int					tv_scan_state;

	tv_scan_list = list_create( "string", 0 );
	tv_scan_state = 0;
	
	while ( tv_scan_state != 9 )
	{
		if ( tv_scan_state == 0 )
		{
			tv_scan_char = tv_strline_get_first_char( tv_scan_line );
			tv_scan_string = "";
			if ( tv_scan_char == "" )
			{
				tv_scan_state = 9;
			}
			else
			{
				tv_scan_line = tv_strline_get_rest_string( tv_scan_line );
				if ( tv_scan_char == "%" )
					tv_scan_state = 1;
				else
				if ( tv_scan_char == "=" )
					tv_scan_state = 2;
				else
				if ( tv_scan_char == " " )
					tv_scan_state = 3;
				else
					tv_scan_state = 4;
			}
		}
		else
		if ( tv_scan_state == 1 )
		{
			list_append( tv_scan_list, "%" );
			tv_scan_state = 0;
		}
		else
		if ( tv_scan_state == 2 )
		{
			list_append( tv_scan_list, "=" );
			tv_scan_state = 0;
		}
		else
		if ( tv_scan_state == 3 )
		{
			tv_scan_string += " ";
			tv_scan_char = tv_strline_get_first_char( tv_scan_line );
			if ( tv_scan_char == " " )
			{
				tv_scan_line = tv_strline_get_rest_string( tv_scan_line );
			}
			else
			{
				list_append( tv_scan_list, tv_scan_string );
				tv_scan_state = 0;
			}
		}	
		else
		if ( tv_scan_state == 4 )
		{
			tv_scan_string += tv_scan_char;
			tv_scan_char = tv_strline_get_first_char( tv_scan_line );
			if (	( tv_scan_char != " " ) && ( tv_scan_char != "=" ) &&
					( tv_scan_char != "%" ) && ( tv_scan_char != "" ) )
			{
				tv_scan_line = tv_strline_get_rest_string( tv_scan_line );
			}
			else
			{
				list_append( tv_scan_list, tv_scan_string );
				tv_scan_state = 0;
			}
		}	
	}
	
	return( tv_scan_list );
}

tv_anly tv_anly_get_info( list tv_anly_list )
{
tv_anly		the_anly_struct = NULL;
string		actual_part;
int			state = 0;
int			idx = 0;
int			i;

	the_anly_struct.tab4 = "";
	the_anly_struct.value = "";

	if ( list_count( tv_anly_list ) < 2 )
		return( NULL );

	while ( state != 19 )
	{
		if ( idx == list_count( tv_anly_list ) )
		{
			if ( state > 6 )
				return( the_anly_struct );
			else
				return( NULL );
		}

		actual_part = list_get( tv_anly_list, idx );

		if ( state == 0 )
		{
			if ( string_extract( actual_part, 0, 1 ) == " " )
			{
				the_anly_struct.tab1 = actual_part;
				state = 1;
			}
			else
			if ( actual_part == "%" )
			{
				the_anly_struct.tab1 = "";
				the_anly_struct.comment = actual_part;
				state = 2;
			}
			else
			if ( string_extract( actual_part, 0, 1 ) != "%" && string_extract( actual_part, 0, 1 ) != " " )
			{
				the_anly_struct.tab1 = "";
				the_anly_struct.comment = "";
				the_anly_struct.tab2 = "";
				the_anly_struct.name = actual_part;
				state = 5;
			}
			else
				return( NULL );
		}
		else
		if ( state == 1 )
		{
			if ( actual_part == "%" )
			{
				the_anly_struct.comment = actual_part;
				state = 2;
			}
			else
			if ( string_extract( actual_part, 0, 1 ) != "%" && string_extract( actual_part, 0, 1 ) != " " )
			{
				the_anly_struct.comment = "";
				the_anly_struct.tab2 = "";
				the_anly_struct.name = actual_part;
				state = 5;
			}
			else
				return( NULL );
		}
		else
		if ( state == 2 )
		{
			if ( string_extract( actual_part, 0, 1 ) == " " )
			{
				the_anly_struct.tab2 = actual_part;
				state = 3;
			}
			else
			if ( string_extract( actual_part, 0, 1 ) != "%" && string_extract( actual_part, 0, 1 ) != " " )
			{
				the_anly_struct.tab2 = "";
				the_anly_struct.name = actual_part;
				state = 5;
			}
			else
				return( NULL );
		}
		else
		if ( state == 3 )
		{
			if ( string_extract( actual_part, 0, 1 ) != "%" && string_extract( actual_part, 0, 1 ) != " " )
			{
				the_anly_struct.name = actual_part;
				state = 5;
			}
			else
				return( NULL );
		}
		else
		if ( state == 5 )
		{
			if ( string_extract( actual_part, 0, 1 ) == " " )
			{
				the_anly_struct.tab3 = actual_part;
				state = 6;
			}
			else
			if ( actual_part == "=" )
			{
				the_anly_struct.tab3 = "";
				the_anly_struct.equal = actual_part;
				state = 7;
			}
			else
				return( NULL );
		}
		else
		if ( state == 6 )
		{
			if ( actual_part == "=" )
			{
				the_anly_struct.equal = actual_part;
				state = 7;
			}
			else
				return( NULL );
		}
		else
		if ( state == 7 )
		{
			if ( string_extract( actual_part, 0, 1 ) == " " )
			{
				the_anly_struct.tab4 = actual_part;
				state = 19;
			}
			else
			{
				the_anly_struct.tab4 = "";
				the_anly_struct.value = actual_part;
				state = 19;
			}
		}

		idx ++;
	}
	
	for ( i = idx; i < list_count( tv_anly_list ); i++ )
	{
		the_anly_struct.value += list_get( tv_anly_list, i );
	}

	return( the_anly_struct );
}

string tv_anly_make_line( tv_anly the_anly )
{
	return(	the_anly.tab1 + the_anly.comment + 
			the_anly.tab2 + the_anly.name + 
			the_anly.tab3 + the_anly.equal +
			the_anly.tab4 + the_anly.value );
}

void tv_load_tv_list ( )
{
string				tv_toolinfo = "";
string				new_toolinfo;
string				tv_file_input = "";

tv_toolinfo_var		tv_actual, tv_tmp_actual;
string				tv_file_line;
list				tv_file_line_list;
tv_anly				tv_file_line_anly;

int					i,idx;

// (Re)Initialize the ToolInfo Variables List
	tv_toolinfo_vars_list = list_create( "tv_toolinfo_var", 0 );

// Get first ToolInfo File's Name
	tv_toolinfo = path_normalize( toolinfo_variable( "ToolInfo" ) );
    tv_main_toolinfo_file = tv_toolinfo;
	if ( !tv_is_absolut_path( tv_toolinfo ) )
		tv_toolinfo = path_compose( stp_get_product_path(), tv_toolinfo );

    tv_actual.deleted = False;
	do
	{
// Load ToolInfo File in Memory
		new_toolinfo = "";
		tv_file_input = read_file( tv_toolinfo );
        reset_tv_cache();

// Search for ToolInfo Variables in ToolInfo File and add them to the ToolInfo Variables List
		for ( i = 0; i < tv_strline_count( tv_file_input ); i ++ )
		{
			tv_file_line = tv_strline_get( tv_file_input, i );
			tv_file_line_list = tv_anly_scan_string( tv_file_line );
			tv_file_line_anly = tv_anly_get_info( tv_file_line_list );
			
			if ( tv_file_line_anly != NULL )
			{
				if ( tv_file_line_anly.comment == "%" )
					tv_actual.enabled = False;
				else
					tv_actual.enabled = True;
				tv_actual.name = tv_file_line_anly.name;
				tv_actual.value = tv_file_line_anly.value;
				tv_actual.orig_value = tv_file_line_anly.value;
				tv_actual.orig_enabled = tv_actual.enabled;
				tv_actual.line = i;
				tv_actual.file = tv_toolinfo;

				if ( tv_actual.name == "ToolInfo" )
				{
					if ( tv_actual.enabled )
					{
						new_toolinfo = tv_actual.value;
						if ( !tv_is_absolut_path( new_toolinfo ) )
							new_toolinfo = path_compose( stp_get_product_path(), new_toolinfo );
					}
				}
				else
				{
					idx = tv_search_tv_name( tv_actual.name );
                    if ( idx != -1 )
                    {
                        tv_tmp_actual = list_get( tv_toolinfo_vars_list, idx );
                        if ( tv_tmp_actual.enabled == False || tv_tmp_actual.file == tv_toolinfo )
                        {
                            list_delete( tv_toolinfo_vars_list, idx );
                            list_append( tv_toolinfo_vars_list, tv_actual );
                        }
                    }
                    else
						list_append( tv_toolinfo_vars_list, tv_actual );
				}
			}

			list_clear( tv_file_line_list );
		}
        tv_toolinfo = new_toolinfo;
	}
	while ( new_toolinfo != "");

// If not found, generate standard ToolInfo Variables
    tv_actual.enabled = False;
    tv_actual.orig_enabled = False;
    tv_actual.value = "";
    tv_actual.orig_value = "";
    tv_actual.line = -1;
    tv_actual.file = "";
	if ( tv_search_tv_name ( "system" ) == -1 )
	{
		tv_actual.name = "system";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
	if ( tv_search_tv_name ( "projdir" ) == -1 )
	{
		tv_actual.name = "projdir";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
	if ( tv_search_tv_name ( "scriptman_script_editor" ) == -1 )
	{
		tv_actual.name = "scriptman_script_editor";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
	if ( tv_search_tv_name ( "postscript_conversion" ) == -1 )
	{
		tv_actual.name = "postscript_conversion";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
	if ( tv_search_tv_name ( "msgd_host" ) == -1 )
	{
		tv_actual.name = "msgd_host";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
	if ( tv_search_tv_name ( "msgd_port" ) == -1 )
	{
		tv_actual.name = "msgd_port";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}

    if ( tv_search_tv_name ( "dateformat" ) == -1 )
	{
		tv_actual.name = "dateformat";
		tv_actual.value = "%M/%D/%Y";
		tv_actual.orig_value = "%M/%D/%Y";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}

    tv_actual.value = "False";
    tv_actual.orig_value = "False";
    if ( tv_search_tv_name ( "cpp_code_gen" ) == -1 )
	{
		tv_actual.name = "cpp_code_gen";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
    if ( tv_search_tv_name ( "java_code_gen" ) == -1 )
	{
		tv_actual.name = "java_code_gen";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
    if ( tv_search_tv_name ( "ejb_code_gen" ) == -1 )
	{
		tv_actual.name = "ejb_code_gen";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
    if ( tv_search_tv_name ( "ada95_code_gen" ) == -1 )
	{
		tv_actual.name = "ada95_code_gen";
		list_append( tv_toolinfo_vars_list, tv_actual );
	}
}

boolean tv_save_tv_list( )
{
string				tv_toolinfo = "";
string				tv_file_input = "";
string				tv_file_output = "";

tv_toolinfo_var		tv_actual;
string				tv_file_line;
list				tv_file_line_list;
tv_anly				tv_file_line_anly;

int					i,idx;

// Get first ToolInfo File's Name
	tv_toolinfo = path_normalize( toolinfo_variable( "ToolInfo" ) );
	if ( !tv_is_absolut_path( tv_toolinfo ) )
		tv_toolinfo = path_compose( stp_get_product_path(), tv_toolinfo );

    if(write_file_access(tv_toolinfo) == True) {
// Load ToolInfo File in Memory
        tv_file_input = read_file( tv_toolinfo );
        reset_tv_cache();

// Search for changed ToolInfo Variables in ToolInfo File and replace them with the new values
        for ( i = 0; i < tv_strline_count( tv_file_input ); i++ )
        {
            tv_file_line = tv_strline_get( tv_file_input, i );
            tv_file_line_list = tv_anly_scan_string( tv_file_line );
            tv_file_line_anly = tv_anly_get_info( tv_file_line_list );
    
            if ( tv_file_line_anly == NULL )
            {
                tv_file_output += tv_file_line + "\n";
            }
            else
            {
                idx = tv_search_tv_name( tv_file_line_anly.name );
                if ( idx != -1 )
                {
                    tv_actual = list_get( tv_toolinfo_vars_list, idx );
                    if ( tv_actual.file == tv_toolinfo && tv_actual.line == i )
                    {
                        if ( tv_actual.deleted )
                            list_delete( tv_toolinfo_vars_list, idx );
                        else if ( tv_actual.value != tv_actual.orig_value || tv_actual.enabled != tv_actual.orig_enabled )
                        {
                            if ( tv_actual.enabled == False && tv_is_tv_name_in_main( tv_actual.name ) )
                                tv_file_line_anly.value = tv_actual.orig_value;
                            else
                                tv_file_line_anly.value = tv_actual.value;
                            if ( tv_actual.enabled )
                                tv_file_line_anly.comment = "";
                            else
                                tv_file_line_anly.comment = "%";
        
                            tv_file_output += tv_anly_make_line( tv_file_line_anly ) + "\n";
        
                            tv_actual.orig_value = tv_actual.value;
                            tv_actual.orig_enabled = tv_actual.enabled;
                            list_set( tv_toolinfo_vars_list, idx, tv_actual );
                        }
                        else
                            tv_file_output += tv_file_line + "\n";
                    }
                    else
                        tv_file_output += tv_file_line + "\n";
                }
                else if ( to_upper( tv_file_line_anly.name ) == "TOOLINFO" )
                    tv_file_output += tv_file_line + "\n";
            }
    
            list_clear( tv_file_line_list );
        }
    
        tv_file_output = string_strip( tv_file_output, "T", "\n" ) + "\n";
    }
    else {
        string old_tv_toolinfo = tv_toolinfo;
        // check if this write-protected file is a 'global' ToolInfo file
        if(string_strip(path_part(tv_toolinfo), "T", "/\\") == stp_get_product_path()) {
            if(is_windows_platform()) {
                // is it the 'default' one?
                if(file_part(tv_toolinfo) == "ToolInfo.W32NTX86" || file_part(tv_toolinfo) == "ToolInfo") {
                    // .... so use the home directory
                    tv_toolinfo = path_compose(home_directory(), "ToolInfo");
                    if(check_file_access(path_compose(tv_toolinfo)) == False) {
                        editor_confirm("Your ToolInfo file " + tv_toolinfo + "is not writeable\n" +
                                       "Please, make your ToolInfo file writable and try again.",
                                           "OK", "Abort");
                    }
                }
                else {
                    // seems to be a customized ToolInfo ... see below
                    editor_confirm("Your ToolInfo file " + old_tv_toolinfo + " is not writeable\n" +
                                   "Please, make your ToolInfo file writable and try again.",
                                       "OK", "Abort");
                    return False;
                }
            }
            // is it the 'default' one?
            else if(file_part(tv_toolinfo) == "ToolInfo." + environment_variable("IDEPLATFORM") || file_part(tv_toolinfo) == "ToolInfo") {
                // .... so use the home directory
                tv_toolinfo = path_compose(home_directory(), ".ToolInfo." + environment_variable("IDEPLATFORM"));
                if(check_file_access(path_compose(tv_toolinfo)) == False) {
                    editor_confirm("Your ToolInfo file " + tv_toolinfo + "is not writeable\n" +
                                   "Please, make your ToolInfo file writable and try again.",
                                       "OK", "Abort");
                }
            }
            else {
                // seems to be a customized ToolInfo ... see below
                editor_confirm("Your ToolInfo file " + old_tv_toolinfo + " is not writeable\n" +
                               "Please, make your ToolInfo file writable and try again.",
                                   "OK", "Abort");
                return False;
            }
        }
        else {
            // there is a toolinfo file at some customized place, but write proteced.
            // the user has to change the environment ToolInfo ...
            // but this it is outside the scope of this neat editor
            editor_confirm("Your ToolInfo file " + old_tv_toolinfo + " is not writeable\n" +
                           "Please, make your ToolInfo file writable and try again.",
                               "OK", "Abort");
            return False;
        }
        tv_file_output = "%set up the toolInfo chain\nToolInfo = " + old_tv_toolinfo + "\n\n";
    }
	
// Also save new ToolInfo Variables at the end of the file
	for ( i = 0; i < list_count( tv_toolinfo_vars_list ); i ++ )
	{
		tv_actual = list_get( tv_toolinfo_vars_list, i );
        if ( tv_actual.value != tv_actual.orig_value || tv_actual.enabled != tv_actual.orig_enabled )
		{
            tv_actual.orig_value = tv_actual.value;
            tv_actual.orig_enabled = tv_actual.enabled;
			list_set( tv_toolinfo_vars_list, i, tv_actual );

			tv_file_line = "";
			if ( ( tv_actual.value != "" ) || ( !tv_is_tv_name_in_main( tv_actual.name ) ) )
			{
				if ( !tv_actual.enabled )
					tv_file_line = "%";
				
				tv_file_line += tv_actual.name + "=" + tv_actual.value + "\n";
				tv_file_output += tv_file_line;
			}
		}
	}

// Save ToolInfo File
    put_environment_variable("ToolInfo=" + tv_toolinfo);
	write_file( tv_toolinfo, tv_file_output );
    return True;
}

boolean check_file_access(string file)
{
    if(file_exists(file) == True)
        return write_file_access(file);
    write_file(file, "x");
    return file_exists(file);
}
