//////////////////////////////////////////////////////////////////////////////
//
// 	sccsid[] = %W% %Y% %D%
// 	StP/Core
// 	Confidential property of Interactive Development Environments, Inc.
// 	Copyright (c) 1992-1993
// 	All rights reserved
//
//	Qrl file for integration with HP SoftBench
//
//////////////////////////////////////////////////////////////////////////////

#include "rules/qrl/ci.qrl"

const string HOSTNAME = hostname();	// quicker than calling it every time

void
main()
{
    softbench_connect();	// builtin - connects to BMS

    // register all the event callbacks

    callback_create("STATUS", "sb_status");
    callback_create("START", "sb_start");
    callback_create("STOP", "sb_stop");
    callback_create("ICONIFY", "sb_iconify");
    callback_create("NORMALIZE", "sb_normalize");
    callback_create("NAVIGATE", "navigate_to_stp");
    callback_create("SHOW-DEFINITION", "navigate_status");
    callback_create("DESKTOP", "sb_stpdt");
    callback_create("EDIT", "sb_edit");
    callback_create("PRINT", "sb_print");

    callback_create("Navigate", "navigate_to_sb");

    // notify the msg server of events that we want to receive

    sb_accept("R - STATUS - - - -");
    sb_accept("R - START - - - -");
    sb_accept("R STP START * * *");
    sb_accept("R - STOP - - - -");
    sb_accept("R STP STOP * * *");
    sb_accept("R - ICONIFY - - - -");
    sb_accept("R STP ICONIFY * * *");
    sb_accept("R - NORMALIZE - - - -");
    sb_accept("R STP NORMALIZE * * *");
    sb_accept("N STATIC SHOW-DEFINITION" + sb_context("src_files"));
    sb_accept("F STATIC SHOW-DEFINITION" + sb_context("src_files"));
    sb_accept("R STP DESKTOP * * *");
    sb_accept("R STP EDIT * * *");
    sb_accept("R STP PRINT * * *");

    // let everyone know we're ready...

    sb_notify("STP STATUS * * * * READY");

    main_event_loop();		// builtin
}

enum sbmsg_tp 
{
    SB_REQUEST,
    SB_NOTIFICATION,
    SB_FAILURE
};

int nextId = 1;

int 
sb_send(string id, sbmsg_tp rnf, list av)
{
    message   msg;
    list      args = list_create("string", 0);

    if (id == NULL || id == "")
    {
	id = to_string(nextId) + "-" + to_string(getpid()) + "-" + HOSTNAME;
	nextId = nextId + 1;
    }
    msg.type = "SoftBench";
    msg.class = "";
    list_append(args, id);

    if (rnf == SB_REQUEST)
	list_append(args, "R");
    else if (rnf == SB_NOTIFICATION)
	list_append(args, "N");
    else // SB_FAILURE
	list_append(args, "F");

    list_concatenate(args, av);
    msg.arglist = args;
    return(message_send(msg));
}

// register an interest in a message

int
sb_accept(string what)
{
    return(sb_send(NULL, 
		   SB_REQUEST, 
		   string_to_list("MSG-SERVER ACCEPT * * " + what, " ")));
}

// send a Notification

int
sb_notify(string what)
{
    return(sb_send(NULL, 
		   SB_NOTIFICATION,
		   string_to_list(what, " ")));
}

// send a Request

int
sb_request(string what)
{
    return(sb_send(NULL, 
		   SB_REQUEST,
		   string_to_list(what, " ")));
}

// send a Reply

int
sb_reply(message msg, sbmsg_tp status)
{
    list      args = msg.arglist;
    string    id;

    id = list_get(args, 1);
    list_delete(args, 0);
    list_delete(args, 0);
    list_delete(args, 0);
    return(sb_send(id, status, args));
}

// report status

void
sb_status(message msg)
{
    list_append(msg.arglist, "READY");
    sb_reply(msg, SB_NOTIFICATION);
}

// callback for START msg

void
sb_start(message msg)
{
    sb_reply(msg, SB_NOTIFICATION);
}

// callback for STOP msg

void
sb_stop(message msg)
{
    sb_reply(msg, SB_NOTIFICATION);
    stp_quit();
}

// callback for ICONIFY msg

void
sb_iconify(message msg)
{
    stp_iconify();
    sb_reply(msg, SB_NOTIFICATION);
}

// callback for NORMALIZE msg

void
sb_normalize(message msg)
{
    stp_deiconify();
    sb_reply(msg, SB_NOTIFICATION);
}

void
sb_stpdt(message msg)
{
    stp_desktop();
    sb_reply(msg, SB_NOTIFICATION);
}

// callback for EDIT request

void
sb_edit(message msg)
{
    string   editor, fname;

    fname = list_get(msg.arglist, 7);
    editor = editor_from_fname(fname);
    fname = relfname_from_fname(fname);

    if (stp_edit(editor, fname) < 0)
    {
	sb_reply(msg, SB_FAILURE);
    } else
    {
	sb_reply(msg, SB_NOTIFICATION);
    }
}

string
editor_from_fname(string fname)
{
    string   parent_dir_path = parent_directory(fname);
    string   parent_dir = 
	file_part(string_extract(
	    parent_dir_path,0,string_length(parent_dir_path) - 1));
    int      sep;

    sep = string_find(parent_dir,0, "_");

    if (sep == string_length(parent_dir))
    {
	return("error");
    }
    return(string_extract(parent_dir, 0, sep));
}

string
relfname_from_fname(string fname)
{
    int      sep, l;
    string relfname = file_part(fname);

    sep = string_find(relfname, 0, ".");

    return string_extract(relfname, 0, sep);

}

// callback for PRINT request

void
sb_print(message msg)
{
    string   editor, fname;

    fname = list_get(msg.arglist, 7);
    editor = editor_from_fname(fname);
    fname = relfname_from_fname(fname);

    if (stp_print(editor, fname) < 0)
    {
	sb_reply(msg, SB_FAILURE);
    } else
    {
	sb_reply(msg, SB_NOTIFICATION);
    }
}

// get the SoftBench <host> <dir> <file> context

string
sb_context(string f)
{
    return(" " + HOSTNAME + " " + 
	   current_projdir() + 
	   current_system() + 
	   " " + f + " ");
}

struct navigation_tp
{
    string	name;
    int		handle;
    string	target;
    string	id;
};

// A stack of navigation requests is maintained in order to
// facilitate the return of the status to the caller.

list navigationStack = list_create("navigation_tp", 0);

void
navigate_to_sb(message msg)
{
    navigation_tp   nav;
    string          target;
    int             cp;

    nav.name = list_get(msg.arglist, 1);
    nav.handle = to_int(list_get(msg.arglist, 2));
    target = list_get(msg.arglist, 3);
    cp = string_find(target, 0, "(");

    if (cp < string_length(target))
    {
	target = string_extract(target, 0, cp);
    }
    nav.target = target;
    nav.id = to_string(nextId) + "-" + to_string(getpid()) + "-" + HOSTNAME;

    sb_request("STATIC SHOW-DEFINITION" + 
	       sb_context("src_files") + 
	       "NOT_QUIET " +
	       nav.target +
	       " - -");

    list_append(navigationStack, nav);
}

void
navigate_to_stp(message msg)
{
    list      args = list_create("string", 0);
    string    classname, member, editor;
    int       position, length;
    message   msg1;

    editor = list_get(msg.arglist, list_count(msg.arglist) - 2);
    classname = list_get(msg.arglist, 8);
    length = string_length(classname);
    position = string_find(classname, 0, "(");

    if (position < length)
    {
	classname = string_extract(classname, 0, position);
	length = string_length(classname);
    }
    position = string_find(classname, 0, "::");

    if (position < length)
    {
	member = string_extract(classname, position + 2, length - position - 2);
	classname = string_extract(classname, 0, position);
    } else
    {
	member = "";
    }
    msg1.type = "StP";
    msg1.class = editor;
    msg1.handle = CONHANDLE_FIRST;

    list_append(args, "EditorQrlEval");
    list_append(args, "\"OMTFromProgrammingEnvironment(" +
		"\\\"" + editor + "\\\"," +
		"\\\"" + classname + "\\\"," +
		"\\\"" + member + "\\\");\"");

    msg1.arglist = args;
    
    if (message_send(msg1) < 0)
    {
	sb_reply(msg, SB_FAILURE);
    } else
    {
	sb_reply(msg, SB_NOTIFICATION);
    }
}

// gets the Notification/Failure from STATIC

const string ERROR_STRING = "EditorPrintError \"Navigation Failed\"";

void
navigate_status(message msg)
{
    navigation_tp   nav;
    string          id, status;
    int             i;

    id = list_get(msg.arglist, 1);
    status = list_get(msg.arglist, 2);

    for (i = list_count(navigationStack); i > 0; i = i - 1)
    {
	nav = list_get(navigationStack, i - 1);

	if (nav.id == id)
	{
	    list_delete(navigationStack, i - 1);

	    if (status == "F")
	    {
		msg.type = "StP";
		msg.class = nav.name;
		msg.handle = nav.handle;
		msg.arglist = string_to_list(ERROR_STRING, " ");
		message_send(msg);
	    }
	}
    }
}


