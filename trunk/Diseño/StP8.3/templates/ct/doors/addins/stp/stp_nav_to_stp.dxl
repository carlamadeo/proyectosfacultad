// This function finds the currently selected object and navigates to its
// counterpart in StP

// get selected object
// if no object selected
//	print error
//	abort
// fi
// If current object does not have the StP attribute GUID defined
//	print error
//	abort
// fi
// if platform==WIN32
//	cmd = $SHELL stpem
// else
//	cmd = stpem
// fi
// system($cmd -ed tbr -C "EditorQrlEval doors_nav_to_stp(guid)")

// JED hack
// The shell has a bug in relation to splitting arguments that have
// nested escaped strings, a format which is required by EditorQrlEval.
// So, this function converts the nasy string to its hexidecimal
// representation. Stpem mwill be enhanced to decrypt it.
string intToHex (int i)
{
	// It is assumed that the integers are between 0 and 255
	// DOORS doesn't seem to like character constants
	string dummy="0123456789ABCDEF"
	string s=""
	int ldigit = i/16
	int rdigit = i%16
	s = (dummy[ldigit] "") (dummy[rdigit] "")
	return s
}

string stringToHex(string instr)
{
	int i
	int l = length(instr)
	string outstr = ""

	for(i=0;i<l;i++) {
		outstr = outstr intToHex(intOf(instr[i]))
	}
	return "0x" outstr
}


string stp_commands = ""

void stp_nav_dummy_cb(int id)
{
	return
}

void stp_nav_to_stp()
{
	Object o1, o2
	
	Module mod = current

	if (null mod) {
		ack "No current module."
		halt
	}
	getSelection(mod,o1,o2)

	if (!null o1 && !null o2 && identifier(o1) != identifier(o2)) {
		ack "Please select only one object for navigation."
		halt
	}
	if (null o1) {
		o1 = getSelection(mod)
		if (null o1)
			o1 = current
	}
	if (null o1) {
		ack "Please select one object for navigation."
		halt
	}

	AttrDef ad = find(mod,"StP ID")
	
	if (null ad || !ad.object) {
		ack "Error: This is not an StP Module!"
	}

	string sysname = mod."StP System"
    string projdir = ""
	string prod = o1."StP Product"
	string omstype = o1."StP CASE Type"
	string guid = o1."StP ID"
	string enc_arg = "EditorQrlEval \"doors_nav_to_stp(\\\"" prod "\\\",\\\"" omstype "\\\",\\\"" guid "\\\");\""
	enc_arg = stringToHex(enc_arg)
	if (exists attribute "StP ProjectDir") {
	   projdir = mod."StP ProjectDir"
	   projdir = " -p " projdir}
	
	string args = " -ed tbr -C " enc_arg  


	//string cmd =  "stpem -p "projdir "-s " sysname " " args
	string cmd =  "stpem " projdir " -s " sysname " " args 
	// Windows and UNIX act differently here. Windows will continue
	// execution while UNIX will only do so if you provide a callback.
	// So, in both situations, we want to execute the system command as
	// our last step. On UNIX, the child callback will simply return.
	// On Windows, we will return after the system command

	// Also, DOORS system() command has a bug with strings as complex as
	// the one above. It seems to split the arguments before it passes
	// them to the shell, and the way is splits them is wrong. So, 
	// I'm going to write the commands to a file and have the shell
	// execute the file

	if (platform == "WIN32") {
        stp_commands = tempFileName ".cmd"
        Stream out = write(stp_commands)
        out << "@echo off\n"
        out << "echo Navigating to StP. Please wait....\n"
        out << cmd "\n"
        // the following will issue a harmless error message from the command
        // interpreter
        out << "del " stp_commands
        close(out)
		system(stp_commands)
	} else {
        stp_commands = tempFileName
        Stream out = write(stp_commands)
        out << "echo Navigating to StP. Please wait....\n"
        out << cmd "\n"
        out << "rm $0" "\n"
        close(out)
		system("sh " stp_commands,stp_nav_dummy_cb)
	}
	return
}

