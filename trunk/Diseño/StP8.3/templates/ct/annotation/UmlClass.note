//
// 	sccsid[] = %W% %Y% %D%
// 	StP/Core
// 	Confidential property of Interactive Development Environments, Inc.
// 	Copyright (c) 1992-1994
// 	All rights reserved
//

//
//	FILE:	UmlClass.note
//

Include "annotation/UmlExternalSubsystem.note"

Note 801924
{
	{ AppType UmlClassDefinition }
        { HelpText "The Class Definition note lets you add items that capture modeling information about a particular class." }
	{ PrintName "Class Definition" }
	{ Bounds { Min 1 } { Max 1 } }
	{ Item
		{ AppType UmlClassIsImported }
                { HelpText "The External Class item lets you indicate that a class is external. An external class is assumed to be defined in another system.  It can be used as a type and associations to it can be defined but, for example, a declaration for it will not be produced during code generation." }
		{ PrintName "External Class" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "True" }
	}
	{ Item
		{ AppType UmlClassIsAbstract }
                { HelpText "The Abstract Class item allows you to specify that a class is an abstract base class. This will cause certain semantics checks that do not apply to abstract classes to be skipped." }
		{ PrintName "Abstract Class" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "True" }
	}
	{ Item
		{ AppType UmlClassVisibility }
                { HelpText "The Class Visibility item lets you specify how a class is seen outside of the package in which it's defined." }
		{ PrintName "Class Visibility" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "public" }
	}
  	{ Item
      		{ AppType UmlClassParameters }
      		{ HelpText "The Parameters item lets you specify a list of parameters for a parameterized class." }
      		{ PrintName "Parameters" }
      		{ Bounds { Min 0 } { Max 1 } }
      		{ InitValue "" }
  	}
	{ Item
		{ AppType UmlMultiplicity }
                { HelpText "The Multiplicity item lets you specify the allowable number of instances of a class." }
		{ PrintName "Multiplicity" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "Many" }
	}
	{ Item
		{ AppType UmlEnclosingScope }
		{ HelpText "The Enclosing Scope item lets you specify the name of a class or package inside whose scope the current class will be declared." }
		{ PrintName "Enclosing Scope" }
		{ Bounds { Min 0 } { Max 1 } }
		{ InitValue "" }
	}
}

Note 801919
{
    { AppType UmlClassCxxDefinition }
    { PrintName "Class C++ Definition" }
    { HelpText "The Class C++ Definition note lets you add items for a class that are used for C++ code generation." }
    { Bounds { Min 0 } { Max 1 } }
    { Item
	{ AppType UmlGenerateClassIfType }
        { HelpText "The Generate Code If Type item lets you specify whether or not to generate code for this class if it has the stereotype <<type>> or <<interface>>.  You may not want to generate code for a type or interface if other classes implement it on their own, or if it is used purely for analysis." }
	{ PrintName "Generate Code If Type" }
	{ Bounds { Min 0 } { Max 1 } }
	{ InitValue "True" }
    }
    { Item
	{ AppType UmlGenerateTypeAttributes }
        { HelpText "The Generate Type Attributes item lets you specify whether or not to generate into code the attributes defined for this class if it has the stereotype <<type>> or <<interface>> and code for the class itself is being generated.  You may not want to generate the attributes defined for a type if they are merely an abstract specification for the classes which actually implement the type." }
	{ PrintName "Generate Type Attributes" }
	{ Bounds { Min 0 } { Max 1 } }
	{ InitValue "True" }
    }
}

Note 801928
{
  { AppType UmlClassJavaDefinition }
  { PrintName "Class Java Definition" }
  { HelpText "The Class Java Definition note lets you add items for a class that are used for Java code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType UmlClassJavaIsFinal }
      { PrintName "Final" }
      { HelpText "The Final item specifies whether or not the class should be declared 'final' when implemented in Java."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType UmlClassJavaVisibility }
      { PrintName "Visibility" }
      { HelpText "The Visibility item overrides the Visibility specified in the Class Definition during Java code generation."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "public" }
  }
//ECR 114 begin
  { Item
      { AppType UmlClassJavaIsStaticClass }
      { PrintName "Static Class" }
      { HelpText "The Static Class item specifies whether or not a inner class should be declared 'static' when implemented in Java. If class is a top-level class this item is ignored."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
//ECR 114 end
//ECR 116 begin
  { Item
      { AppType UmlClassJavaIsAnonymous }
      { PrintName "Anonymous Class" }
      { HelpText "The Anonymous Class item specifies whether or not a class is anonymous."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
//ECR 116 end
}

Note 801920
{
 { AppType UmlClassAda95Definition }
 { PrintName "Class Ada_95 Definition" }
 { HelpText "The Class Ada_95 Definition note lets you add items for a class that are used for Ada_95 code generation." }
 { Bounds { Min 0 } { Max 1 } }
 { Item
     { AppType UmlClassAda95TypePrivacy }
     { PrintName "Class Type Privacy" }
     { HelpText "The Class Type Privacy item specifies, for a root class, whether the generated class type appears in its enclosing package specification as a publicly visible tagged type (Public), a tagged private type (Tagged Private), a private type (Private), or an incomplete type declaration in the private part (Implementation).  In addition, for subclasses, the generated class type can appear as a public derivation with private extensions (Private Extension).  Implementation Privacy is needed to implement two-way associations as 2 one-way associations while avoiding circular compilation dependencies between the 2 associated class package specifications.  Implementation Privacy means that no dispatching can occur for operation subprograms." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "tagged private" }
 }
 { Item
     { AppType UmlClassAda95IsLimited }
     { PrintName "Limited (Root Class Only)" }
     { HelpText "The Limited item specifies whether or not to designate the generated class type as a limited type.  This applies only to a class which is a root of an inheritance hierarchy." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "True" }
 }
 { Item
     { AppType UmlClassAda95GenAccessType }
     { PrintName "Generate Access Type to Class Type" }
     { HelpText "The Generate Access Type to Class Type item specifies whether or not to generate in the class package specification an access type to the class type." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "True" }
 }
 { Item
     { AppType UmlClassAda95GenWideAccessType }
     { PrintName "Generate Access Type to Class-Wide Type" }
     { HelpText "The Generate Access Type to Class-Wide Type item specifies whether or not to generate an access type to the class-wide type associated with the class (tagged) type." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "True" }
 }
 { Item
     { AppType UmlClassAda95FullViewNotLimited }
     { PrintName "Partial View Limited/Full View Not Limited" }
     { HelpText "The Partial View Limited/Full View Not Limited item specifies whether to not designate the full view of a class type as limited, when the partial view is limited and has a privacy of 'Private'.  If it is not set to any value, the full view will be limited.  This applies only to a class which is a root of an inheritance hierarchy." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "True" }
 }
 { Item
     { AppType UmlClassAda95FullViewNotAbstract }
     { PrintName "Partial View Abstract/Full View Not Abstract " }
     { HelpText "The Partial View Abstract/Full View Not Abstract item specifies whether to not designate the full view of a class type as abstract, when the partial view is abstract and has a privacy of either 'Private Extension' or 'Tagged Private'.  If it is not set to any value, the full view will be abstract." }
     { Bounds { Min 0 } { Max 1 } }
     { InitValue "True" }
 }
}

Note 801922
{
	{ AppType UmlClassCxxDeclarations }
        { HelpText "The C++ Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a local typedef or enum) to the code generated for a C++ class definition.  This note is prepended, as is, to the code generated for a C++ class definition." }
	{ PrintName "C++ Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

Note 801926  
{
	{ AppType UmlClassJavaDeclarations }
        { HelpText "The Java Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a static code block) to the code generated for a Java class definition.  This note is prepended, as is, to the code generated for a Java class definition." }
	{ PrintName "Java Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

Note 801921
{
	{ AppType UmlClassIDLDeclarations }
        { HelpText "The IDL Declarations note description is intended to let you add declarations (ones which are not normally represented by a modeling construct, e.g., a local typedef) to the code generated for an IDL class definition.  This note is prepended, as is, to the code generated for an IDL class definition." }
	{ PrintName "IDL Declarations" }
	{ Bounds { Min 0 } { Max 1 } }
}

Note 801968
{
  { AppType UmlClassTOOLImplementation }
  { PrintName "Class TOOL Implementation" }
  { HelpText "The Class TOOL Implementation note lets you add items for a class that are used for TOOL (Forte) code generation." }
  { Bounds { Min 0 } { Max 1 } }
  { Item
      { AppType UmlTOOLClassShared }
      { PrintName "Shared Property" }
      { HelpText "The Class Shared Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType UmlTOOLClassSubclassOverrideShared }
      { PrintName "Subclass Override Shared Property" }
      { HelpText "The Class Subclass Override Shared Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType UmlTOOLClassMonitored }
      { PrintName "Monitored Property" }
      { HelpText "The Class Monitored Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Allowed" }
  }
  { Item
      { AppType UmlTOOLClassSubclassOverrideMonitored }
      { PrintName "Subclass Override Monitored Property" }
      { HelpText "The Class Subclass Override Monitored Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType UmlTOOLClassDistributed }
      { PrintName "Distributed Property" }
      { HelpText "The Class Distributed Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType UmlTOOLClassSubclassOverrideDistributed }
      { PrintName "Subclass Override Distributed Property" }
      { HelpText "The Class Subclass Override Distributed Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "True" }
  }
  { Item
      { AppType UmlTOOLClassTransactional }
      { PrintName "Transactional Property" }
      { HelpText "The Class Transactional Property item specifies the value of this property when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "Disallowed" }
  }
  { Item
      { AppType UmlTOOLClassSubclassOverrideTransactional }
      { PrintName "Subclass Override Transactional Property" }
      { HelpText "The Class Subclass Override Transactional Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType UmlTOOLClassRestricted }
      { PrintName "Restricted Property" }
      { HelpText "The Class Restricted Property item specifies the value of this setting when generating TOOL code for this class"}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "False" }
  }
  { Item
      { AppType UmlTOOLWindowClassFilename }
      { PrintName "Window Class Filename" }
      { HelpText "The window definition file created using the Forte Window Workshop."}
      { Bounds { Min 0 } { Max 1 } }
      { InitValue "" }
  }

}
