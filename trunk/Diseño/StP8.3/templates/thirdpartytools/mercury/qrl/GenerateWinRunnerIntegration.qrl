external string UseCases;
external string TDDataBase;
external string TDDirectory;


#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"


#include "val/qrl/include/table.inc"
#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"

#include "thirdpartytools/mercury/qrl/include/GenerateOneWinRunnerData.inc"
#include "thirdpartytools/mercury/qrl/include/GenerateOneWinRunnerIntegration.inc"
#include "thirdpartytools/qrl/include/SystemCommands.inc"

  string DATASEPARATOR = ";";

// Constants used by the data file

  const string begincomment = "#  " ;


  const string endcomment = "";
  const string indent = "    ";
  const string halfindent = "  ";

  list ScenarioList;

  string OUTPUTPATH = current_projdir() + current_system() + "/test_files/";

  string SCRIPTPATH;
  string use_case_name;



void 
main ()
{ 

  string status;
  list UseCaseList;
  int count, i;

  UseCaseList = string_to_list (UseCases, " ");

  count = list_count (UseCaseList);

  for (i=0;i<count;i++)
    {

      use_case_name = list_get(UseCaseList,i);

      if (!CheckExistance (use_case_name) )
        {
          print_error ("Use Case: " + use_case_name + " is not in the selected model");
          continue;
        }

      SCRIPTPATH = TDDirectory + "/" + TDDataBase;
      MakeDir (SCRIPTPATH);

      SCRIPTPATH = SCRIPTPATH + "/Tests";
      MakeDir (SCRIPTPATH);

      SCRIPTPATH = SCRIPTPATH + "/" + use_case_name;
      MakeDir (SCRIPTPATH);

      message ("Generating WinRunner Files for Use Case " + use_case_name);
  
      status = GenerateWinRunnerData(use_case_name, SCRIPTPATH);
      if (status != "error")
         GenerateWinRunnerFiles(use_case_name, SCRIPTPATH);
    }
}


