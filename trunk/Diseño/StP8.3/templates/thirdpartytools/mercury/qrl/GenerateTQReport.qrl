external string TDDataBase;
external string TDUserName;
external string TDPassword;
external string TDServer;
external string TDDirectory;

external float w1;
external float w2;
external float w3;
external float w4;

external string use_case_name;

#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/GenerateDataForUML.inc"

int PA=1;
int TA=1;
int PI=1;
int TI=1;
int PO=1;
int TO=1;
int PP=1;
int TP=1;

  list ScenarioList;

  string OUTPUTPATH = current_projdir() + current_system() + "/test_files/";
  string SCRIPTDIR;

  string SORACLESDIR = OUTPUTPATH + "SCRIPT_ORACLES/";
  string ORACLESDIR = OUTPUTPATH + "ORACLES/";

  string TESTDATA="";
  string OUTPUTTEXT="";
  string OUTPUTDIR;



  set ACTORSET;


void 
main ()
{ 

  Initialize();


  message ("Gathering Validator Data");
  GatherValidatorData();

  message ("Gathering TestDirector Data");
//  GatherTestDirectorData();

  message ("Gathering McCabe Data");
//  GatherMcCabeData();

  message ("Generating TQ Report");
  GenerateReport();
}


void
Initialize()
{

  list nodelist;

  id_list_create ("node[umlscenarioinstance && node_refs]", "scenarioids");
  id_list_create ("node[umlactor && node_refs]", "actorids");

  nodelist = list_select("node[actorids]");

}

void
GatherValidatorData()
{
  TA = GetTotalActions();


}

void
GatherTestDirectorData()
{
  PA = GetPassedActions();
  PI = GetPassedInputs();
  PO = GetPassedOutputs();

}

void
GatherMcCabeData()
{
  TP = GetTotalPaths();
  PP = GetPassedPaths();

}

void
GenerateReport()
{
  float actions, inputs, outputs, paths, TQ;

  actions = w1 * ( PA / TA );
  inputs = w2 * ( PI / TI );
  outputs = w3 * ( PO / TO );
  paths = w4 * ( PP / TP );

  TQ = actions + inputs + outputs + paths;

  message ("");

  message ("TQ (Actions) = W1 * ( Passed Actions / Total Actions )" );
  message (to_string(actions) + " = " + w1 + " * ( " + to_string(PA) + " / " + to_string(TA) + " ) "  );
  message ("");

  message ("TQ (Inputs)  = W2 * ( Passed Inputs / Total Inputs )");
  message (to_string(inputs) + " = " + w2 + " * ( " + to_string(PI) + " / " + to_string(TI) + " ) " );
  message ("");

  message ("TQ (Outputs) = W3 * ( Passed Outputs / Total Outputs )");
  message (to_string(outputs) + " = " + w3 + " * ( " + to_string(PO) + " / " + to_string(TO) + " ) " );
  message ("");

  message ("TQ (Paths)   = W4 * ( Passed Paths / Total Paths )");
  message (to_string(paths) + " = " + w4 + " * ( " + to_string(PP) + " / " + to_string(TP) + " ) " );
  message ("");



  message ("TQ (Total)   = " + to_string(TQ));

}



int
GetTotalActions()
{

//  SCRIPTDIR = current_projdir() + current_system() + "/testscpt_files/mercury/" + use_case_name;

  string scriptfile;
  string test_unit_id;
  list usecaselist;
  string query = "node[umlusecase && node_refs]";
  list nodelist;
  node nodevar;

  string filetext;

  string path;
  string inputfile;
  list testcaselist;

  int i,count;
  int scenario_count=0;

  usecaselist = list_select(query);

  count = list_count(usecaselist);

  for (i=0;i<count;i++)
    {
      nodevar = list_get (usecaselist, i);
      use_case_name = nodevar.name;

      ACTORSET = GetActors(use_case_name);

      test_unit_id = Get_T_test_unit_id(use_case_name, "");

      ScenarioList = GetScenarioList(use_case_name);

      scenario_count = scenario_count + list_count(ScenarioList);

      OUTPUTDIR = OUTPUTPATH + test_unit_id;

      path = OUTPUTDIR + "/UseCaseTestScripts";
      inputfile = path + "/testcases.rpt";
  
      if (!CheckForSDF(OUTPUTDIR, "TDDB"))
        {
          message ("TDDB for " + test_unit_id + " does not exist.");
          return;
        }

 //     FormatTestCaseData(test_unit_id);



      if (CheckForSDF(path, "testcases.rpt"))
         filetext = read_file (inputfile);
      else
        {
          message ("testcases.rpt for " + test_unit_id + " does not exist.");
          return;
        }

      testcaselist = string_to_list(filetext, "\n");
      TI = GetTotalInputs();
      TO = GetTotalOutputs();

    }
 
  return( scenario_count);


}

int
GetTotalInputs()
{
  list linklist;

  
  return (10 );

}

int
GetTotalOutputs()
{
  return(10);
}

int
GetPassedActions()
{
  return(10);
}

int
GetPassedInputs()
{
  return(10);
}

int
GetPassedOutputs()
{
  return(10);
}

int
GetTotalPaths()
{
  return(10);
}

int
GetPassedPaths()
{
  return(10);
}

