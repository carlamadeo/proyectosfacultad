
 
//      sccsid[] = %W% %Y% %D%
//      StP/SE
//      Confidential property of Interactive Development Environments, Inc.
//      Copyright (c) 1996
//      All rights reserved

// copy all formal parameters DataType.DataType item to the SE 6.0 
// equivalent of ParameterDefinition.DataType
//
// silently skip all other DataType.DataType items.

void
main()
{
    cntx par, real_par;
    item itm;
    int i;
    list params;
    string cmd;
    node to_node, real_to_node;

    // get the list of things to change.  Since everything is now scoped, these are items
    // with no references any longer.
    params = list_select("cntx[(DataIn || DataOut || DataInOut || ControlIn || ControlOut) && notes[DataType && items[DataType && value != null]] && link[from_node[FormalCaller]] && ! cntx_refs]");

    for (i = 0; i < list_count(params); i++)
    {
	par = list_get(params, i);
	itm = find_by_query("item[DataType && obj_id = ${par.id} && note[DataType]]");
	if (itm == NULL || itm.value == NULL || itm.value == "")
	    continue;

	// now find the correct cntx with a reference
	to_node = find_by_query("node[in_links[id = ${par.link_id}]]");
	if (to_node == NULL)
	    continue;

	real_to_node = find_by_query("node[node_refs && name = '${to_node.name}' && in_links[from_node[FormalCaller]]]");
	if (real_to_node == NULL)
	    continue;

	real_par = find_by_query("cntx[cntx_refs && name = '${par.name}' && (DataIn || DataOut || DataInOut || ControlIn || ControlOut) && link[to_node_id = ${real_to_node.id} && from_node[FormalCaller]]]");
	if (real_par == NULL)
	    continue;

	print_message("Restoring DataType `" + itm.value + "' for module::parameter `" + real_to_node.name + "::" + real_par.name + "'.");

	cmd = "stpem -ed ngoae -first -p " + current_projdir() + " -s " + current_system() +
	      " -C 'AnnotEdit " + to_string(real_par.id) + "'" +
	      " -C 'NoteSelect ParameterDefinition'" +
	      " -C 'ItemSelect DataType'" +
	      " -C 'EditorSetValue " + itm.value + "'" +
	      " -C FileSave -C AnnotUnload";
	system(cmd);

    }
}
