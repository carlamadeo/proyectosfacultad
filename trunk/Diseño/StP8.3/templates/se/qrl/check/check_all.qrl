
//      StP/SE
//      Confidential property of Aonix
//      Copyright (c) 1999
//      All rights reserved
//

// 7/25/99 Check the entire model, or part of it, using formatting commands as with
// UML.

#include "qrl/check/check_common.inc"
#include "qrl/check/newcheck_dfe.impl"
#include "qrl/check/check_dse.impl"
#include "qrl/check/check_sce.impl"
#include "qrl/check/check_ste.impl"
#include "qrl/check/check_cse.impl"

external string parent_func = "";
external int out_form;
external string out_file = "";
external string sem_file_names = "";
external string ed_type = "";

int
main()
{
    int errors = 0;
    list filel;

    if (out_form != 3)
        UseFormat = True;

    print_message("Starting Check Semantics...");

    print_sc_title();

    if (parent_func == "WholeModel" || parent_func == "Dfe")
    {
        filel = file_list("DfeDiagram", sem_file_names);
        print_message("Checking Data Flow Diagrams ...");
        print_sc_para("Checking Data Flow Diagrams ...");
        errors += DfeCheckSemanticsNow(filel, 1, 1, 1, 1, 0, 1, 0);
    }
    
    if (parent_func == "WholeModel" || parent_func == "Dse")
    {
        print_message("Checking Data Structure Diagrams ...");
        print_sc_para("Checking Data Structure Diagrams ...");
        errors += checkDseSemanticsFromQrp(sem_file_names, 0, 1, 1);   
    }

    if (parent_func == "WholeModel" || parent_func == "Sce")
    {
        print_message("Checking Structure Chart Diagrams ...");
        print_sc_para("Checking Structure Chart Diagrams ...");

        sceprop_tp	sceprops;
        sceprops.verbose = 0;
        sceprops.check_one = 1;
        sceprops.check_two = 1;
        sceprops.check_three = 1;
        sceprops.check_four = 1;
        sceprops.check_five = 1;
        sceprops.check_six = 1;
        sceprops.check_seven = 1;

        sceprops.diaglist = file_list("SceDiagram", sem_file_names);
        errors += checkSceSemantics(sceprops, NULL, NULL);
    }

    if (parent_func == "WholeModel" || parent_func == "Ste")
    {
        print_message("Checking State Transition Diagrams ...");
        print_sc_para("Checking State Transition Diagrams ...");
        steprop_tp  steprops;
        steprops.verbose = 0;
        steprops.check_one = 1;
        steprops.check_two = 1;
        steprops.check_three = 1;
        steprops.check_four = 1;
        steprops.check_five = 1;
        steprops.check_six = 1;
        steprops.diaglist = file_list("SteDiagram", sem_file_names);
        errors += checkSteSemantics(steprops);
    }

    if (parent_func == "WholeModel" || parent_func == "Cse")
    {
        print_message("Checking Control Specification Tables ...");
        print_sc_para("Checking Control Specification Tables ...");
        errors += checkCseSemantics(sem_file_names, "", 0);
    }

    if (parent_func == "DecisionTable" ) 
    {
        print_message("Checking Decision Tables ...");
        print_sc_para("Checking Decision Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "ProcessActivationTable" ) 
    {
        print_message("Checking Process Activation Tables ...");
        print_sc_para("Checking Process Activation Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "ProcessActivationMatrix" ) 
    {
        print_message("Checking Process Activation Matrix Tables ...");
        print_sc_para("Checking Process Activation Matrix Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "StateTransitionTable" ) 
    {
        print_message("Checking State Transition Tables ...");
        print_sc_para("Checking State Transition Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "StateTransitionMatrix" ) 
    {
        print_message("Checking State Transition Matrix Tables ...");
        print_sc_para("Checking State Transition Matrix Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "EventLogicTable" ) 
    {
        print_message("Checking Event Logic Tables ...");
        print_sc_para("Checking Event Logic Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "ActionLogicTable" ) 
    {
        print_message("Checking Action Logic Tables ...");
        print_sc_para("Checking Action Logic Tables ...");
        errors += checkCseSemantics(sem_file_names, parent_func, 0);
    }

    if (parent_func == "WholeModel")
    {
        if (!errors)
        {
            print_message("Check Semantics for Whole Model completed with no errors.");
            print_sc_para("Check Semantics for Whole Model completed with no errors.");
        }
        else if (errors == 1)
        {
            print_message("Check Semantics for Whole Model completed with 1 error.");
            print_sc_para("Check Semantics for Whole Model completed with 1 error.");
        }
        else
        {
            print_message("Check Semantics for Whole Model completed with " + errors + " errors.");
            print_sc_para("Check Semantics for Whole Model completed with " + errors + " errors.");
        }
    }
    print_message("Check Semantics Complete.");

    return 0;
}
