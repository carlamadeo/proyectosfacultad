external string TestUnitName = "";
external string SPacketSubject = "No Subject";
external string SPacketDescription = "No Description";
external string use_case_name;
external string scenario_name;

#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

void 
main ()
{
  int scenario_id;
  set DataTypes;

  scenario_id = check_existence( use_case_name, scenario_name );

  if (scenario_id > 0)
    {
      message ("valid scenario");

      Build_SPacket_Statement();
      Build_Include_File_Reference();
      Build_Action_Statement(use_case_name, scenario_name, scenario_id);
      DataTypes = Build_Dataitem_Statements(scenario_id);
      Build_Datatype_Statements(DataTypes);
      Build_Footer();

    }
}


void
Build_SPacket_Statement()
{
  print_line ("S_packet " + TestUnitName + ";");
  print_line ("  has subject \"" + SPacketSubject + "\";\n");
  print_line ("  has description \"" + SPacketDescription + "\";\n\n.\n\n");
}

void
Build_Include_File_Reference()
{
  print_line ("#include <tsdl.std>\n");
  print_line ("#include <stp.std>\n\n");
}

void
Build_Action_Statement(string use_case_name, string scenario_name, 
               int scenario_id)
{

  print_action_header (use_case_name, scenario_name);
  print_acts_only_if(scenario_id);
  print_satisfies(scenario_id);
  print_is_selected_by(scenario_id);
  print_is_concluded_on(scenario_id);

  print_uses_data (scenario_id);
  print_produces_data (scenario_id);

  print_is_tested_exhaustively (scenario_id);

  print_end_action();
}


int
check_existence( string use_case_name, string scenario_name )
{
  string query;
  node nodevar;

  query = "node[OMTScenarioName && node_refs && name == '${scenario_name}'
            && scope_node [ OMTUseCaseParent && name == '${use_case_name}']]";

  nodevar = find_by_query(query);

  if (nodevar == NULL)
     return (0);
  else
     return (nodevar.id);

}

void
print_action_header( string use_case_name, string scenario_name )
{
  print_line ("Action " + use_case_name + "__" + scenario_name);

  print_line ("   is actiontype internal;\n" );

}

void
print_acts_only_if ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q = "item [TActsOnlyIf && obj_id == ${scenario_id}]";

  itemvar = find_by_query(q);

  if (itemvar != NULL)
    {
      print ("  acts only if\n");
      print ("     (" + itemvar.value);
      print(");\n\n");
    }
}

void
print_satisfies ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q = "item [TSatisfies && obj_id == ${scenario_id}]";

  itemvar = find_by_query(q);

  if (itemvar != NULL)
    {
      print ("  satisfies\n");
      print ("     " + itemvar.value);
      print(";\n\n");
    }
}

void
print_is_selected_by ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q = "item [TIsSelectedBy && obj_id == ${scenario_id}]";

  itemvar = find_by_query(q);

  if (itemvar != NULL)
    {
      print ("  is selected by\n");
      print ("     " + itemvar.value);
      print(";\n\n");
    }
}



void
print_is_concluded_on ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q = "item [TIsConcludedOn && obj_id == ${scenario_id}]";

  itemvar = find_by_query(q);

  if (itemvar != NULL)
    {
      print ("  is concluded on\n");
      print ("     " + itemvar.value);
      print(";\n\n");
    }
}




void
print_is_tested_exhaustively ( int scenario_id )
{
  int i,count;
  note notevar;
  list TItem;
  item itemvar;

  string q1 = "note [TestAction && obj_id == ${scenario_id} &&
       items [TExhaustive ]]";
  string q2 = "item [TExhaustive && note_id == ${notevar.id}]";

  notevar = find_by_query(q1);

  if (notevar != NULL)
    {
      TItem = list_select(q2);
      count = list_count(TItem);

      print_line ("   is tested exhaustively on dataitem");

      for (i=0; i<count; i=i+1)
        {
          itemvar = list_get(TItem, i);
          print ("     " + itemvar.value);
          if (i < count - 1)
            print(",\n");
          else 
            print(";\n\n");
        }
    }
}


void
print_uses_data ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q1 = "note [TestDataItem && obj_id == ${scenario_id} &&
       items [TUsed && value == 'True' ]]";
  string q2 = "item [TDataItemName && note_id == ${notevar.id}]";

  TNote = list_select(q1);

  count = list_count(TNote);

  print_line ("   uses dataitem");

  for (i=0; i<count; i=i+1)
    {
      notevar = list_get(TNote, i);
      itemvar = find_by_query(q2);
      print ("     " + itemvar.value);
      if (i < count - 1)
         print(",\n");
      else 
         print(";\n\n");
    }
}

void
print_produces_data ( int scenario_id )
{
  int i,count;
  note notevar;
  list TNote;
  item itemvar;

  string q1 = "note [TestDataItem && obj_id == ${scenario_id} &&
       items [TProduced && value == 'True' ]]";
  string q2 = "item [TDataItemName && note_id == ${notevar.id}]";

  TNote = list_select(q1);

  count = list_count(TNote);

  print_line ("   produces dataitem");

  for (i=0; i<count; i=i+1)
    {
      notevar = list_get(TNote, i);
      itemvar = find_by_query(q2);
      print ("     " + itemvar.value);
      if (i < count - 1)
         print(",\n");
      else 
         print(";\n\n");
    }

}


void
print_end_action()
{

  print(".\n\n\n");

}

set
Build_Dataitem_Statements(int scenario_id)
{
  list dataitems;
  int i,count;
  note notevar;
  item itemvar1, itemvar2;
  set DataTypes;

  DataTypes = set_create ("string");

  string q1 = "note [TestDataItem && obj_id == ${scenario_id}] sort by name";
  string q2 = "item [TDataItemName && note_id == ${notevar.id}]";
  string q3 = "item [TDataTypeName && note_id == ${notevar.id}]";

  dataitems = list_select(q1);

  count = list_count(dataitems);

  for (i=0;i<count;i=i+1)
    {
      notevar = list_get(dataitems,i);
      itemvar1 = find_by_query(q2);
      itemvar2 = find_by_query(q3);
      set_add (DataTypes, itemvar2.value);

      print_line ("Dataitem " + itemvar1.value + ";");
      print_line ("   is an instance of datatype " + itemvar2.value + ";");
      print_line (".\n\n");

    }

  return (DataTypes);

}

void
Build_Datatype_Statements(set datatypes)
{
  int i,count;
  string datatypename;
  node nodevar;
  item itemvar;

  string q1 = "node [TTestType && name == '${datatypename}']";
  string q2 = "item [TDataTypeClass && obj_id == ${nodevar.id}]";

  count = set_count (datatypes);

  for (i=0;i<count;i=i+1)
    {
      datatypename = set_get_element(datatypes,i);
      nodevar = find_by_query(q1);

      if (nodevar != NULL)
        {
          itemvar = find_by_query(q2);

          if (itemvar != NULL)
            {
              if (itemvar.value == "integer" || itemvar.value == "real")
                Build_IntegerReal_TypeDef(datatypename, itemvar.value, 
                  nodevar.id);
              else if (itemvar.value == "string")
                Build_String_TypeDef(datatypename, itemvar.value, 
                  nodevar.id);
              else
                Build_Unspecified_TypeDef(datatypename);
            }
          else
            {
              Build_Unspecified_TypeDef(datatypename);
            }

          print_line (".\n\n");
        }
      else
        {
          Build_Unspecified_TypeDef(datatypename);
        }
    }
}

void
Build_IntegerReal_TypeDef(string datatypename, string name, int id)
{
  item itemvar;
  list itemlist;
  int i,count;

  string q1 = "item [TMinimumValue && obj_id == ${id}]";
  string q2 = "item [TMaximumValue && obj_id == ${id}]";
  string q3 = "item [TResolution && obj_id == ${id}]";
  string q4 = "item [TTestValue && obj_id == ${id}]";
  string q5 = "item [TInvalidSubdomain && obj_id == ${id}]";


  print_line ("DataType " + datatypename + ";");
  print_line ("  is datatypeclass " + name  + ";\n");

  itemvar = find_by_query(q1);
  if (itemvar != NULL)
    {
      print_line ("  has value range minimum " + itemvar.value  + ";");
    }

  itemvar = find_by_query(q2);
  if (itemvar != NULL)
    {
      print_line ("  has value range maximum " + itemvar.value  + ";");
    }

  itemvar = find_by_query(q3);
  if (itemvar != NULL)
    {
      print_line ("  has value range resolution " + itemvar.value  + ";");
    }

  itemlist = list_select(q4);
  count = list_count(itemlist);
  for (i=0;i<count;i=i+1 )
    {
      if (i==0)
         print ("  has values ");

      itemvar = list_get(itemlist, i);

      print (itemvar.value);

      if (i < count - 1)
         print(",\n             ");
      else 
         print(";\n");
    }

  print_line ("\n  has valid subdomain as_specified;");

  itemvar = find_by_query(q5);
  if (itemvar != NULL)
    {
      if (itemvar.value != "None")
         {
           print ("  has invalid subdomain ");
           print_line (GetInvalidSubdomain(itemvar.value)  + ";");
         }
    }

}



void
Build_String_TypeDef(string datatypename, string name, int id)
{
  item itemvar;
  list itemlist;
  int i,count;

  string q4 = "item [TTestValue && obj_id == ${id}]";
  string q5 = "item [TInvalidSubdomain && obj_id == ${id}]";


  print_line ("DataType " + datatypename + ";");
  print_line ("  is datatypeclass " + name  + ";\n");

  itemlist = list_select(q4);
  count = list_count(itemlist);
  for (i=0;i<count;i=i+1 )
    {
      if (i==0)
         print ("  has values ");

      itemvar = list_get(itemlist, i);

      print ("\"" + itemvar.value + "\"");

      if (i < count - 1)
         print(",\n             ");
      else 
         print(";\n");
    }

  print_line ("\n  has valid subdomain as_specified;");

  itemvar = find_by_query(q5);
  if (itemvar != NULL)
    {
      if (itemvar.value != "None")
         {
           print ("  has invalid subdomain ");
           print_line (GetInvalidSubdomain(itemvar.value)  + ";");
         }
    }

}


void
Build_Unspecified_TypeDef(string datatypename)
{
  print_line ("DataType " + datatypename + ";");
  print_line ("  is datatypeclass unspecified;\n");
  print_line ("  has placeholder value \"UNSPECIFIED\";");
  print_line ("  has valid subdomain as_specified;");
}

void
Build_Footer()
{
  print_line("\n\npe_mark");
}

string
GetInvalidSubdomain(string name)
{

  if (name == "NotInList")
    return ("not_in_list");
  else if (name == "OutOfType")
    return ("out_of_type");
  else if (name == "AboveBounds")
    return ("above_bounds");
  else if (name == "BelowBounds")
    return ("below_bounds");
  else if (name == "OutOfBounds")
    return ("out_of_bounds");
  else if (name == "Abnormal")
    return ("abnormal");

}
