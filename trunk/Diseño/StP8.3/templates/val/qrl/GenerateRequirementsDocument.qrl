external string UseCases;

#include "qrl/tsdl_extract.inc"
#include "qrl/basic_textract_dt.inc"
#include "qrl/include/error.inc"

#include "val/qrl/include/TConfig.inc"
#include "val/qrl/include/TUseCase.inc"
#include "val/qrl/include/ValidatorFormats.inc"
#include "val/qrl/include/Progress.inc"
#include "val/qrl/include/CreateDir.inc"

void 
main ()
{
  
  initProgress(10);
  updateProgress("Itialize report generation ...");
  initValidatorMessaging("Requirements Document");

  string sOutputPath = current_projdir() + current_system() + "/test_files/";
  string sReportFile;
  list lstUseCases;
  int  count, i;
  string sUseCaseName, sTestUnitId;
  string sTargetOption = getTargetOption();
  string sSystemCommand;

  lstUseCases = string_to_list (UseCases, " ");
  count = list_count (lstUseCases);
  
  updateProgress("Extracting use cases ...");
  setProgressStep(calcProgressStep(getProgressExpected(), 90, count));
  message("Processing Use Cases:");
  message(" ");

  for (i=0;i<count;i++)
    {
      sUseCaseName = list_get(lstUseCases,i);
      if (!CheckExistance (sUseCaseName) )
        {
          message (ERRMSG_PREFIX + "Use Case: " + sUseCaseName + " is not in the selected model");
          continue;
        }

      sTestUnitId = Get_T_test_unit_id(sUseCaseName, "");
      sReportFile = sOutputPath + sTestUnitId + "/SRS" + getReportExtention();
      if(!write_file_access(sOutputPath + "/" + sTestUnitId ))
      {
         //system ("mkdir '" + sOutputPath + "/" + sTestUnitId + "'" );
         CreateDirectory(sOutputPath + "/" + sTestUnitId);
      }

      sSystemCommand = "qrp"+
      " -p " + current_projdir() +
      " -s " + current_system() + 
      " -x e_USECASE '${sUseCaseName}'"+
      " -x e_DEFAULT_FORMAT '${e_DEFAULT_FORMAT}' " + 
      " -f ${e_DEFAULT_FORMAT}" + getFormatExtention() +
      " -x e_DOCAUTHOR '${e_DOCAUTHOR}' "+
      " -x e_COMPANY '${e_COMPANY}'"+
      " -x e_DIVISION '${e_DIVISION}' "+
      " -x e_DOC_VERSION '${e_DOC_VERSION}' "+
      " -x e_DOC_STATUS '${e_DOC_STATUS}' "+
      "  ${sTargetOption} " +
      " -o ${sReportFile}";

      updateProgress("Generating requirements report for " + sUseCaseName + "...");
      message("use case: " + sUseCaseName );
      message("report file: " + sReportFile );

      if (VALIDATOR_BASE_PRODUCT == "UML")
          sSystemCommand = sSystemCommand + " val/qrl/GenerateOneRequirementsDocumentForUML.qrl";
      else
          sSystemCommand = sSystemCommand + " val/qrl/GenerateOneRequirementsDocumentForOMT.qrl";
      
      // message(sSystemCommand);
      system(sSystemCommand);
      message("");
    }
  doneProgress();
  finalizeValidatorMessaging("Generate Requirements document");

}



