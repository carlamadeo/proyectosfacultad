#include "rules/qrl/doors.inc"
#include "qrl/include/export_to_doors.inc"
 
external string Files = "";
external string Editor = "";


void
main()
{
    set nodes = set_create("node");
    set cntxs = set_create("cntx");
    set links  = set_create("link");
    string diagramType;
    
    int i;
    list exportFiles = string_to_list(Files," ");
    string fileClause = "";


    for(i = 0; i < list_count(exportFiles); i++)
	{
	    if(i != 0)
		fileClause = fileClause + " | ";
	    fileClause = fileClause + "name = '" + list_get(exportFiles,i)
		+ "'";
	   
	}

    if(Editor == "ustated")
	    diagramType = "UmlStateDiagram";
    else if(Editor == "ucollaborationd")
	diagramType = "UmlCollaborationDiagram";
    else if(Editor == "usequenced")
	diagramType = "UmlSequenceDiagram";
    else if(Editor == "uactivityd")
	diagramType = "UmlActivityDiagram";
    else if(Editor == "ucomponentd")
	diagramType = "UmlComponentDiagram";
    else if(Editor == "udeploymentd")
	diagramType = "UmlDeploymentDiagram";
    else if(Editor == "ustereotyped")
	diagramType = "UmlStereotypeDiagram";
    else if(Editor == "uusecased")
	diagramType = "UmlUseCaseDiagram";
    else if(Editor == "uclassd")
	diagramType = "UmlClassDiagram";
    
    string appTypeClause = list_to_string(doors_exportable_node_types(),
					  " | ");
    nodes = 
	set_select("node[node_refs[file[${diagramType} & (${fileClause})]] & (${appTypeClause})]");

    appTypeClause = list_to_string(doors_exportable_link_types(),
					  " | ");
    links = 
	set_select("link[link_refs[file[${diagramType} & (${fileClause})]] & (${appTypeClause}) ]");


    appTypeClause = list_to_string(doors_exportable_cntx_types(),
					  " | ");
    cntxs = 
	set_select("cntx[cntx_refs[file[${diagramType} & (${fileClause})]] & (${appTypeClause}) ]");

    if (set_count(nodes) == 0 && set_count(links) == 0 && set_count(cntxs) == 0) {
       print_message("There are no exportable objects to DOORS");
       return;
    } 

    string export_stmt = doors_make_export_stmt(nodes,links,cntxs, False);
	// now send the statements to DOORS
    if ("" == export_stmt) // annot file locked
    {
        
        print_error("All selected objects' annotations are locked." +
                " Unable to export to DOORS");
        return;
    }
	doors_send_string_to_doors(export_stmt);

}
