//*****************************************************************************
// $RCSfile: vb_std.tdl,v $
// $Revision: 1.9 $
// $Date: 2002/04/04 14:48:44 $
// Author: Vince Bryce
//*****************************************************************************

USES ../tdl/std;

////////////////////////////////////////////////////////////////////////////////
// standard functions
////////////////////////////////////////////////////////////////////////////////

/* Generates a marked section in the output. The content of this section can 
be changed by the user in the generated file. These changes will not be 
overwritten in subsequent cycles of code generation */
template mergeOut(uniqueId,desc)
'#ACD# M([uniqueId]) [desc]

	' user defined code to be added here ...

'#end ACD#
end template


/* this procedure is called once by main (defined in cpp_main.tdl) before
   any other procedure or template. It sets up the merge mechanism for 
   incremental code generation (delMergeFile and appendMergeFile).
   The current language for type mapping is defined (setLanguage) */
proc init()
	loop(Instances->MAssociationEnd->MClass Where[MAssociationEnd.name]=="")
		[MAssociationEnd.name]=[MClass.name];
	end loop
	
	delMergeFile();
	appendMergeFile("merge_config_VB.txt");
	setLanguage("VB");
end proc	

template outDesc(Description)
[loop(Instances->TokenSet([Description]))]
' [TokenSet.line]
[end loop]
end template

proc initBasic()

	// Set void ReturnType
	loop(Instances->MOperation)
		switch(toLower([MOperation.returnType]))
		case "":
			[MOperation.returnType] = "Variant";
			break;
		case "void":
			if (hasLoop(Instances->MDataType Where [MDataType.name] == "void"))
				[MOperation.returnType] = getDataType("void");
			else
				[MOperation.returnType] = "Void";
			end if
			break;
		case "int":
			if (hasLoop(Instances->MDataType Where [MDataType.name] == "int"))
				[MOperation.returnType] = getDataType("int");
			else
				[MOperation.returnType] = "Integer";
			end if
			break;
		end switch
	end loop

	// Set void Datatypes
	loop(Instances->MPara)
		switch(toLower([MPara.type]))
		case "":
			[MPara.type] = "Variant";
			break;
		case "void":
			if (hasLoop(Instances->MDataType Where [MDataType.name] == "void"))
				[MPara.type] = getDataType("void");
			else
				[MPara.type] = "Void";
			end if
			break;
		case "int":
			if (hasLoop(Instances->MDataType Where [MDataType.name] == "int"))
				[MPara.type] = getDataType("int");
			else
				[MPara.type] = "Integer";
			end if
			break;
		end switch
	end loop
	
	// Set Access
	loop(Instances->MOperation)
		switch(toLower([MOperation.access]))
		case "private":
			[MOperation.access] = "Private";
			break;
		case "public":
			[MOperation.access] = "Public";
			break;
		case "protected":
			[MOperation.access] = "Protected";
			break;
		default :
			[MOperation.access] = "Private";
			break;
		end switch
	end loop

	// Set Attributes
	loop(Instances->MAttribute)
		switch(toLower([MAttribute.access]))
		case "private":
			[MAttribute.access] = "Private";
			break;
		case "public":
			[MAttribute.access] = "Public";
			break;
		case "protected":
			[MAttribute.access] = "Protected";
			break;
		default :
			[MAttribute.access] = "Private";
			break;
		end switch
	end loop

	
end proc