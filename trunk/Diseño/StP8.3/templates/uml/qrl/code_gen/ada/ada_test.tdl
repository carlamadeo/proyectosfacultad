proc printAssociations()
 
   loop(Instances->MClass As FromClass->Role As FromRole->MAssociation)
   info = "C " [FromClass.name] " R " [FromRole.name]"="[FromRole.id] " A " [MAssociation.name]"="[MAssociation.id] " nav " [FromRole.isNavigable] " mult " [FromRole.multiplicity] " ord " [FromRole.ordering] " aggr " [FromRole.aggregation] "\n";
      loop(Instances->MClass As ToClass->Role As ToRole->MAssociation As otherAssoc where [otherAssoc.id] == [MAssociation.id] && [FromRole.id] != [ToRole.id])
   info = "-> " [ToClass.name] " R " [ToRole.name]"="[ToRole.id] "\n";
      end loop
   end loop
   
end proc

proc printObjects()
   loop(Instances->MPackage->MClass->MObject)
      info = "P " [MPackage.name] " C " [MClass.name] " O " [MObject.name] "\n";
   end loop
end proc

proc printPackagesAndClasses()

   loop(Instances->MPackage)
      if(isSubsystemPackage([MPackage]))
         info = "Subsystem Package " [MPackage.name] "\n";
      else
         info = "Ordinary Package " [MPackage.name] " named " [MPackage:packageName] " in cu " [MPackage:cuName] " in subsystem " [MPackage:subSystemPath] "\n";
      end if
   end loop
   
   loop(Instances->MClass)
      info = "Class " [MClass.name] " in package named " [MClass:packageName] " in cu " [MClass:cuName] "\n";
   end loop

end proc

proc printAllStates()

   loop(Instances->MClass->MStatemachine)
      info = printStates([MStatemachine],[MClass.name]);
   end loop

end proc

template printStates(MStatemachine,name)
States of **[name]**:
	[loop(MStatemachine->MState)]
	[if(hasLoop(MState->MCreationState))]
	Creation State [MState.name]=[MState.id]
	[else if(hasLoop(MState->MFinalState))]]
	Final State [MState.name]=[MState.id]
	[else if(hasLoop(MState->MPseudoState))]
	Pseudo State [MState.name]=[MState.id]
	[else]
	State [MState.name]=[MState.id]
	[end if end if end if]
	[loop(MState->MAction->MActionType)]
		action [MAction.name] type [MActionType.type]
	[end loop]
	[loop(MState->MStatemachine As MyMachine)]
		In SM [getSMName([MyMachine])]=[MStatemachine.id]
	[end loop]
	[loop(MState->ToState->MTransition where !hasLoop(MTransition->TriggerEvent))]
		Eventless Transition [MTransition.id]
		[loop(MTransition->MGuard)]
			Guard [MGuard.expression]
		[end loop]
		[loop(MTransition->SendAction)]
			SendAction [SendAction.name]
		[end loop]
		[loop(MTransition->MTarget)]
			Target [MTarget.target]
		[end loop]
	[end loop]
	[loop(MState->ToState->MTransition->TriggerEvent)]
		Transition with [TriggerEvent.name]=[TriggerEvent.id]
		[loop(MTransition->MGuard)]
			Guard [MGuard.expression]
		[end loop]
		[loop(MTransition->SendAction)]
			SendAction [SendAction.name]
		[end loop]
		[loop(MTransition->MTarget)]
			Target [MTarget.target]
		[end loop]
	[end loop]
	[loop(MState->Submachine)]
	[printStates([Submachine],[MState.name])]
	[end loop]
	[end loop]
end template

proc testInfo(tag,item)

   if([Test_[tag]])
      info = [item];
   end if
   
end proc
