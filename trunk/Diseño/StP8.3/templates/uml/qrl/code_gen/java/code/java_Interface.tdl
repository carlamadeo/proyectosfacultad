/************************************************** 
 * java_Interface.tdl
 * ------------------
 *
 * The "master" template for a Java interface.
 * The order, in which indivual interface members appear:
 *
 * 1) static attributes (constants too)
 * 2) operations
 *    a) modeled operations
 * 
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    17.12.2001
 *
 * Copyright 2001, Aonix, San Diego
 **************************************************/

template MInterface.gen_body()
[genClassDependencies([MInterface])]
  [if ([COMMENT_CLASSES])]
[genJavaDocComment([MInterface])]
  [end if]
[string_trim(replace([MInterface:access]" "[MInterface:modifiers]" interface "[MInterface.name]genBaseClass([MInterface]), "  +", " "))] {
  [if (hasLoop(MInterface->MAttribute Where [MAttribute.binding] == "static"))]
^
  // ------------------------------------------------------------
  // static attributes
  // ------------------------------------------------------------
    [loop(MInterface->MAttribute Where [MAttribute.binding] == "static")]
      [importType([MAttribute.type])]
      [if ([COMMENT_ATTRIBUTES])]
  [genJavaDocComment([MAttribute])]
      [end if]
      [if ([MAttribute:defval] == "" || [MAttribute:derived])]
  [string_trim(replace([MAttribute.access]" static "[MAttribute:modifiers]" "[MAttribute.type]" "[MAttribute.name], "  +", " "))];    
      [else]
  [string_trim(replace([MAttribute.access]" static "[MAttribute:modifiers]" "[MAttribute.type]" "[MAttribute.name], "  +", " "))] = [MAttribute:defval];
      [end if]
    [end loop]
  [end if]

  [mergeOut("UDAT::"[MInterface.guid], "---- additional static attributes")]
  [if (hasLoop(MInterface->MOperation))]
^
  // ------------------------------------------------------------
  // methods
  // ------------------------------------------------------------
    [loop(MInterface->MOperation)]
      [importType([MOperation.returnType])]
      [if ([COMMENT_METHODS])]
  [genJavaDocComment([MOperation])]
      [end if]
  [string_trim("public " [MOperation.returnType] " " [MOperation.name] "(" getOpParas([MOperation]) ") " getExceptions([MOperation]))];
    [end loop]
  [end if]
  [mergeOut("UDOP::"[MInterface.guid], "---- additional operations")]
  [loop(MInterface->NestedClass)]
  [[NestedClass].gen_body()]
  [end loop]
}
end template
