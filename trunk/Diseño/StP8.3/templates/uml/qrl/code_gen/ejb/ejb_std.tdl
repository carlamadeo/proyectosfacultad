/***********************************************
 *
 * Standardfunctions:
 * suitable for several modelelements.
 *
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    11/18/2000
 ***********************************************/

USES ../tdl/std;

////////////////////////////////////////////////////////////////////////////////
// standard functions
////////////////////////////////////////////////////////////////////////////////

/* Generates a marked section in the output. The content of this section can 
be changed by the user in the generated file. These changes will not be 
overwritten in subsequent cycles of code generation */
template mergeOut(uniqueId,desc)
//#ACD# M([uniqueId]) [desc]
// user defined code to be added here ...

//#end ACD#
end template



/* Generates a marked section in the XML-DeploymentDescriptor. 
The content of this section can be changed by the user in the 
generated file. These changes will not be overwritten in 
subsequent cycles of code generation */
template mergeOutDD(uniqueId, desc)
<!-- #ACD# M([uniqueId]) [desc]) 
User defined text to be added here      
    
#end ACD# -->
end template



// this procedure is called once by main (defined in ejb_main.tdl) before
// any other procedure or template. It sets up the merge mechanism for 
// incremental code generation (delMergeFile and appendMergeFile).
// The current language for type mapping is defined (setLanguage) 
proc init()
	delMergeFile();
	appendMergeFile("merge_config_EJB.txt");
	setLanguage("EJB");
end proc	



//	write the description
template outDesc(Description)
[loop(Instances->TokenSet([Description]))]
[TokenSet.line]
[end loop]
end template



proc genDDDescription(MElement)
    local result = "";
    if (hasDescription([MElement]) == "False")
        return;
    end if
    loop(MElement->Note Where [Note.type] == "GenericObject")
        [result] = doDescriptionDD([Note.description]);
    end loop
    return [result];
end proc

// looks if a Element has a description.
// If so, it writes the description to deployment
// descriptor.
template doDescriptionDD(Description) 
<description>
[loop(Instances->TokenSet([Description]))]
    [TokenSet.line]
[end loop]
</description>
end template



// write the description commented
template commentedOutDesc(Description)
[loop(Instances->TokenSet([Description]))]
// [TokenSet.line]
[end loop]
end template



// Determines if a model element has the specified Tagged Value
// Returns "False" if not available.
proc getTaggedValueTag(MElement, str)
	loop(MElement->TaggedValue As TG Where [TG.tag] == [str])
	    return "True";
	end loop
end proc



// return value of tagged value with "tag" == "str" 
// Returns the empty string if not available
proc getTaggedValueValue(MElement, str)
	loop(MElement->TaggedValue As TG Where [TG.tag] == [str])
	    return [TG.value];
	end loop
	return "";
end proc



// Defines, wether this Modelelement has the specified
// Stereotype. Returns "True" on success, "False" otherwise.
proc hasStereotype(MSemElement, name)
    local stereo = "False";
    loop(MSemElement->Stereotype Where [Stereotype.name] == "name")
        [stereo] = "True";
    end loop
    return [stereo];
end proc



 //	is class external?
proc classIsExternal(MClass)
	loop(MClass->Note->Item)
		if ([Item.type] == "UmlClassIsImported" && [Item.value] == "True")
			return "True";
		end if
	end loop
	return "False";
end proc

proc hasDescription(MElement)
    loop(MElement->Note Where [Note.type] == "GenericObject")
        if ([Note.description] != "")
            return "True";
        end if
    end loop
    return "False";
end proc


// return TRUE if a file exists FALSE otherwise
tcl_proc fileExists(filename)
    set val [file exists $filename];
    if { $val == 1 } { return "TRUE"; } { return "FALSE"; }
end proc

