

// ========================================================================
//                      References to other Packages
// ========================================================================



// genImportList
// -------------
// Generates the fragment where all the import statements are put in.

template genImportList(MClass)
[mark("import","importStatement")]

//#ACD# M(UDIM::) Further import statemets added manually
// import ...
//#end ACD#


end template



// importStatement
// ---------------
// Generates an "import <package>.<class>;" for the given class

proc MClass.importStatement()
  // 1. Return an inport statement if the class is part of a package
  if ([MClass:package_name] != "")
    return "import " [MClass:package_name] "." [MClass.name] ";\n";
  end if
  
  // 2. Return nothing if there is no package given for the class
 // [MClass].error("1");
  return "";  // No package given -> no import necessary 
end proc




// importStatement
// ---------------
// The same for a DataType

proc MDataType.importStatement()
  // 1. If there is a package name associated with this data type
  //    then retun an import statement
  loop (MDataType -> TaggedValue where [TaggedValue.tag] == [JAVA_PACKAGE])
    return "import " [TaggedValue.value] "." getDataType([MDataType.name]) ";\n";
  end loop

  // 2. If there is a package associated with this data type
  //    then retun an import statement based on that package
  //local packageName = packageName([MDataType]);
  //if ([packageName] != "")
  //  return "import " [packageName] "." getDataType([MDataType.name]) ";\n";
  //end if
  
  // 3. There is no package defined for the datatype, so return nothing
  return "";
end proc




// importStatement
// ---------------
// The same for a string that denotes the package to be imported
// Expects a fully referenced name for a class

proc TokenSet.importStatement()
  // 1. Return an inport statement for the given class
  return "import " [TokenSet.line] ";\n";
end proc




// importType
// ----------
// adds the class with the given name to the import list

proc importType(type)
  loop (Instances -> MClass where [MClass.name] == [type])
    // 1. Suppress the statement if it is the current class
    // 2. Do not import if class is in the same package as the current class.
    if ([MClass.id] != [currentClass])
      insert("import", [MClass.id]);
    end if
  end loop
end proc






// importExceptions
// ----------------
// Import each exception class contained in the given list if defined
// in the design. Exceptions in the list must be separated by colons.
//
proc importExceptions(exceptions)
  // 1. Translate the list to a newline-separated list by replacing all 
  //    commas and optional white space in the list by new line characters  
  local exceptionList = replace([exceptions], ", *", "\n");

  // 2. For each line in the list import the type it names
  loop (Instances -> TokenSet([exceptionList]))
    importType([TokenSet.line]);
  end loop
end proc