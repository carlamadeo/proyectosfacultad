/****************************************
 *
 * Code for EntityBean.
 *
 * Author:  Frank Lippert
 * Company: Aonix GmbH
 * Date:    11/20/2000
 ***************************************/

USES util/ejb_BMP; 
USES util/ejb_ImportUtil;

// template for generating an entity bean class.
// handles all aspects of an entity bean including
// bean managed persistence.
template genEntityBean(MClass)
package [MClass:package_name];

// JDK
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.*;

// J2EE
import javax.naming.NamingException;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.EJBObject;
import javax.ejb.EJBException;
import javax.ejb.CreateException;
import javax.ejb.DuplicateKeyException;
import javax.ejb.FinderException;
import javax.ejb.ObjectNotFoundException;
import javax.sql.DataSource;
[if ([MClass:persistence] == "Bean")]

// JDBC
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
[end if]

// Import statements from model
[mark("import", "importStatement")]

// User defined import statements
[mergeOut("UDIMP", "user defined import statements")]


public class [MClass.name][bean_name_suffix][getExtendsStatement([MClass], "Bean")] implements EntityBean {
 
    /******************************************************
     * attributes from EJB specification
     *****************************************************/
 
    // Context for this bean instance, provided by container
    private EntityContext entityContext;
    
    [if ([MClass:persistence] == "Bean")]
    // Connection to Database
    private Connection con;
    private PreparedStatement ps;
    [end if]
    
    
    [if ([MClass:has_attributes] != "False")]
    /******************************************************
     * attributes from model
     *****************************************************/
        [if ([MClass:has_static_attributes] == "True")]
    // Static Attributes
            [loop(MClass->MAttribute Where [MAttribute.binding] == "static")]
                [importType([MAttribute.type])]
    [MAttribute.access] static [MAttribute:modifier] [MAttribute.type] [MAttribute.name][genDefVal([MAttribute])];
            [end loop]
        [end if]
        [if ([MClass:has_normal_attributes] == "True")]
    
    // Instance Attributes
            [loop(MClass->MAttribute Where [MAttribute.binding] == "")]
                [importType([MAttribute.type])]
    [MAttribute.access] [MAttribute:modifier] [MAttribute.type] [MAttribute.name];
            [end loop]
    
    
    /******************************************************
     * access methods for instance attributes
     *****************************************************/
     
   [[MClass].genAccessMethods("True")]
        [end if]
    [end if]
    [if ([MClass:bulk_accessors] == "True")]
    
    
    /******************************************************
     * bulk access methods for instance attributes
     *****************************************************/
     
    public void setProperties([MClass.name][vo_name_suffix] props) 
    {
        [loop(MClass->MAttribute Where [MAttribute:access_methods] != "False")]
        [MAttribute.name] = props.get[upcase_firstchar([MAttribute.name])]();
        [end loop]
    }
    public [MClass.name][vo_name_suffix] getProperties() 
    {
        return new [MClass.name][vo_name_suffix]([loop(MClass->MAttribute Where [MAttribute:access_methods] != "False"; setDelim(""); setDelim(", "))][delim()][MAttribute.name][end loop]);
    }
    [end if]

    
    /******************************************************
     * create methods
     *****************************************************/
     
    [loop(Instances->MOperation([MClass:create_methods]))]
    // ejbCreate([genOpParaTypes([MOperation])])
    // ----------------------------------------------------
    [importExceptions([MOperation:throws])]
    public [MClass:pk_class] ejbCreate([genOpParaList([MOperation])]) 
        throws CreateException[genExceptions([MOperation:throws])]
    {
        [mergeOut("UDCREAT::" [MOperation.guid], "-- body of ejbCreate method")]
        [loop(MOperation->OpPara)]
        this.[OpPara.name] = [OpPara.name];
        [end loop]
        
        [if ([MClass:persistence] == "Bean")]
        try {
            con = getConnection();
            ps = con.prepareStatement("INSERT INTO [toUpper([MClass.name])] VALUES " + 
                                      "([[MOperation].genPlaceHolders()])");
            [setCount("1")]
            [loop(MOperation->OpPara)]
            ps.set[upcase_firstchar(getSQLType([OpPara.type]))]([getCount()], [OpPara.name]);
            [addCount("1")]
            [end loop]
            if (ps.executeUpdate() != 1) {
                throw new CreateException("Failed to add [MClass.name] to database");
            }
        }
        catch(SQLException se) {
            System.out.println("A database error occurred!");
            se.printStackTrace();
        }
        finally {
            try {
                if (con != null) con.close();
                if (ps  != null) ps.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        return [getPrimaryKey([MClass])];
        [else]
        return null;
        [end if]
    }
    // ejbPostCreate([genOpParaTypes([MOperation])])
    // ---------------------------------------------------
    [importExceptions([MOperation:throws])]
    public void ejbPostCreate([genOpParaList([MOperation])]) 
        throws CreateException[genExceptions([MOperation:throws])]
    {
        [mergeOut("UDPOSTCREAT::" [MOperation.guid], "-- body of postCreate method")]
    }
    
    [end loop]

    /******************************************************
     * finder methods
     *****************************************************/

    [if ([MClass:persistence] == "Bean")]
    // mandatory findByPrimaryKey method according to EJB Spec 1.1
    public [MClass:pk_class] ejbFindByPrimaryKey([MClass:pk_class] pk) 
        throws FinderException
    {
        [mergeOut("UDFINDBYPK", "-- body of ejbFindByPrimaryKey method")]
        ResultSet rs = null;
        try {
            con = getConnection();
            ps  = con.prepareStatement("SELECT [MClass:pk_attr_list] FROM [toUpper([MClass.name])] " +
                                       "WHERE [[MClass].getWhereClause()]");
        [setCount("1")]                                       
        [loop(Instances->MAttribute([MClass:pk_attributes]))]
            ps.set[upcase_firstchar(getSQLType([MAttribute.type]))]([getCount()], [[MAttribute].setSQLType()]);
        [addCount("1")]
        [end loop]
            rs = ps.executeQuery();
            if (! rs.next()) {
                throw new ObjectNotFoundException("Cannot find [MClass.name] with appropriate PrimaryKey");
            }
        }
        catch(SQLException se) {
            throw new EJBException(se);
        }
        finally {
            try {
                if (rs  != null) rs.close();
                if (ps  != null) ps.close();
                if (con != null) con.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        return pk;
    }
    
    // other findBy.. methods
    [loop(Instances->MOperation([MClass:find_methods]))]
    // ejb[upcase_firstchar([MOperation.name])]([genOpParaTypes([MOperation])])
    // ----------------------------------------------------
    [importExceptions([MOperation:throws])]
    public [MOperation:finder_rettype] ejb[upcase_firstchar([MOperation.name])]([genOpParaList([MOperation])]) 
        throws FinderException[genExceptions([MOperation:throws])]
    {
        //#ACD# M(UDFIND::[MOperation.guid]) -- body of ejbFindBy(..) method)]
        // code manually to be added here
        String selectString = "SELECT [MClass:pk_attr_list] FROM [toUpper([MClass.name])] " +
                              "WHERE [[MOperation].getWhereClause()]";
        //#end ACD#
        [if ([MOperation:finder_rettype] == [MClass:pk_class])]
            [if ([MClass:gen_pk_class] == "True")]
        [MClass:pk_class] pk = new [MClass:pk_class]();
            [else]
        [MClass:pk_class] pk = new [MClass:pk_class]([genDefValForCtor([MClass:pk_class])]);            
            [end if]
        [else]
        Vector    vec = new Vector();
        [end if]
        ResultSet rs  = null;
        try {
            con = getConnection();
            ps  = con.prepareStatement(selectString);
        [setCount("1")]                                       
        [loop(MOperation->OpPara)]
            ps.set[getSQLType([OpPara.type])]([getCount()], [setSQLType([OpPara.type], [OpPara.name])]);
        [addCount("1")]
        [end loop]
            rs = ps.executeQuery();
            while (rs.next()) {
        [if ([MOperation:finder_rettype] != [MClass:pk_class])]
            [if ([MClass:gen_pk_class] == "True")]
                [MClass:pk_class] pk = new [MClass:pk_class]([genDefValForCtor([MClass:pk_class])]);
            [else]
                [MClass:pk_class] pk = new [MClass:pk_class]();
            [end if]
        [end if]
        [if ([MClass:gen_pk_class] == "True")]
            [loop(Instances->MAttribute([MClass:pk_attributes]))]
                pk.[MAttribute.name] = [getResultSet([MAttribute], "rs")];
            [end loop]
        [else]
            [loop(MClass->MAttribute->TaggedValue As TG Where [TG.tag] == "ejb_PKClass" && [TG.value] == "True")]
                pk = [getResultSet([MAttribute], "rs")];
            [end loop]
        [end if]
        [if ([MOperation:finder_rettype] != [MClass:pk_class])]
                vec.addElement(pk);
        [end if]
            }
        }
        catch(SQLException se) {
            throw new EJBException(se);
        }
        finally {
            try {
                if (rs  != null) rs.close();
                if (ps  != null) ps.close();
                if (con != null) con.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        [if ([MOperation:finder_rettype] == [MClass:pk_class])]
        return pk;
        [else]
            [if ([MOperation:finder_rettype] == "Collection")]
        return vec;            
            [else] [// we asume "Enumeration" here!]
        return vec.elements();
            [end if]
        [end if]
    }
    [end loop]
    [end if]

    /******************************************************
     * business methods
     *****************************************************/
 
    [loop(Instances->MOperation([MClass:business_methods]))]
    // [MOperation.name]([genOpParaTypes([MOperation])])
    //-----------------------------------------------------
    [importExceptions([MOperation:throws])]
    [genOperationHeader([MOperation])] [MOperation.name]([genOpParaList([MOperation])])[if([MOperation:throws] != "")] throws [MOperation:throws][end if] 
    {
        //#ACD# M(UDBM::[MOperation.guid]) -- body of business method)]
        // code manually to be added here
        return[getDefaultReturn([MOperation])];
        //#end ACD#
    }
    [end loop]
 
    /******************************************************
     * other private Methods (defined only in Bean class)
     *****************************************************/   
    
    [loop(Instances->MOperation([MClass:bean_private_methods]))]
    // [MOperation.name]([genOpParaTypes([MOperation])])
    //-----------------------------------------------------
    [importExceptions([MOperation:throws])]
    [genOperationHeader([MOperation])] [MOperation.name]([genOpParaList([MOperation])])[if([MOperation:throws] != "")] throws [MOperation:throws][end if] 
    {
        //#ACD# M(UDBP::[MOperation.guid]) -- body of bean private method)]
        // code manually to be added here
        return[getDefaultReturn([MOperation])];
        //#end ACD#
    }
    [end loop]


    /******************************************************
     * Implemented methods from javax.ejb.EntityBean.
     *
     * In bean-managed persistence, an implementation 
     * of this methods is mandatory, in container-managed 
     * persistence the method's body should be left empty.
     *****************************************************/
     
    /**
     * This method is called after a bean is activated 
     * from the instance pool. In BMP it can be used to 
     * reset the bean's transient fields. 
     */
    public void ejbActivate() 
    {
        [mergeOut("UDACTV", "-- body of ejbActivate method")]
        [if ([MClass:persistence] == "Bean")]
            [if ([MClass:gen_pk_class] == "False")]
        [MClass:pk_var_name] = ([MClass:pk_class]) entityContext.getPrimaryKey();
            [end if]
        [end if]
    }
    
    
    /**
     * Callback immediatly called before the bean is 
     * passivated to the instance pool.
     */
    public void ejbPassivate() 
    {
        [mergeOut("UDPSVT", "-- body of ejbPassivate method")]
        [if ([MClass:persistence] == "Bean")]
            [if ([MClass:gen_pk_class] == "False")]
        [MClass:pk_var_name] = null;
            [end if]
        [end if]
    }
    
    
    /**
     * Callback for synchronizing the bean's state with 
     * the contents of the underlying database table.
     */
    public void ejbLoad() 
    {
        [mergeOut("UDLOAD", "-- body of ejbLoad method")]
        [if ([MClass:persistence] == "Bean")]
        ResultSet rs = null;
        try {
            [MClass:pk_class] pk = ([MClass:pk_class]) entityContext.getPrimaryKey();
            con = getConnection();
            ps  = con.prepareStatement("SELECT [MClass:access_attr_list] " +
                                       "FROM [toUpper([MClass.name])] WHERE [[MClass].getWhereClause()]");
            [if ([MClass:gen_pk_class] == "True")]
                [setCount("1")]
                [loop(Instances->MAttribute([MClass:pk_attributes]))]
            ps.set[getSQLType([MAttribute.type])]([getCount()], [[MAttribute].setSQLType()]);
                [addCount("1")]
                [end loop]
            [else]
            ps.set[getSQLType([MClass:pk_class])](1, [setSQLType([MClass:pk_class], [MClass:pk_var_name])]);
            [end if]
            rs = ps.executeQuery();
            if (rs.next()) {
                [if ([MClass:gen_pk_class] == "True")]
                    [loop(Instances->MAttribute([MClass:pk_attributes]))]
                this.[MAttribute.name] = [getResultSet([MAttribute], "rs")];
                    [end loop]
                [end if]
                [loop(MClass->MAttribute Where [MAttribute:access_methods] == "True")]
                this.[MAttribute.name] = [getResultSet([MAttribute], "rs")];
                [end loop]
            }
            else {
                throw new EJBException();
            }                              
        }
        catch(SQLException se) {
            throw new EJBException(se);    
        }
        finally {
            try {
                if (rs  != null) rs.close();
                if (ps  != null) ps.close();
                if (con != null) con.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        [end if]
    }
    
    
    /**
     * Callback for synchronizing the underlying database
     * table with the bean's state.
     */
    public void ejbStore() 
    {
        [mergeOut("UDSTORE", "-- body of ejbStore method")]
        [if ([MClass:persistence] == "Bean")]
        try {
            con = getConnection();
            ps  = con.prepareStatement("UPDATE [toUpper([MClass.name])] SET [genUpdatePlaceHolders([MClass])]" + 
                                       "WHERE [[MClass].getWhereClause()]");
            [setCount("1")]                                       
            [loop(MClass->MAttribute Where [MAttribute:access_methods] == "True")]
            ps.set[getSQLType([MAttribute.type])]([getCount()], [[MAttribute].setSQLType()]);
            [addCount("1")]
            [end loop]
            if (ps.executeUpdate() != 1) {
                throw new EJBException("ejbStore(): Could not synchronize bean's state with database");
            }
            
        }
        catch(SQLException se) {
            throw new EJBException(se);                
        }
        finally {
            try {
                if (ps  != null) ps.close();
                if (con != null) con.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        [end if]
    }
    
    
    /**
     * This method is call when the bean instance is to be 
     * dissociated from its EJBObject. In BMP, this method is 
     * responsible for destroying the bean's data from the
     * underlying database table.
     */
    public void ejbRemove() 
    {
        [mergeOut("UDREMOVE", "-- body of ejbRemove method")]
        [if ([MClass:persistence] == "Bean")]
        try {
            con = getConnection();
            ps  = con.prepareStatement("DELETE FROM [toUpper([MClass.name])]" + 
                                       "WHERE [[MClass].getWhereClause()]");
            [if ([MClass:gen_pk_class] == "True")]
                [setCount("1")]
                [loop(Instances->MAttribute([MClass:pk_attributes]))]
            ps.set[getSQLType([MAttribute.type])]([getCount()], [[MAttribute].setSQLType()]);
                [addCount("1")]
                [end loop]
            [else]
            ps.set[getSQLType([MClass:pk_class])](1, [setSQLType([MClass:pk_class], [MClass:pk_var_name])]);
            [end if]
            if (ps.executeUpdate() != 1) {
                throw new EJBException("ejbRemove(): Could not remove bean from database");
            }
        }
        catch(SQLException se) {
            throw new EJBException(se);
        }
        finally {
            try {
                if (ps  != null) ps.close();
                if (con != null) con.close();
            }
            catch(SQLException se) {
                se.printStackTrace();
            }
        }
        [end if]
    }
    
        
    /**
     * Provides a context for the bean instance. Is called
     * directly after creation of the instance.
     */
    public void setEntityContext(EntityContext ectx) 
    {
        entityContext = ectx;
    }
    
    
    /**
     * Called when the server decides, to remove the bean
     * instance from the instance pool. 
     */
    public void unsetEntityContext() 
    {
        entityContext = null;
    }
    
    
    [if ([MClass:persistence] == "Bean")]
    // private methods in bean managed persistence
    private Connection getConnection() throws SQLException 
    {
        InitialContext ic  = null;
        DataSource     ds  = null;
        Connection     con = null;
    
        try {
            ic  = new InitialContext();
            ds  = (DataSource) ic.lookup("java:comp/env/jdbc/[getDataSourceName([MClass])][jndi_name_suffix]");
            con =  ds.getConnection();
        }
        catch(NamingException ne) {
            System.out.println("A problem with the database lookup has occured!");
            ne.printStackTrace();
        }
        return con;
    }
    [end if]
}
end template