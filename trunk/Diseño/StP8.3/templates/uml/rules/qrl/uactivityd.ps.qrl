
//      StP/UML
//      Confidential property of Aonix
//      Copyright (c) 1997
//      All rights reserved

#include "rules/qrl/ps.inc"

////////////////////////////////////////////////////////////////////////////////
// 
//  Activity Nodes
//
////////////////////////////////////////////////////////////////////////////////

void
UmlActivity_ps_show()

{
    gde_builtin("PropertySheetShow UmlActivity_ps");

    // reset

    UmlActivity_ps_init();
}


// double click hook
void
UmlActivity_ps_double_click(gde_mapsymbol ms)
{
    ps_reset_last_fill();
    UmlActivity_ps_show();
}



boolean UmlActivity_ps_initted = False;

void
UmlActivity_ps_init()

{
    if (UmlActivity_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlActivity_ps");
        return;
    }
    UmlActivity_ps_initted = True;
//    gde_builtin("EditorActionDone 0214951139  UmlActivity_ps_ActionDone();"); // ECR 6880
    ps_init("UmlActivity_ps", "ObjectName", ps_Node, string_to_list("InitialState FinalState StateMachine SplitControl MergeControl Object State", " "), ps_Node);

    // ECR 3789 begin
    ps_append_field("UmlActivity_ps", "ObjectDescription",
    "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    // ECR 3789 end
    ps_append_field("UmlActivity_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlActivity_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlActivity_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);

    ps_fill("UmlActivity_ps");

    //ps_dump();

    return;
}


// change focus of property sheet

void
UmlActivity_ps_ActionDone()

{
    // reset propsheet

    if( ui_owner_visible(to_ui_prop("UmlActivity_ps","OK")) ) // ECR 4037
        ps_fill("UmlActivity_ps");
}


////////////////////////////////////////////////////////////////////////////////
// 
//  Activity Links
//
////////////////////////////////////////////////////////////////////////////////

void
UmlActivityLink_ps_show()

{
    // Changed for ECR 3786
    if( StateTransIsSelectedActiveFunc() )
    {
        gde_builtin("PropertySheetShow UmlStateTransLink_ps");
        UmlStateTransLink_ps_init();
    }
    else
    {
        gde_builtin("PropertySheetShow UmlActivityLink_ps");
        UmlActivityLink_ps_init();
    }
    // End ECR 3786
}


// double click hook
void
UmlActivityLink_ps_double_click(gde_mapsymbol ms)
{
    ps_reset_last_fill();
    UmlActivityLink_ps_show();
}



boolean UmlActivityLink_ps_initted = False;
boolean UmlStateTransLink_ps_initted = False; // ECR 3786

void
UmlActivityLink_ps_init()

{

    if (UmlActivityLink_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlActivityLink_ps");
        return;
    }

    UmlActivityLink_ps_initted = True;
//    gde_builtin("EditorActionDone 0214951140  UmlActivityLink_ps_ActionDone();");  // ECR 6880
    //ps_init("UmlActivityLink_ps", "", ps_Link, string_to_list("StateTransitionLink SplitControlLink MergeControlLink InputLink OutputLink", " "), ps_Link);
    ps_init("UmlActivityLink_ps", "ObjectName", ps_Link, string_to_list("StateTransitionLink SplitControlLink MergeControlLink InputLink OutputLink", " "), ps_Link);

    // ECR 3789 begin
    ps_append_field("UmlActivityLink_ps", "ObjectDescription",
    "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    // ECR 3789 end

    ps_append_field("UmlActivityLink_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlActivityLink_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlActivityLink_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);

    ps_fill("UmlActivityLink_ps");

    //ps_dump();

    return;
}


// Begin Add ECR 3786
void
UmlStateTransLink_ps_init()
{
    if (UmlStateTransLink_ps_initted)
    {
        // just refresh the prop sheet
        ps_fill("UmlStateTransLink_ps");
        return;
    }

    ui_text_set_readonly(to_ui_prop("UmlStateTransLink_ps", "ObjectName"), True);
    UmlStateTransLink_ps_initted = True;
//    gde_builtin("EditorActionDone 0214951141  UmlActivityLink_ps_ActionDone();");  // ECR 6880
    ps_init("UmlStateTransLink_ps", "ObjectName", ps_Link, string_to_list("StateTransitionLink SplitControlLink MergeControlLink InputLink OutputLink", " "), ps_Link);

    ps_append_field("UmlStateTransLink_ps", "ObjectDescription", "GenericObject", "", ps_NoteDescriptionExternal, NULL);
    ps_append_field("UmlStateTransLink_ps", "Stereotype", "UmlExtensibilityDefinition", "UmlStereotype", ps_StringAnt, NULL);
    ps_append_field("UmlStateTransLink_ps", "Constraints", "UmlExtensibilityDefinition", "UmlConstraintItem", ps_StringList, NULL);
    ps_append_field("UmlStateTransLink_ps", "TaggedValues", "UmlExtensibilityDefinition", "UmlTaggedValue", ps_StringList, NULL);

    ps_append_field("UmlStateTransLink_ps", "TransitionGuard", "", "", ps_ActState, NULL);

    // Begin add ECR 5050
    ps_append_field("UmlStateTransLink_ps", "ChooseGuard", "", "", ps_ChooseGuard, NULL);
    // End add ECR 5050
    ps_append_field("UmlStateTransLink_ps", "TransitionAction", "", "", ps_ActState, NULL);
    // Begin add ECR 5050
    ps_append_field("UmlStateTransLink_ps", "ChooseAction", "", "", ps_ChooseAction, NULL);
    // End add ECR 5050

    ps_fill("UmlStateTransLink_ps");

    //ps_dump();

    return;
}
// End Add ECR 3786
    
// change focus of property sheet

// Begin Change ECR 3786
void
UmlActivityLink_ps_ActionDone()
{
    // originally I wanted to have two different callbacks registered
    // for UmlStateTransLink_ps and UmlActivityLink_ps
    // UmlActivityLink_ps_ActionDone would call ps_fill("UmlActivityLink_ps")
    // UmlStateTransLink_ps would call ps_fill("UmlStateTransLink_ps")
    // 
    // But UmlActivityLink_ps_ActionDone got called when I select a 
    // state trans link, too I have no idea why, so I merged that into
    // one callback and branch depending on the current selection
    
    if( StateTransIsSelectedActiveFunc() && 
        ui_owner_visible(to_ui_prop("UmlStateTransLink_ps","OK")) ) // ECR 4037
        ps_fill("UmlStateTransLink_ps");
    else
        if( ui_owner_visible(to_ui_prop("UmlActivityLink_ps","OK")) ) // ECR 4037
            ps_fill("UmlActivityLink_ps");
}
// End Change ECR 3786

// Active Function

int
UmlActivityObjectPropsActive()
{
    list symbols;

    symbols = gde_selected_symbols();
    if (list_count(symbols) != 1)
        return ACTIVE_FUNC_IS_INACTIVE;

    if (list_count(gde_symbols_find_with_types(symbols,
       string_to_list("SplitControl MergeControl", " "))) 
//     string_to_list("SplitControl MergeControl SplitControlLink MergeControlLink", " "))) 
       == 1)
    {
        ui_text_set_value(to_ui_prop("UmlActivity_ps", "ObjectName"), "");
        ui_activate(to_ui_prop("UmlActivity_ps", "ObjectName"), False);
    }

    // Begin Add ECR 7169
    list objects = gde_symbols_find_with_types(symbols, string_to_list("Object", " "));
    if (list_count( objects ) == 1)
    {
    	return ActiveIfNonAnonymousObject( objects );
    }        
    // End Add ECR 7169

    if (list_count(gde_symbols_find_with_types(symbols, string_to_list("InitialState FinalState StateMachine State SplitControl MergeControl StateTransitionLink SplitControlLink MergeControlLink InputLink OutputLink", " "))) ==
 1)
        return ACTIVE_FUNC_IS_ACTIVE;

    return ACTIVE_FUNC_IS_INACTIVE;
}

