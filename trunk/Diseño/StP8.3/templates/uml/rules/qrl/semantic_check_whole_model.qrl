



int 
StartCheckWholeModel_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckWholeModel");
    return semcheck_rc_code(theprop);
}

int
StartCheckUmlDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "CheckSubMenu");
    return semcheck_rc_code(theprop);
}

int
StartCheckClassDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckClassDiagramFile");
    return semcheck_rc_code(theprop);
}

int
StartCheckClassDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckClassDiagramFiles");
    return semcheck_rc_code(theprop);
}

int
StartCheckUseCaseDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckUseCaseDiagramFile");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckUseCaseDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckUseCaseDiagramFiles");
    return semcheck_rc_code(theprop);
}

int 
StartCheckSequenceDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckSequenceDiagramFile");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckSequenceDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{ 
    get_prop_args_and_begin(theprop, "StartCheckSequenceDiagramFiles"); 
    return semcheck_rc_code(theprop);
} 

int  
StartCheckCollaborationDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    get_prop_args_and_begin(theprop, "StartCheckCollaborationDiagramFile");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckCollaborationDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{  
    get_prop_args_and_begin(theprop, "StartCheckCollaborationDiagramFiles");  
    return semcheck_rc_code(theprop);
}

int   
StartCheckStereotypeDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v) 
{ 
    get_prop_args_and_begin(theprop, "StartCheckStereotypeDiagramFile");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckStereotypeDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{   
    get_prop_args_and_begin(theprop, "StartCheckStereotypeDiagramFiles");   
    return semcheck_rc_code(theprop);
} 

int    
StartCheckActivityDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)  
{  
    get_prop_args_and_begin(theprop, "StartCheckActivityDiagramFile");
    return semcheck_rc_code(theprop);
}
 
int
StartCheckActivityDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v) 
{    
    get_prop_args_and_begin(theprop, "StartCheckActivityDiagramFiles");    
    return semcheck_rc_code(theprop);
} 

int     
StartCheckStateDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)  
{  
    get_prop_args_and_begin(theprop, "StartCheckStateDiagramFile");
    return semcheck_rc_code(theprop);
} 
  
int 
StartCheckStateDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)  
{     
    get_prop_args_and_begin(theprop, "StartCheckStateDiagramFiles");     
    return semcheck_rc_code(theprop);
} 

int     
StartCheckComponentDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)   
{   
    get_prop_args_and_begin(theprop, "StartCheckComponentDiagramFile"); 
    return semcheck_rc_code(theprop);
} 
  
int 
StartCheckComponentDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)   
{        
    get_prop_args_and_begin(theprop, "StartCheckComponentDiagramFiles");      
    return semcheck_rc_code(theprop);
} 

int      
StartCheckDeploymentDiagramFile_cb(ui_event_tp event, ui_prop theprop, int id, string v)    
{   
    get_prop_args_and_begin(theprop, "StartCheckDeploymentDiagramFile");  
    return semcheck_rc_code(theprop);
}  
   
int 
StartCheckDeploymentDiagramFiles_cb(ui_event_tp event, ui_prop theprop, int id, string v)   
{         
    get_prop_args_and_begin(theprop, "StartCheckDeploymentDiagramFiles");       
    return semcheck_rc_code(theprop);
} 

int
semcheck_rc_code(ui_prop button)
{
    if (ui_button_is_ok(button))
        return 1;
    if (ui_button_is_apply(button))
        return 0;
    
    return 0;
}

int 
get_prop_args_and_begin(ui_prop theprop, string parent_func)
{
    int error_count = 0;

    print_message("Checking Semantics");

    int out_form = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_form"));
    string out_file = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_dir"));

    editor_set_is_busy(True);
    ui_busy(to_ui_owner(theprop), True);

    if (out_form != 3 && out_file == "")
    {
        stp_print_message("Please enter an output file name.");
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "Footer1"), 
                     "Please enter an output file name.");
        editor_set_is_busy(False);
        ui_busy(to_ui_owner(theprop), False);

        return 1;
    }
    else
    {
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "Footer1"), "");
    }


    int x;
    list file_names;


    int files_selected = stp_editor_files_selected();
    string current_file_name;
    string check_semantics_current_file_name = "";

    if(files_selected)
    {
        
        file_names = stp_editor_file_names_selected();
        for (x=0; x<list_count(file_names); x++)
        {
            current_file_name = list_get(file_names, x);
            
            if (x != (list_count(file_names) -1))
                check_semantics_current_file_name =
                check_semantics_current_file_name +
                "name='" + current_file_name + "'||";
            else
                check_semantics_current_file_name =
                check_semantics_current_file_name +
                "name='" + current_file_name + "'";
        }
        
        if (list_count(file_names) != 0)
            check_semantics_current_file_name =
            "\"(" + check_semantics_current_file_name + ")\"";      //ECR 5714
        
        string ed_type = stp_editor_file_type_selected();
    }
    
    string cmdstr = "qrp -p " + current_projdir() + " -s " + current_system();
    cmdstr = cmdstr + " -x parent_func " + parent_func;
    cmdstr = cmdstr + " -x out_form " + out_form;
    if (string_length(out_file) > 0)
        cmdstr = cmdstr + " -x out_file " + out_file;
    if (files_selected)
    {
        cmdstr = cmdstr + " -x sem_file_names " + 
                 check_semantics_current_file_name;
        cmdstr = cmdstr + " -x ed_type " + ed_type;
    }
    cmdstr = cmdstr + " -forward_messages " + editor_get_msgd_handle();
    cmdstr = cmdstr + " uml/rules/qrl/semantic_check_whole_model_impl.qrl";

// ECR 7410 begin
    if (is_windows_platform())
    {
        int view_after_run_checked = ui_get_value(to_ui_prop(to_ui_owner(theprop), "view_after_run"));
        if (view_after_run_checked)
            cmdstr = cmdstr + " -viewafter";
    }
// ECR 7410 end

    editor_system(cmdstr, NULL);

    editor_set_is_busy(False);
    ui_busy(to_ui_owner(theprop), False);

    return 0;
}

// ECR 3651a begin
int choice_index = 3;
// ECR 3651a end

int
select_format_check_sem_cb(ui_event_tp event, ui_prop theprop, int id, string v)
{
    choice_index = ui_get_value(to_ui_prop(to_ui_owner(theprop), "out_form"));
    string out_file_name = path_compose(current_projdir() + current_system(), 
        "misc_files", "sem_check_rpt"); // ECR 7403
    string file_ext = "";

    if (choice_index == 3)
    {
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), "");
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), False);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), False);
        // ECR 3651a end
    }
    else if (choice_index == 0)
    {
        file_ext = ".mif";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }
    else if (choice_index == 1)
    {
        file_ext = ".rtf";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }
    else if (choice_index == 2)
    {
        file_ext = ".html";
        ui_activate(to_ui_prop(to_ui_owner(theprop), "out_dir"), True);
        // ECR 3651a begin
        ui_activate(to_ui_prop(to_ui_owner(theprop), "browse_for_out_file"), True);
        // ECR 3651a end
        ui_set_value(to_ui_prop(to_ui_owner(theprop), "out_dir"), 
                     out_file_name + file_ext);
    }

// ECR 7410 begin
    if (is_windows_platform())
    {
        if (choice_index == 3)
            ui_activate(to_ui_prop(to_ui_owner(theprop), "view_after_run"), False);
        else
            ui_activate(to_ui_prop(to_ui_owner(theprop), "view_after_run"), True);
    }
// ECR 7410 end

    return 0;
}

// ECR 3651a begin
int select_out_file_callback(ui_event_tp event, ui_prop theprop, int id, string value)
{
    string str;
    ui_owner uiOwner;

    uiOwner = to_ui_owner(theprop);
    str = ui_get_value(to_ui_prop(uiOwner, "out_dir"));
    
    if(choice_index == 0)
        str = editor_show_filechooser("Open File", str, "Mif Files|*.mif|All Files (*.*)|*");
    else if(choice_index == 1)
        str = editor_show_filechooser("Open File", str, "RTF Files|*.rtf|All Files (*.*)|*");
    else if(choice_index == 2)
        str = editor_show_filechooser("Open File", str, "HTML Files|*.html|All Files (*.*)|*");
    else
        str = editor_show_filechooser("Open File", str, "All Files (*.*)|*");

    if (str != NULL && string_length(str) != 0)
    {
        str = path_normalize(str);
        ui_set_value(to_ui_prop(uiOwner, "out_dir"), str);
    }

    return 0;
}
// ECR 3651a end

