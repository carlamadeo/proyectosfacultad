#include "val/qrl/include/table.inc"

  const int width_1 = 300;
  const int width_2 = 500;
  const int width_3 = 300;
  const int width_4 = 400;

  const string coltitle1 = "Source Rqt ID";
  const string coltitle2 = "Requirement Table";
  const string coltitle3 = "Requirement ID";
  const string coltitle4 = "Short Description";

  struct paragraph_info
    {
      string document;
      string obj_ids;
    };


void
main ()
{
  print_message ("Start Report Generation");

  format ("ValidatorDocuments.rtf");

  string q = "item[RequirementDocument && node [REQRequirement && in_links[REQCurrentRequirementIdentifier] && node_refs]] sort by value";

  list itemlist = list_select(q);
  item itemvar;

  int i;
  int count = list_count(itemlist);

  list document_list = list_create ("paragraph_info", 0);

  paragraph_info tmp1;
  tmp1.document = "";
  tmp1.obj_ids = "";

  string lastdoc = "";

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist,i);

      if (itemvar.value == lastdoc)
        { 
          if (tmp1.obj_ids == "")
             tmp1.obj_ids = "obj_id == " + to_string(itemvar.obj_id);
          else
             tmp1.obj_ids = tmp1.obj_ids + " || obj_id == " + to_string(itemvar.obj_id);
        }
      else
        { 
          if (tmp1.document != "")
            list_append(document_list, tmp1);

          tmp1.document = itemvar.value;
          tmp1.obj_ids = "obj_id == " + to_string(itemvar.obj_id);
          lastdoc = itemvar.value;
        }
    }

  
  list_append(document_list, tmp1);

  count = list_count(document_list);

  paragraph_info document;


  for (i=0;i<count;i++)
    {
      document = list_get(document_list,i);

      MakeOneTable(document);
    }

}


void
MakeOneTable(paragraph_info document)
{
  string q = "item[RequirementParagraph && ( ${document.obj_ids} )] sort by value";

  list itemlist = list_select(q);
  item itemvar;

  int i;
  int count = list_count(itemlist);

  string c1,c2,c3,c4;

  string caption = "System Requirements to Software Requirements Traceability Table";

  paragraph ("Heading 3");
  print ("Requirements Traceability from System Document \"" + document.document + "\"");

  InitializeTable();

  for (i=0;i<count;i++)
    {
      itemvar = list_get(itemlist, i);

      if (itemvar.value != "")
        c1 = itemvar.value;
      else
        c1 = "unspecified";
      c2 = GetTableName(itemvar.obj_id);
      c3 = GetRequirementName(itemvar.obj_id);
      c4 = GetItem("REQInformalNameItem", itemvar.obj_id);

      PrintTableRow(c1, c2, c3, c4);
    }

  End_Table();

  print_table(document.document, caption);

  print_message (document.document + " Table Printed");

}

string
GetRequirementName(int id)
{
  string q = "node [${id}]";
  node nodevar = find_by_query(q);

  return (nodevar.name);


}

string
GetTableName(int id)
{
  string q = "file [REQTable && node_refs[node [${id}] ] ]";
  file filevar = find_by_query(q);

  return (filevar.name);
}



string
GetItem(string typename, int id)
{
   string q = "item[${typename} && obj_id==${id}]";

   item itemvar = find_by_query (q);

   if (itemvar == NULL)
     return ("unspecified");
   else
     {
       if (itemvar.value == "")
         return ("unspecified");
       else
         return (itemvar.value);
     }
}

void
PrintTableRow( string c1, string c2, string c3, string c4 )
{

      Begin_Row();

      Make_Cell(width_1, NULL, NULL, NULL, NULL, NULL, c1 );
      Make_Cell(width_2, NULL, NULL, NULL, NULL, NULL, c2 );
      Make_Cell(width_3, NULL, NULL, NULL, NULL, NULL, c3 );
      Make_Cell(width_4, NULL, NULL, NULL, NULL, NULL, c4 );

      End_Row();

}



void 
InitializeTable()
{


   table_caption_placement_set(Top);
   table_width_set(6.5);

   table_caption_paragraph_format_set ("TableTitle");
   table_cell_bold_paragraph_format_set ("CellBody");
   table_cell_paragraph_format_set ("CellBodyleft");


   // create title bar

   Begin_Table(4);

   Begin_Row();

   Make_Cell(width_1, NULL, "Shade0", NULL, NULL, NULL, coltitle1);
   Make_Cell(width_2, NULL, "Shade0", NULL, NULL, NULL, coltitle2);
   Make_Cell(width_3, NULL, "Shade0", NULL, NULL, NULL, coltitle3);
   Make_Cell(width_4, NULL, "Shade0", NULL, NULL, NULL, coltitle4);

   End_Row();

}




