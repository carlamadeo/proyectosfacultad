#include "val/qrl/include/table.inc"

  const int width_1 = 200;
  const int width_2 = 300;
  const int width_3 = 600;

  const string coltitle1 = "Requirement ID";
  const string coltitle2 = "Short Description";
  const string coltitle3 = "Model Component";

  struct component
    {
      string objects;
      string names;
    };

void
main ()
{
  print_message ("Start Report Generation");

  format ("ValidatorDocuments.rtf");

  string caption;

  string q = "file [REQTable] sort by name";
  list filelist = list_select(q);
  file filevar;
  int i;
  int count = list_count(filelist);

  for (i=0;i<count;i++)
    {
      filevar = list_get(filelist,i);
      paragraph ("Heading 3");
      print ("Software Requirements Table: " + filevar.name);

      caption = "Software Requirements to Software Model Traceability";
      PrintTraceabilityTable (filevar.id, filevar.name, caption);
    }
}

void
PrintTraceabilityTable (int id, string name, string caption)
{
  string c1,c2,c3,c4;

  string q = "node [REQRequirement && in_links[REQCurrentRequirementIdentifier] && node_refs[file[${id}]]]";

  list nodelist = list_select(q);
  node nodevar;

  int i;
  int count = list_count(nodelist);

  InitializeTable();


  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);
      
      c1 = nodevar.name;
      c2 = GetItem("REQInformalNameItem", nodevar.id);
      c3 = GetModelComponents(nodevar.name);

      PrintTableRow(c1, c2, c3);
    }


  End_Table();

  print_table(name, caption);

  print_message (name + " Table Printed");


}


string
GetItem(string typename, int id)
{
   string q = "item[${typename} && obj_id==${id}]";

   item itemvar = find_by_query (q);

   if (itemvar == NULL)
     return ("unspecified");
   else
     {
       if (itemvar.value == "")
         return ("unspecified");
       else
         return (itemvar.value);
     }
}

string
GetModelComponents(string valuename)
{
  string q = "node [node_refs && items[REQAnalysisAssignmentItem && value == '${valuename}' ]]";
  list nodelist = list_select(q);
  node nodevar;

  int count = list_count(nodelist);
  int i;

  string str="unspecified";

  for (i=0;i<count;i++)
    {
      nodevar = list_get(nodelist,i);
      if (i==0)
        str = nodevar.type + ":" + nodevar.name;
      else
        str = str + " " + nodevar.type + ":" + nodevar.name;
    }
  return (str);

}

void
PrintTableRow( string c1, string c2, string c3 )
{

      Begin_Row();

      Make_Cell(width_1, NULL, NULL, NULL, NULL, NULL, c1 );
      Make_Cell(width_2, NULL, NULL, NULL, NULL, NULL, c2 );
      Make_Cell(width_3, NULL, NULL, NULL, NULL, NULL, c3 );

      End_Row();

}



void 
InitializeTable()
{


   table_caption_placement_set(Top);
   table_width_set(6.5);

   table_caption_paragraph_format_set ("TableTitle");
   table_cell_bold_paragraph_format_set ("CellBody");
   table_cell_paragraph_format_set ("CellBodyleft");


   // create title bar

   Begin_Table(3);

   Begin_Row();

   Make_Cell(width_1, NULL, "Shade0", NULL, NULL, NULL, coltitle1);
   Make_Cell(width_2, NULL, "Shade0", NULL, NULL, NULL, coltitle2);
   Make_Cell(width_3, NULL, "Shade0", NULL, NULL, NULL, coltitle3);

   End_Row();

}




